
TP_systeme_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cd28  0800cd28  0001cd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d254  0800d254  000203d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d25c  0800d25c  000203d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d260  0800d260  0001d260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  0800d264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200003d8  0800d63c  000203d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  0800d63c  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0e6  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  0003b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a69  00000000  00000000  00041038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019661  00000000  00000000  0006aaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113dd7  00000000  00000000  00084102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e90  00000000  00000000  00197f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003d8 	.word	0x200003d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cd0c 	.word	0x0800cd0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003dc 	.word	0x200003dc
 800021c:	0800cd0c 	.word	0x0800cd0c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fec5 	bl	8009d64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000fe4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001016:	2201      	movs	r2, #1
 8001018:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001046:	f001 faf3 	bl	8002630 <HAL_ADC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001050:	f000 fbfc 	bl	800184c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8001060:	f002 ff74 	bl	8003f4c <HAL_ADCEx_MultiModeConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800106a:	f000 fbef 	bl	800184c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2306      	movs	r3, #6
 8001074:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107a:	237f      	movs	r3, #127	; 0x7f
 800107c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0xe8>)
 800108c:	f002 fa64 	bl	8003558 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001096:	f000 fbd9 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	; 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003f4 	.word	0x200003f4
 80010a8:	04300002 	.word	0x04300002

080010ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09e      	sub	sp, #120	; 0x78
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2254      	movs	r2, #84	; 0x54
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 fe49 	bl	8009d64 <memset>
  if(adcHandle->Instance==ADC1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010da:	d13c      	bne.n	8001156 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010e6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 f9ab 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010f8:	f000 fba8 	bl	800184c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 8001102:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_ADC_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800112c:	2301      	movs	r3, #1
 800112e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f003 f9db 	bl	80044fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2012      	movs	r0, #18
 800114c:	f003 f8e1 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001150:	2012      	movs	r0, #18
 8001152:	f003 f8f8 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3778      	adds	r7, #120	; 0x78
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <MX_GPIO_Init+0xe4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a26      	ldr	r2, [pc, #152]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2108      	movs	r1, #8
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <MX_GPIO_Init+0xe8>)
 80011c8:	f003 fb1a 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2120      	movs	r1, #32
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f003 fb14 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <MX_GPIO_Init+0xe8>)
 80011f0:	f003 f984 	bl	80044fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 80011f4:	2308      	movs	r3, #8
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <MX_GPIO_Init+0xe8>)
 800120c:	f003 f976 	bl	80044fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001210:	2320      	movs	r3, #32
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f003 f967 	bl	80044fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f003 f86d 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001238:	2028      	movs	r0, #40	; 0x28
 800123a:	f003 f884 	bl	8004346 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	48000800 	.word	0x48000800

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0a0      	sub	sp, #128	; 0x80
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	673b      	str	r3, [r7, #112]	; 0x70
	int			speedValue = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001262:	f000 ff0e 	bl	8002082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f000 fa8f 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126a:	f7ff ff7b 	bl	8001164 <MX_GPIO_Init>
  MX_TIM1_Init();
 800126e:	f000 fc6d 	bl	8001b4c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001272:	f000 fe31 	bl	8001ed8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001276:	f7ff fea1 	bl	8000fbc <MX_ADC1_Init>
  MX_TIM2_Init();
 800127a:	f000 fd25 	bl	8001cc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800127e:	48b7      	ldr	r0, [pc, #732]	; (800155c <main+0x30c>)
 8001280:	f004 fb88 	bl	8005994 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	48b5      	ldr	r0, [pc, #724]	; (800155c <main+0x30c>)
 8001288:	f004 fe6e 	bl	8005f68 <HAL_TIM_IC_Start_IT>


	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2108      	movs	r1, #8
 8001290:	48b3      	ldr	r0, [pc, #716]	; (8001560 <main+0x310>)
 8001292:	f003 fab5 	bl	8004800 <HAL_GPIO_WritePin>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8001296:	463b      	mov	r3, r7
 8001298:	2224      	movs	r2, #36	; 0x24
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f008 fd61 	bl	8009d64 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f008 fd5a 	bl	8009d64 <memset>
 80012b0:	4bac      	ldr	r3, [pc, #688]	; (8001564 <main+0x314>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80012b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ba:	2100      	movs	r1, #0
 80012bc:	48aa      	ldr	r0, [pc, #680]	; (8001568 <main+0x318>)
 80012be:	f008 fd51 	bl	8009d64 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80012c2:	2201      	movs	r2, #1
 80012c4:	49a7      	ldr	r1, [pc, #668]	; (8001564 <main+0x314>)
 80012c6:	48a9      	ldr	r0, [pc, #676]	; (800156c <main+0x31c>)
 80012c8:	f006 fd8e 	bl	8007de8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f000 ff49 	bl	8002164 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2266      	movs	r2, #102	; 0x66
 80012d8:	49a5      	ldr	r1, [pc, #660]	; (8001570 <main+0x320>)
 80012da:	48a4      	ldr	r0, [pc, #656]	; (800156c <main+0x31c>)
 80012dc:	f006 fced 	bl	8007cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	221a      	movs	r2, #26
 80012e6:	49a3      	ldr	r1, [pc, #652]	; (8001574 <main+0x324>)
 80012e8:	48a0      	ldr	r0, [pc, #640]	; (800156c <main+0x31c>)
 80012ea:	f006 fce6 	bl	8007cba <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, usartBuffer, sizeof(usartBuffer), HAL_MAX_DELAY);
		HAL_Delay(1000);
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
		// uartRxReceived is set to 1 when a new character is received on uart 1

		if (!ADCmeasuring){
 80012ee:	4ba2      	ldr	r3, [pc, #648]	; (8001578 <main+0x328>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <main+0xac>

			HAL_ADC_Start_IT(&hadc1);
 80012f6:	48a1      	ldr	r0, [pc, #644]	; (800157c <main+0x32c>)
 80012f8:	f001 fd46 	bl	8002d88 <HAL_ADC_Start_IT>

		}

		if(uartRxReceived){
 80012fc:	4ba0      	ldr	r3, [pc, #640]	; (8001580 <main+0x330>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d058      	beq.n	80013b6 <main+0x166>
			switch(uartRxBuffer[0]){
 8001304:	4b97      	ldr	r3, [pc, #604]	; (8001564 <main+0x314>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b0d      	cmp	r3, #13
 800130a:	d002      	beq.n	8001312 <main+0xc2>
 800130c:	2b7f      	cmp	r3, #127	; 0x7f
 800130e:	d02f      	beq.n	8001370 <main+0x120>
 8001310:	e03e      	b.n	8001390 <main+0x140>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2203      	movs	r2, #3
 8001318:	499a      	ldr	r1, [pc, #616]	; (8001584 <main+0x334>)
 800131a:	4894      	ldr	r0, [pc, #592]	; (800156c <main+0x31c>)
 800131c:	f006 fccd 	bl	8007cba <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001320:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4994      	ldr	r1, [pc, #592]	; (8001588 <main+0x338>)
 8001336:	4618      	mov	r0, r3
 8001338:	f009 f9a6 	bl	800a688 <strtok>
 800133c:	4603      	mov	r3, r0
 800133e:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 8001340:	e00e      	b.n	8001360 <main+0x110>
					argv[argc++] = token;
 8001342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	67ba      	str	r2, [r7, #120]	; 0x78
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	3380      	adds	r3, #128	; 0x80
 800134c:	443b      	add	r3, r7
 800134e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001350:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 8001354:	498c      	ldr	r1, [pc, #560]	; (8001588 <main+0x338>)
 8001356:	2000      	movs	r0, #0
 8001358:	f009 f996 	bl	800a688 <strtok>
 800135c:	4603      	mov	r3, r0
 800135e:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 8001360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ed      	bne.n	8001342 <main+0xf2>
				}

				idx_cmd = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 800136e:	e01f      	b.n	80013b0 <main+0x160>

				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8001370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001376:	3380      	adds	r3, #128	; 0x80
 8001378:	443b      	add	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	2201      	movs	r2, #1
 8001386:	4977      	ldr	r1, [pc, #476]	; (8001564 <main+0x314>)
 8001388:	4878      	ldr	r0, [pc, #480]	; (800156c <main+0x31c>)
 800138a:	f006 fc96 	bl	8007cba <HAL_UART_Transmit>
				break;
 800138e:	e00f      	b.n	80013b0 <main+0x160>

				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <main+0x314>)
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	3380      	adds	r3, #128	; 0x80
 800139c:	443b      	add	r3, r7
 800139e:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	2201      	movs	r2, #1
 80013a8:	496e      	ldr	r1, [pc, #440]	; (8001564 <main+0x314>)
 80013aa:	4870      	ldr	r0, [pc, #448]	; (800156c <main+0x31c>)
 80013ac:	f006 fc85 	bl	8007cba <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80013b0:	4b73      	ldr	r3, [pc, #460]	; (8001580 <main+0x330>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80013b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d098      	beq.n	80012ee <main+0x9e>

			// Showing commands
			if(strcmp(argv[0],"help")==0){
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4973      	ldr	r1, [pc, #460]	; (800158c <main+0x33c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe ff2d 	bl	8000220 <strcmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10b      	bne.n	80013e4 <main+0x194>
				sprintf(uartTxBuffer,commandList);
 80013cc:	4970      	ldr	r1, [pc, #448]	; (8001590 <main+0x340>)
 80013ce:	4866      	ldr	r0, [pc, #408]	; (8001568 <main+0x318>)
 80013d0:	f009 f93a 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(commandList), HAL_MAX_DELAY);
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	22ac      	movs	r2, #172	; 0xac
 80013da:	4963      	ldr	r1, [pc, #396]	; (8001568 <main+0x318>)
 80013dc:	4863      	ldr	r0, [pc, #396]	; (800156c <main+0x31c>)
 80013de:	f006 fc6c 	bl	8007cba <HAL_UART_Transmit>
 80013e2:	e1a2      	b.n	800172a <main+0x4da>
			}
			// Showing pinouts
			else if(strcmp(argv[0],"pinout")==0){
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	496b      	ldr	r1, [pc, #428]	; (8001594 <main+0x344>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff19 	bl	8000220 <strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <main+0x1bc>
				sprintf(uartTxBuffer,pinList);
 80013f4:	4968      	ldr	r1, [pc, #416]	; (8001598 <main+0x348>)
 80013f6:	485c      	ldr	r0, [pc, #368]	; (8001568 <main+0x318>)
 80013f8:	f009 f926 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(pinList), HAL_MAX_DELAY);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	22ae      	movs	r2, #174	; 0xae
 8001402:	4959      	ldr	r1, [pc, #356]	; (8001568 <main+0x318>)
 8001404:	4859      	ldr	r0, [pc, #356]	; (800156c <main+0x31c>)
 8001406:	f006 fc58 	bl	8007cba <HAL_UART_Transmit>
 800140a:	e18e      	b.n	800172a <main+0x4da>
			}

			// Switching the LED on or off
			else if(strcmp(argv[0],"set")==0){
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4963      	ldr	r1, [pc, #396]	; (800159c <main+0x34c>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe ff05 	bl	8000220 <strcmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d12d      	bne.n	8001478 <main+0x228>
				if(strcmp(argv[1],"PA5")==0){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4960      	ldr	r1, [pc, #384]	; (80015a0 <main+0x350>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fefd 	bl	8000220 <strcmp>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11d      	bne.n	8001468 <main+0x218>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4618      	mov	r0, r3
 8001430:	f008 fc6a 	bl	8009d08 <atoi>
 8001434:	4603      	mov	r3, r0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	2120      	movs	r1, #32
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f003 f9de 	bl	8004800 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fc5e 	bl	8009d08 <atoi>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4954      	ldr	r1, [pc, #336]	; (80015a4 <main+0x354>)
 8001452:	4845      	ldr	r0, [pc, #276]	; (8001568 <main+0x318>)
 8001454:	f009 f8f8 	bl	800a648 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, CMD_BUFFER_SIZE, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	4942      	ldr	r1, [pc, #264]	; (8001568 <main+0x318>)
 8001460:	4842      	ldr	r0, [pc, #264]	; (800156c <main+0x31c>)
 8001462:	f006 fc2a 	bl	8007cba <HAL_UART_Transmit>
 8001466:	e160      	b.n	800172a <main+0x4da>
				}

				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	2214      	movs	r2, #20
 800146e:	494e      	ldr	r1, [pc, #312]	; (80015a8 <main+0x358>)
 8001470:	483e      	ldr	r0, [pc, #248]	; (800156c <main+0x31c>)
 8001472:	f006 fc22 	bl	8007cba <HAL_UART_Transmit>
 8001476:	e158      	b.n	800172a <main+0x4da>
				}
			}

			// Starting the motor
			else if(strcmp(argv[0],"start")==0)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	494c      	ldr	r1, [pc, #304]	; (80015ac <main+0x35c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fecf 	bl	8000220 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d13a      	bne.n	80014fe <main+0x2ae>
			{

				TIM1->CCR1 = MAX_SPEED_VALUE/2;
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <main+0x360>)
 800148a:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = MAX_SPEED_VALUE/2;
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <main+0x360>)
 8001492:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 8001496:	639a      	str	r2, [r3, #56]	; 0x38


				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2108      	movs	r1, #8
 800149c:	4830      	ldr	r0, [pc, #192]	; (8001560 <main+0x310>)
 800149e:	f003 f9af 	bl	8004800 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f000 fe5e 	bl	8002164 <HAL_Delay>
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2108      	movs	r1, #8
 80014ac:	482c      	ldr	r0, [pc, #176]	; (8001560 <main+0x310>)
 80014ae:	f003 f9a7 	bl	8004800 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2120      	movs	r1, #32
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f003 f9a1 	bl	8004800 <HAL_GPIO_WritePin>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014be:	2100      	movs	r1, #0
 80014c0:	483c      	ldr	r0, [pc, #240]	; (80015b4 <main+0x364>)
 80014c2:	f004 fb41 	bl	8005b48 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80014c6:	2100      	movs	r1, #0
 80014c8:	483a      	ldr	r0, [pc, #232]	; (80015b4 <main+0x364>)
 80014ca:	f006 f8d3 	bl	8007674 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014ce:	2104      	movs	r1, #4
 80014d0:	4838      	ldr	r0, [pc, #224]	; (80015b4 <main+0x364>)
 80014d2:	f004 fb39 	bl	8005b48 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80014d6:	2104      	movs	r1, #4
 80014d8:	4836      	ldr	r0, [pc, #216]	; (80015b4 <main+0x364>)
 80014da:	f006 f8cb 	bl	8007674 <HAL_TIMEx_PWMN_Start>

				sprintf(uartTxBuffer,"Power ON\r\n");
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <main+0x368>)
 80014e0:	4821      	ldr	r0, [pc, #132]	; (8001568 <main+0x318>)
 80014e2:	f009 f8b1 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80014e6:	4820      	ldr	r0, [pc, #128]	; (8001568 <main+0x318>)
 80014e8:	f7fe fea4 	bl	8000234 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <main+0x318>)
 80014f6:	481d      	ldr	r0, [pc, #116]	; (800156c <main+0x31c>)
 80014f8:	f006 fbdf 	bl	8007cba <HAL_UART_Transmit>
 80014fc:	e115      	b.n	800172a <main+0x4da>
			}


			// Stopping the motor
			else if(strcmp(argv[0],"stop")==0)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	492e      	ldr	r1, [pc, #184]	; (80015bc <main+0x36c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe fe8c 	bl	8000220 <strcmp>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d15a      	bne.n	80015c4 <main+0x374>
			{

				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800150e:	2100      	movs	r1, #0
 8001510:	4828      	ldr	r0, [pc, #160]	; (80015b4 <main+0x364>)
 8001512:	f004 fc2b 	bl	8005d6c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001516:	2100      	movs	r1, #0
 8001518:	4826      	ldr	r0, [pc, #152]	; (80015b4 <main+0x364>)
 800151a:	f006 f96d 	bl	80077f8 <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800151e:	2104      	movs	r1, #4
 8001520:	4824      	ldr	r0, [pc, #144]	; (80015b4 <main+0x364>)
 8001522:	f004 fc23 	bl	8005d6c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001526:	2104      	movs	r1, #4
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <main+0x364>)
 800152a:	f006 f965 	bl	80077f8 <HAL_TIMEx_PWMN_Stop>

				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f003 f963 	bl	8004800 <HAL_GPIO_WritePin>

				sprintf(uartTxBuffer,"Power OFF\r\n");
 800153a:	4921      	ldr	r1, [pc, #132]	; (80015c0 <main+0x370>)
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <main+0x318>)
 800153e:	f009 f883 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <main+0x318>)
 8001544:	f7fe fe76 	bl	8000234 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	4905      	ldr	r1, [pc, #20]	; (8001568 <main+0x318>)
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <main+0x31c>)
 8001554:	f006 fbb1 	bl	8007cba <HAL_UART_Transmit>
 8001558:	e0e7      	b.n	800172a <main+0x4da>
 800155a:	bf00      	nop
 800155c:	200005e4 	.word	0x200005e4
 8001560:	48000800 	.word	0x48000800
 8001564:	20000464 	.word	0x20000464
 8001568:	20000468 	.word	0x20000468
 800156c:	20000630 	.word	0x20000630
 8001570:	20000020 	.word	0x20000020
 8001574:	20000004 	.word	0x20000004
 8001578:	20000000 	.word	0x20000000
 800157c:	200003f4 	.word	0x200003f4
 8001580:	20000460 	.word	0x20000460
 8001584:	20000088 	.word	0x20000088
 8001588:	0800cd28 	.word	0x0800cd28
 800158c:	0800cd2c 	.word	0x0800cd2c
 8001590:	200000a0 	.word	0x200000a0
 8001594:	0800cd34 	.word	0x0800cd34
 8001598:	2000014c 	.word	0x2000014c
 800159c:	0800cd3c 	.word	0x0800cd3c
 80015a0:	0800cd40 	.word	0x0800cd40
 80015a4:	0800cd44 	.word	0x0800cd44
 80015a8:	2000008c 	.word	0x2000008c
 80015ac:	0800cd60 	.word	0x0800cd60
 80015b0:	40012c00 	.word	0x40012c00
 80015b4:	20000598 	.word	0x20000598
 80015b8:	0800cd68 	.word	0x0800cd68
 80015bc:	0800cd74 	.word	0x0800cd74
 80015c0:	0800cd7c 	.word	0x0800cd7c


			}

			// Setting the speed of the motor
			else if (strcmp(argv[0],"speed=")==0)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4960      	ldr	r1, [pc, #384]	; (8001748 <main+0x4f8>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fe29 	bl	8000220 <strcmp>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d139      	bne.n	8001648 <main+0x3f8>
			{
				speedValue = atoi(argv[1]);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 fb96 	bl	8009d08 <atoi>
 80015dc:	66f8      	str	r0, [r7, #108]	; 0x6c

				if (speedValue > 100)
 80015de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	dd01      	ble.n	80015e8 <main+0x398>
				{
					speedValue = 100;
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	66fb      	str	r3, [r7, #108]	; 0x6c
				}

				TIM1->CCR1 = MAX_SPEED_VALUE*speedValue/100;
 80015e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ea:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a56      	ldr	r2, [pc, #344]	; (800174c <main+0x4fc>)
 80015f4:	fb82 1203 	smull	r1, r2, r2, r3
 80015f8:	1152      	asrs	r2, r2, #5
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	1ad2      	subs	r2, r2, r3
 80015fe:	4b54      	ldr	r3, [pc, #336]	; (8001750 <main+0x500>)
 8001600:	635a      	str	r2, [r3, #52]	; 0x34

				TIM1->CCR2 = MAX_PULSE - MAX_SPEED_VALUE*speedValue/100;
 8001602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001604:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <main+0x4fc>)
 800160e:	fb82 1203 	smull	r1, r2, r2, r3
 8001612:	1152      	asrs	r2, r2, #5
 8001614:	17db      	asrs	r3, r3, #31
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	f503 52a6 	add.w	r2, r3, #5312	; 0x14c0
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <main+0x500>)
 800161e:	639a      	str	r2, [r3, #56]	; 0x38

				sprintf(uartTxBuffer,"Setting the speed to %d %\r\n",speedValue);
 8001620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001622:	494c      	ldr	r1, [pc, #304]	; (8001754 <main+0x504>)
 8001624:	484c      	ldr	r0, [pc, #304]	; (8001758 <main+0x508>)
 8001626:	f009 f80f 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 800162a:	484b      	ldr	r0, [pc, #300]	; (8001758 <main+0x508>)
 800162c:	f7fe fe02 	bl	8000234 <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	4947      	ldr	r1, [pc, #284]	; (8001758 <main+0x508>)
 800163a:	4848      	ldr	r0, [pc, #288]	; (800175c <main+0x50c>)
 800163c:	f006 fb3d 	bl	8007cba <HAL_UART_Transmit>

				ADCmeasuring = 0;
 8001640:	4b47      	ldr	r3, [pc, #284]	; (8001760 <main+0x510>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e070      	b.n	800172a <main+0x4da>

			}


			//Getting the current's value
			else if (strcmp(argv[0],"ADC?")==0)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4946      	ldr	r1, [pc, #280]	; (8001764 <main+0x514>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fde7 	bl	8000220 <strcmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d151      	bne.n	80016fc <main+0x4ac>
			{
				ADCmeasuring = 0;
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <main+0x510>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

				HAL_ADC_Start(&hadc1);
 800165e:	4842      	ldr	r0, [pc, #264]	; (8001768 <main+0x518>)
 8001660:	f001 f9a8 	bl	80029b4 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	483f      	ldr	r0, [pc, #252]	; (8001768 <main+0x518>)
 800166a:	f001 fa87 	bl	8002b7c <HAL_ADC_PollForConversion>
				float adcVal = HAL_ADC_GetValue(&hadc1);	//Getting the value of the ADC
 800166e:	483e      	ldr	r0, [pc, #248]	; (8001768 <main+0x518>)
 8001670:	f001 fce6 	bl	8003040 <HAL_ADC_GetValue>
 8001674:	ee07 0a90 	vmov	s15, r0
 8001678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

				//Converting the value
				float current = (((adcVal/4096)*3.3)-2.5)*12;
 8001680:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001684:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800176c <main+0x51c>
 8001688:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800168c:	ee16 0a90 	vmov	r0, s13
 8001690:	f7fe ff92 	bl	80005b8 <__aeabi_f2d>
 8001694:	a32a      	add	r3, pc, #168	; (adr r3, 8001740 <main+0x4f0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffe5 	bl	8000668 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <main+0x520>)
 80016ac:	f7fe fe24 	bl	80002f8 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <main+0x524>)
 80016be:	f7fe ffd3 	bl	8000668 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff faa5 	bl	8000c18 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	667b      	str	r3, [r7, #100]	; 0x64

				//Showing the value
				sprintf(uartTxBuffer,"ADC current value : %f %\r\n",current);
 80016d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016d4:	f7fe ff70 	bl	80005b8 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4926      	ldr	r1, [pc, #152]	; (8001778 <main+0x528>)
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <main+0x508>)
 80016e0:	f008 ffb2 	bl	800a648 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80016e4:	481c      	ldr	r0, [pc, #112]	; (8001758 <main+0x508>)
 80016e6:	f7fe fda5 	bl	8000234 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4919      	ldr	r1, [pc, #100]	; (8001758 <main+0x508>)
 80016f4:	4819      	ldr	r0, [pc, #100]	; (800175c <main+0x50c>)
 80016f6:	f006 fae0 	bl	8007cba <HAL_UART_Transmit>
 80016fa:	e016      	b.n	800172a <main+0x4da>

			}


			//Command not found
			else if(strcmp(argv[0],"get")==0)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	491f      	ldr	r1, [pc, #124]	; (800177c <main+0x52c>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fd8d 	bl	8000220 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <main+0x4cc>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2214      	movs	r2, #20
 8001712:	491b      	ldr	r1, [pc, #108]	; (8001780 <main+0x530>)
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <main+0x50c>)
 8001716:	f006 fad0 	bl	8007cba <HAL_UART_Transmit>
 800171a:	e006      	b.n	800172a <main+0x4da>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	2214      	movs	r2, #20
 8001722:	4917      	ldr	r1, [pc, #92]	; (8001780 <main+0x530>)
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <main+0x50c>)
 8001726:	f006 fac8 	bl	8007cba <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	221a      	movs	r2, #26
 8001730:	4914      	ldr	r1, [pc, #80]	; (8001784 <main+0x534>)
 8001732:	480a      	ldr	r0, [pc, #40]	; (800175c <main+0x50c>)
 8001734:	f006 fac1 	bl	8007cba <HAL_UART_Transmit>
			newCmdReady = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!ADCmeasuring){
 800173c:	e5d7      	b.n	80012ee <main+0x9e>
 800173e:	bf00      	nop
 8001740:	66666666 	.word	0x66666666
 8001744:	400a6666 	.word	0x400a6666
 8001748:	0800cd88 	.word	0x0800cd88
 800174c:	51eb851f 	.word	0x51eb851f
 8001750:	40012c00 	.word	0x40012c00
 8001754:	0800cd90 	.word	0x0800cd90
 8001758:	20000468 	.word	0x20000468
 800175c:	20000630 	.word	0x20000630
 8001760:	20000000 	.word	0x20000000
 8001764:	0800cdac 	.word	0x0800cdac
 8001768:	200003f4 	.word	0x200003f4
 800176c:	45800000 	.word	0x45800000
 8001770:	40040000 	.word	0x40040000
 8001774:	40280000 	.word	0x40280000
 8001778:	0800cdb4 	.word	0x0800cdb4
 800177c:	0800cdd0 	.word	0x0800cdd0
 8001780:	2000008c 	.word	0x2000008c
 8001784:	20000004 	.word	0x20000004

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	2238      	movs	r2, #56	; 0x38
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fae4 	bl	8009d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f003 f864 	bl	8004878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c2:	2302      	movs	r3, #2
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017ca:	2355      	movs	r3, #85	; 0x55
 80017cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f8fe 	bl	80049e0 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017ea:	f000 f82f 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ee:	230f      	movs	r3, #15
 80017f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f2:	2303      	movs	r3, #3
 80017f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2104      	movs	r1, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fc02 	bl	8005010 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001812:	f000 f81b 	bl	800184c <Error_Handler>
  }
}
 8001816:	bf00      	nop
 8001818:	3750      	adds	r7, #80	; 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_UART_RxCpltCallback+0x20>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800182e:	2201      	movs	r2, #1
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <HAL_UART_RxCpltCallback+0x24>)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_RxCpltCallback+0x28>)
 8001834:	f006 fad8 	bl	8007de8 <HAL_UART_Receive_IT>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000460 	.word	0x20000460
 8001844:	20000464 	.word	0x20000464
 8001848:	20000630 	.word	0x20000630

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6613      	str	r3, [r2, #96]	; 0x60
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6593      	str	r3, [r2, #88]	; 0x58
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x44>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800188e:	f003 f897 	bl	80049c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 fc1c 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <ADC1_2_IRQHandler+0x10>)
 80018fa:	f001 fbaf 	bl	800305c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200003f4 	.word	0x200003f4

08001908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM2_IRQHandler+0x10>)
 800190e:	f004 fc7b 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200005e4 	.word	0x200005e4

0800191c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <USART2_IRQHandler+0x10>)
 8001922:	f006 fab7 	bl	8007e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000630 	.word	0x20000630

08001930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	TIM1->CCR1 = MAX_SPEED_VALUE/2;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <EXTI15_10_IRQHandler+0x60>)
 8001936:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = MAX_SPEED_VALUE/2;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <EXTI15_10_IRQHandler+0x60>)
 800193e:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 8001942:	639a      	str	r2, [r3, #56]	; 0x38


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001944:	2100      	movs	r1, #0
 8001946:	4813      	ldr	r0, [pc, #76]	; (8001994 <EXTI15_10_IRQHandler+0x64>)
 8001948:	f004 f8fe 	bl	8005b48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800194c:	2100      	movs	r1, #0
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <EXTI15_10_IRQHandler+0x64>)
 8001950:	f005 fe90 	bl	8007674 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001954:	2104      	movs	r1, #4
 8001956:	480f      	ldr	r0, [pc, #60]	; (8001994 <EXTI15_10_IRQHandler+0x64>)
 8001958:	f004 f8f6 	bl	8005b48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800195c:	2104      	movs	r1, #4
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <EXTI15_10_IRQHandler+0x64>)
 8001960:	f005 fe88 	bl	8007674 <HAL_TIMEx_PWMN_Start>

	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2108      	movs	r1, #8
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <EXTI15_10_IRQHandler+0x68>)
 800196a:	f002 ff49 	bl	8004800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2108      	movs	r1, #8
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <EXTI15_10_IRQHandler+0x68>)
 8001974:	f002 ff44 	bl	8004800 <HAL_GPIO_WritePin>




	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2120      	movs	r1, #32
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f002 ff3e 	bl	8004800 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001988:	f002 ff52 	bl	8004830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40012c00 	.word	0x40012c00
 8001994:	20000598 	.word	0x20000598
 8001998:	48000800 	.word	0x48000800

0800199c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_kill>:

int _kill(int pid, int sig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019b6:	f008 f9ab 	bl	8009d10 <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2216      	movs	r2, #22
 80019be:	601a      	str	r2, [r3, #0]
	return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_exit>:

void _exit (int status)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffe7 	bl	80019ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80019de:	e7fe      	b.n	80019de <_exit+0x12>

080019e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e00a      	b.n	8001a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019f2:	f3af 8000 	nop.w
 80019f6:	4601      	mov	r1, r0
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	b2ca      	uxtb	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf0      	blt.n	80019f2 <_read+0x12>
	}

return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e009      	b.n	8001a40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf1      	blt.n	8001a2c <_write+0x12>
	}
	return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_close>:

int _close(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_isatty>:

int _isatty(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
	return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f008 f910 	bl	8009d10 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20020000 	.word	0x20020000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	20000594 	.word	0x20000594
 8001b24:	200006d8 	.word	0x200006d8

08001b28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09c      	sub	sp, #112	; 0x70
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2234      	movs	r2, #52	; 0x34
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f008 f8ec 	bl	8009d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001b8e:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <MX_TIM1_Init+0x178>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b92:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b98:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001ba0:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb8:	4841      	ldr	r0, [pc, #260]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001bba:	f003 fe93 	bl	80058e4 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f7ff fe42 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	483a      	ldr	r0, [pc, #232]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001bd6:	f004 fe47 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001be0:	f7ff fe34 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be4:	4836      	ldr	r0, [pc, #216]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001be6:	f003 ff4d 	bl	8005a84 <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bf0:	f7ff fe2c 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c04:	4619      	mov	r1, r3
 8001c06:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001c08:	f005 fe54 	bl	80078b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c12:	f7ff fe1b 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8001c1a:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4820      	ldr	r0, [pc, #128]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001c3e:	f004 fcff 	bl	8006640 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c48:	f7ff fe00 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c50:	2204      	movs	r2, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001c56:	f004 fcf3 	bl	8006640 <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001c60:	f7ff fdf4 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001c70:	23cb      	movs	r3, #203	; 0xcb
 8001c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001c98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001ca4:	f005 fe9c 	bl	80079e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8001cae:	f7ff fdcd 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM1_Init+0x174>)
 8001cb4:	f000 f8d8 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001cb8:	bf00      	nop
 8001cba:	3770      	adds	r7, #112	; 0x70
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000598 	.word	0x20000598
 8001cc4:	40012c00 	.word	0x40012c00

08001cc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d1c:	4822      	ldr	r0, [pc, #136]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d1e:	f003 fde1 	bl	80058e4 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d28:	f7ff fd90 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	4619      	mov	r1, r3
 8001d38:	481b      	ldr	r0, [pc, #108]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d3a:	f004 fd95 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d44:	f7ff fd82 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d48:	4817      	ldr	r0, [pc, #92]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d4a:	f004 f8ab 	bl	8005ea4 <HAL_TIM_IC_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d54:	f7ff fd7a 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENCODER_CLK;
 8001d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480f      	ldr	r0, [pc, #60]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d6a:	f005 fda3 	bl	80078b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001d74:	f7ff fd6a 	bl	800184c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <MX_TIM2_Init+0xe0>)
 8001d90:	f004 fbb9 	bl	8006506 <HAL_TIM_IC_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d9a:	f7ff fd57 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	3730      	adds	r7, #48	; 0x30
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200005e4 	.word	0x200005e4

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <HAL_TIM_Base_MspInit+0xb4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10c      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001de6:	e036      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d131      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_TIM_Base_MspInit+0xb8>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f002 fb5b 	bl	80044fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f002 fa61 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e50:	201c      	movs	r0, #28
 8001e52:	f002 fa78 	bl	8004346 <HAL_NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d11d      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001ea2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001ea6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec2:	f002 fb1b 	bl	80044fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ede:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <MX_USART2_UART_Init+0x94>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f22:	f005 fe7a 	bl	8007c1a <HAL_UART_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f7ff fc8e 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f34:	f007 fe1d 	bl	8009b72 <HAL_UARTEx_SetTxFifoThreshold>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f3e:	f7ff fc85 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4808      	ldr	r0, [pc, #32]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f46:	f007 fe52 	bl	8009bee <HAL_UARTEx_SetRxFifoThreshold>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f7ff fc7c 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f56:	f007 fdd3 	bl	8009b00 <HAL_UARTEx_DisableFifoMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f60:	f7ff fc74 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000630 	.word	0x20000630
 8001f6c:	40004400 	.word	0x40004400

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b09e      	sub	sp, #120	; 0x78
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	2254      	movs	r2, #84	; 0x54
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f007 fee7 	bl	8009d64 <memset>
  if(uartHandle->Instance==USART2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_UART_MspInit+0xb8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d13e      	bne.n	800201e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fa4b 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fb8:	f7ff fc48 	bl	800184c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_UART_MspInit+0xbc>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fec:	230c      	movs	r3, #12
 8001fee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002004:	4619      	mov	r1, r3
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f002 fa77 	bl	80044fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2026      	movs	r0, #38	; 0x26
 8002014:	f002 f97d 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002018:	2026      	movs	r0, #38	; 0x26
 800201a:	f002 f994 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800201e:	bf00      	nop
 8002020:	3778      	adds	r7, #120	; 0x78
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004400 	.word	0x40004400
 800202c:	40021000 	.word	0x40021000

08002030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800204c:	4c0b      	ldr	r4, [pc, #44]	; (800207c <LoopForever+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800205a:	f7ff fd65 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205e:	f007 fe5d 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002062:	f7ff f8f5 	bl	8001250 <main>

08002066 <LoopForever>:

LoopForever:
    b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   r0, =_estack
 8002068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 8002074:	0800d264 	.word	0x0800d264
  ldr r2, =_sbss
 8002078:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 800207c:	200006d4 	.word	0x200006d4

08002080 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC3_IRQHandler>

08002082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f002 f935 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f80e 	bl	80020b4 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	e001      	b.n	80020a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a4:	f7ff fbd8 	bl	8001858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020a8:	79fb      	ldrb	r3, [r7, #7]

}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_InitTick+0x68>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d022      	beq.n	800210e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_InitTick+0x6c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_InitTick+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f940 	bl	8004362 <HAL_SYSTICK_Config>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d809      	bhi.n	8002102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ee:	2200      	movs	r2, #0
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	f04f 30ff 	mov.w	r0, #4294967295
 80020f6:	f002 f90c 	bl	8004312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_InitTick+0x70>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e007      	b.n	8002112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e004      	b.n	8002112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000204 	.word	0x20000204
 8002120:	200001fc 	.word	0x200001fc
 8002124:	20000200 	.word	0x20000200

08002128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x1c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x20>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4413      	add	r3, r2
 8002136:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x1c>)
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	200006c0 	.word	0x200006c0
 8002148:	20000204 	.word	0x20000204

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200006c0 	.word	0x200006c0

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d004      	beq.n	8002188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_Delay+0x40>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002188:	bf00      	nop
 800218a:	f7ff ffdf 	bl	800214c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	429a      	cmp	r2, r3
 8002198:	d8f7      	bhi.n	800218a <HAL_Delay+0x26>
  {
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000204 	.word	0x20000204

080021a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <LL_ADC_SetOffset+0x44>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	03fff000 	.word	0x03fff000

08002258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3360      	adds	r3, #96	; 0x60
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	431a      	orrs	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3360      	adds	r3, #96	; 0x60
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	615a      	str	r2, [r3, #20]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3330      	adds	r3, #48	; 0x30
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	211f      	movs	r1, #31
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 011f 	and.w	r1, r3, #31
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3314      	adds	r3, #20
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0e5b      	lsrs	r3, r3, #25
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0d1b      	lsrs	r3, r3, #20
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2107      	movs	r1, #7
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	401a      	ands	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0d1b      	lsrs	r3, r3, #20
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	431a      	orrs	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10a      	bne.n	8002472 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	431a      	orrs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002470:	e00a      	b.n	8002488 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	407f0000 	.word	0x407f0000

08002498 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 031f 	and.w	r3, r3, #31
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6093      	str	r3, [r2, #8]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002508:	d101      	bne.n	800250e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002558:	d101      	bne.n	800255e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800257c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <LL_ADC_IsEnabled+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_IsEnabled+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d101      	bne.n	80025fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d101      	bne.n	8002620 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1af      	b.n	80029aa <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fd27 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff3f 	bl	80024f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff25 	bl	80024d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff5a 	bl	8002544 <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff3e 	bl	800251c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b9f      	ldr	r3, [pc, #636]	; (8002920 <HAL_ADC_Init+0x2f0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a9f      	ldr	r2, [pc, #636]	; (8002924 <HAL_ADC_Init+0x2f4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff3c 	bl	8002544 <LL_ADC_IsInternalRegulatorEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff75 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8148 	bne.w	8002998 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8144 	bne.w	8002998 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff35 	bl	8002594 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d141      	bne.n	80027b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d004      	beq.n	8002744 <HAL_ADC_Init+0x114>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7a      	ldr	r2, [pc, #488]	; (8002928 <HAL_ADC_Init+0x2f8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10f      	bne.n	8002764 <HAL_ADC_Init+0x134>
 8002744:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002748:	f7ff ff24 	bl	8002594 <LL_ADC_IsEnabled>
 800274c:	4604      	mov	r4, r0
 800274e:	4876      	ldr	r0, [pc, #472]	; (8002928 <HAL_ADC_Init+0x2f8>)
 8002750:	f7ff ff20 	bl	8002594 <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	4323      	orrs	r3, r4
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_ADC_Init+0x15a>
 8002764:	4871      	ldr	r0, [pc, #452]	; (800292c <HAL_ADC_Init+0x2fc>)
 8002766:	f7ff ff15 	bl	8002594 <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	4870      	ldr	r0, [pc, #448]	; (8002930 <HAL_ADC_Init+0x300>)
 800276e:	f7ff ff11 	bl	8002594 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	431c      	orrs	r4, r3
 8002776:	486f      	ldr	r0, [pc, #444]	; (8002934 <HAL_ADC_Init+0x304>)
 8002778:	f7ff ff0c 	bl	8002594 <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	4323      	orrs	r3, r4
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002796:	d004      	beq.n	80027a2 <HAL_ADC_Init+0x172>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a62      	ldr	r2, [pc, #392]	; (8002928 <HAL_ADC_Init+0x2f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Init+0x176>
 80027a2:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_ADC_Init+0x308>)
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_Init+0x178>
 80027a6:	4a65      	ldr	r2, [pc, #404]	; (800293c <HAL_ADC_Init+0x30c>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7ff fcfa 	bl	80021a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7f5b      	ldrb	r3, [r3, #29]
 80027b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	045b      	lsls	r3, r3, #17
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_ADC_Init+0x310>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	430b      	orrs	r3, r1
 800281e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fed1 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 8002840:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fede 	bl	8002608 <LL_ADC_INJ_IsConversionOngoing>
 800284c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d17f      	bne.n	8002954 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d17c      	bne.n	8002954 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800285e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002866:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002876:	f023 0302 	bic.w	r3, r3, #2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	430b      	orrs	r3, r1
 8002882:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800289a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6911      	ldr	r1, [r2, #16]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028ba:	e013      	b.n	80028e4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d12a      	bne.n	8002944 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002910:	430a      	orrs	r2, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	e019      	b.n	8002954 <HAL_ADC_Init+0x324>
 8002920:	200001fc 	.word	0x200001fc
 8002924:	053e2d63 	.word	0x053e2d63
 8002928:	50000100 	.word	0x50000100
 800292c:	50000400 	.word	0x50000400
 8002930:	50000500 	.word	0x50000500
 8002934:	50000600 	.word	0x50000600
 8002938:	50000300 	.word	0x50000300
 800293c:	50000700 	.word	0x50000700
 8002940:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10c      	bne.n	8002976 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f023 010f 	bic.w	r1, r3, #15
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
 8002974:	e007      	b.n	8002986 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 020f 	bic.w	r2, r2, #15
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c
 8002996:	e007      	b.n	80029a8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop

080029b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Start+0x1c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a67      	ldr	r2, [pc, #412]	; (8002b68 <HAL_ADC_Start+0x1b4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_Start+0x20>
 80029d0:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_ADC_Start+0x1b8>)
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_Start+0x22>
 80029d4:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_ADC_Start+0x1bc>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd5e 	bl	8002498 <LL_ADC_GetMultimode>
 80029dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fdfd 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80b4 	bne.w	8002b58 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Start+0x4a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0af      	b.n	8002b5e <HAL_ADC_Start+0x1aa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f9e6 	bl	8003dd8 <ADC_Enable>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 809b 	bne.w	8002b4e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4d      	ldr	r2, [pc, #308]	; (8002b68 <HAL_ADC_Start+0x1b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_ADC_Start+0x96>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <HAL_ADC_Start+0x1c0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d002      	beq.n	8002a46 <HAL_ADC_Start+0x92>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_Start+0x9a>
 8002a46:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_ADC_Start+0x1c4>)
 8002a48:	e001      	b.n	8002a4e <HAL_ADC_Start+0x9a>
 8002a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d002      	beq.n	8002a5c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	f023 0206 	bic.w	r2, r3, #6
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60
 8002a82:	e002      	b.n	8002a8a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	221c      	movs	r2, #28
 8002a90:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <HAL_ADC_Start+0x1b4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_ADC_Start+0x104>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a32      	ldr	r2, [pc, #200]	; (8002b74 <HAL_ADC_Start+0x1c0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d002      	beq.n	8002ab4 <HAL_ADC_Start+0x100>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_Start+0x108>
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_ADC_Start+0x1c4>)
 8002ab6:	e001      	b.n	8002abc <HAL_ADC_Start+0x108>
 8002ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d008      	beq.n	8002ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d002      	beq.n	8002ad6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d114      	bne.n	8002b00 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fd5e 	bl	80025ba <LL_ADC_REG_StartConversion>
 8002afe:	e02d      	b.n	8002b5c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_ADC_Start+0x1b4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_ADC_Start+0x176>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_ADC_Start+0x1c0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d002      	beq.n	8002b26 <HAL_ADC_Start+0x172>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_Start+0x17a>
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_ADC_Start+0x1c4>)
 8002b28:	e001      	b.n	8002b2e <HAL_ADC_Start+0x17a>
 8002b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b2e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b4c:	e006      	b.n	8002b5c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b56:	e001      	b.n	8002b5c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	50000100 	.word	0x50000100
 8002b6c:	50000300 	.word	0x50000300
 8002b70:	50000700 	.word	0x50000700
 8002b74:	50000500 	.word	0x50000500
 8002b78:	50000400 	.word	0x50000400

08002b7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_PollForConversion+0x1e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a77      	ldr	r2, [pc, #476]	; (8002d74 <HAL_ADC_PollForConversion+0x1f8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_PollForConversion+0x22>
 8002b9a:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <HAL_ADC_PollForConversion+0x1fc>)
 8002b9c:	e000      	b.n	8002ba0 <HAL_ADC_PollForConversion+0x24>
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_ADC_PollForConversion+0x200>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fc79 	bl	8002498 <LL_ADC_GetMultimode>
 8002ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d102      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e037      	b.n	8002c26 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d002      	beq.n	8002bc8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d111      	bne.n	8002bec <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0c1      	b.n	8002d6a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002be6:	2304      	movs	r3, #4
 8002be8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002bea:	e01c      	b.n	8002c26 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x84>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5e      	ldr	r2, [pc, #376]	; (8002d74 <HAL_ADC_PollForConversion+0x1f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_PollForConversion+0x88>
 8002c00:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_ADC_PollForConversion+0x1fc>)
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_PollForConversion+0x8a>
 8002c04:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_ADC_PollForConversion+0x200>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fc54 	bl	80024b4 <LL_ADC_GetMultiDMATransfer>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0a3      	b.n	8002d6a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c22:	2304      	movs	r3, #4
 8002c24:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c26:	f7ff fa91 	bl	800214c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c2c:	e021      	b.n	8002c72 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d01d      	beq.n	8002c72 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c36:	f7ff fa89 	bl	800214c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <HAL_ADC_PollForConversion+0xd0>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d112      	bne.n	8002c72 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e07b      	b.n	8002d6a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0d6      	beq.n	8002c2e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fb5b 	bl	800234c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7f5b      	ldrb	r3, [r3, #29]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d111      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_ADC_PollForConversion+0x1f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_ADC_PollForConversion+0x178>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_ADC_PollForConversion+0x204>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d002      	beq.n	8002cf0 <HAL_ADC_PollForConversion+0x174>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e003      	b.n	8002cf8 <HAL_ADC_PollForConversion+0x17c>
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_ADC_PollForConversion+0x208>)
 8002cf2:	e001      	b.n	8002cf8 <HAL_ADC_PollForConversion+0x17c>
 8002cf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d008      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d002      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	d104      	bne.n	8002d1c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e014      	b.n	8002d46 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_ADC_PollForConversion+0x1f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_ADC_PollForConversion+0x1be>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <HAL_ADC_PollForConversion+0x204>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d002      	beq.n	8002d36 <HAL_ADC_PollForConversion+0x1ba>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_PollForConversion+0x1c2>
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_ADC_PollForConversion+0x208>)
 8002d38:	e001      	b.n	8002d3e <HAL_ADC_PollForConversion+0x1c2>
 8002d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d104      	bne.n	8002d56 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e008      	b.n	8002d68 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	220c      	movs	r2, #12
 8002d66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	50000700 	.word	0x50000700
 8002d80:	50000500 	.word	0x50000500
 8002d84:	50000400 	.word	0x50000400

08002d88 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d98:	d004      	beq.n	8002da4 <HAL_ADC_Start_IT+0x1c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a93      	ldr	r2, [pc, #588]	; (8002fec <HAL_ADC_Start_IT+0x264>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_Start_IT+0x20>
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_ADC_Start_IT+0x268>)
 8002da6:	e000      	b.n	8002daa <HAL_ADC_Start_IT+0x22>
 8002da8:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_ADC_Start_IT+0x26c>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fb74 	bl	8002498 <LL_ADC_GetMultimode>
 8002db0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fc13 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8134 	bne.w	800302c <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Start_IT+0x4a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e131      	b.n	8003036 <HAL_ADC_Start_IT+0x2ae>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fffc 	bl	8003dd8 <ADC_Enable>
 8002de0:	4603      	mov	r3, r0
 8002de2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 811b 	bne.w	8003022 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a79      	ldr	r2, [pc, #484]	; (8002fec <HAL_ADC_Start_IT+0x264>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_ADC_Start_IT+0x96>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7a      	ldr	r2, [pc, #488]	; (8002ff8 <HAL_ADC_Start_IT+0x270>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d002      	beq.n	8002e1a <HAL_ADC_Start_IT+0x92>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e003      	b.n	8002e22 <HAL_ADC_Start_IT+0x9a>
 8002e1a:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <HAL_ADC_Start_IT+0x274>)
 8002e1c:	e001      	b.n	8002e22 <HAL_ADC_Start_IT+0x9a>
 8002e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d002      	beq.n	8002e30 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4c:	f023 0206 	bic.w	r2, r3, #6
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	221c      	movs	r2, #28
 8002e62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 021c 	bic.w	r2, r2, #28
 8002e7a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d108      	bne.n	8002e96 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	605a      	str	r2, [r3, #4]
          break;
 8002e94:	e008      	b.n	8002ea8 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0204 	orr.w	r2, r2, #4
 8002ea4:	605a      	str	r2, [r3, #4]
          break;
 8002ea6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0210 	orr.w	r2, r2, #16
 8002ebe:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_ADC_Start_IT+0x264>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_ADC_Start_IT+0x156>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4a      	ldr	r2, [pc, #296]	; (8002ff8 <HAL_ADC_Start_IT+0x270>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d002      	beq.n	8002eda <HAL_ADC_Start_IT+0x152>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e003      	b.n	8002ee2 <HAL_ADC_Start_IT+0x15a>
 8002eda:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <HAL_ADC_Start_IT+0x274>)
 8002edc:	e001      	b.n	8002ee2 <HAL_ADC_Start_IT+0x15a>
 8002ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d008      	beq.n	8002efc <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d002      	beq.n	8002efc <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d13b      	bne.n	8002f74 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02d      	beq.n	8002f66 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d110      	bne.n	8002f44 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0220 	bic.w	r2, r2, #32
 8002f30:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f40:	605a      	str	r2, [r3, #4]
              break;
 8002f42:	e011      	b.n	8002f68 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0220 	orr.w	r2, r2, #32
 8002f62:	605a      	str	r2, [r3, #4]
              break;
 8002f64:	e000      	b.n	8002f68 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8002f66:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fb24 	bl	80025ba <LL_ADC_REG_StartConversion>
 8002f72:	e05f      	b.n	8003034 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_ADC_Start_IT+0x264>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_ADC_Start_IT+0x216>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <HAL_ADC_Start_IT+0x270>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_Start_IT+0x212>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e003      	b.n	8002fa2 <HAL_ADC_Start_IT+0x21a>
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_ADC_Start_IT+0x274>)
 8002f9c:	e001      	b.n	8002fa2 <HAL_ADC_Start_IT+0x21a>
 8002f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fa2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d040      	beq.n	8003032 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d11b      	bne.n	8003000 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0220 	bic.w	r2, r2, #32
 8002fd6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe6:	605a      	str	r2, [r3, #4]
              break;
 8002fe8:	e024      	b.n	8003034 <HAL_ADC_Start_IT+0x2ac>
 8002fea:	bf00      	nop
 8002fec:	50000100 	.word	0x50000100
 8002ff0:	50000300 	.word	0x50000300
 8002ff4:	50000700 	.word	0x50000700
 8002ff8:	50000500 	.word	0x50000500
 8002ffc:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0220 	orr.w	r2, r2, #32
 800301e:	605a      	str	r2, [r3, #4]
              break;
 8003020:	e008      	b.n	8003034 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800302a:	e003      	b.n	8003034 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800302c:	2302      	movs	r3, #2
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e000      	b.n	8003034 <HAL_ADC_Start_IT+0x2ac>
        }
 8003032:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop

08003040 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003080:	d004      	beq.n	800308c <HAL_ADC_IRQHandler+0x30>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a8e      	ldr	r2, [pc, #568]	; (80032c0 <HAL_ADC_IRQHandler+0x264>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_ADC_IRQHandler+0x34>
 800308c:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_ADC_IRQHandler+0x268>)
 800308e:	e000      	b.n	8003092 <HAL_ADC_IRQHandler+0x36>
 8003090:	4b8d      	ldr	r3, [pc, #564]	; (80032c8 <HAL_ADC_IRQHandler+0x26c>)
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fa00 	bl	8002498 <LL_ADC_GetMultimode>
 8003098:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x78>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 ff36 	bl	8003f38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x8c>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8094 	beq.w	800321c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 808e 	beq.w	800321c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f915 	bl	800234c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d072      	beq.n	800320e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a64      	ldr	r2, [pc, #400]	; (80032c0 <HAL_ADC_IRQHandler+0x264>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_ADC_IRQHandler+0xea>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_ADC_IRQHandler+0x270>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d002      	beq.n	8003142 <HAL_ADC_IRQHandler+0xe6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	e003      	b.n	800314a <HAL_ADC_IRQHandler+0xee>
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_ADC_IRQHandler+0x274>)
 8003144:	e001      	b.n	800314a <HAL_ADC_IRQHandler+0xee>
 8003146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4293      	cmp	r3, r2
 8003150:	d008      	beq.n	8003164 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d002      	beq.n	8003164 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b09      	cmp	r3, #9
 8003162:	d104      	bne.n	800316e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	e014      	b.n	8003198 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a53      	ldr	r2, [pc, #332]	; (80032c0 <HAL_ADC_IRQHandler+0x264>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_ADC_IRQHandler+0x130>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a53      	ldr	r2, [pc, #332]	; (80032cc <HAL_ADC_IRQHandler+0x270>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d002      	beq.n	8003188 <HAL_ADC_IRQHandler+0x12c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e003      	b.n	8003190 <HAL_ADC_IRQHandler+0x134>
 8003188:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_ADC_IRQHandler+0x274>)
 800318a:	e001      	b.n	8003190 <HAL_ADC_IRQHandler+0x134>
 800318c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003190:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d135      	bne.n	800320e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d12e      	bne.n	800320e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fa14 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11a      	bne.n	80031f6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020c 	bic.w	r2, r2, #12
 80031ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031f4:	e00b      	b.n	800320e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f984 	bl	800351c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	220c      	movs	r2, #12
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_ADC_IRQHandler+0x1d4>
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80b3 	beq.w	80033a2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80ad 	beq.w	80033a2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f8b0 	bl	80023ca <LL_ADC_INJ_IsTriggerSourceSWStart>
 800326a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f86b 	bl	800234c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003276:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_ADC_IRQHandler+0x264>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_ADC_IRQHandler+0x23a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <HAL_ADC_IRQHandler+0x270>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d002      	beq.n	8003292 <HAL_ADC_IRQHandler+0x236>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	e003      	b.n	800329a <HAL_ADC_IRQHandler+0x23e>
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_ADC_IRQHandler+0x274>)
 8003294:	e001      	b.n	800329a <HAL_ADC_IRQHandler+0x23e>
 8003296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d008      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d002      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b07      	cmp	r3, #7
 80032b2:	d10f      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	e01f      	b.n	80032fe <HAL_ADC_IRQHandler+0x2a2>
 80032be:	bf00      	nop
 80032c0:	50000100 	.word	0x50000100
 80032c4:	50000300 	.word	0x50000300
 80032c8:	50000700 	.word	0x50000700
 80032cc:	50000500 	.word	0x50000500
 80032d0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a8b      	ldr	r2, [pc, #556]	; (8003508 <HAL_ADC_IRQHandler+0x4ac>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x296>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8a      	ldr	r2, [pc, #552]	; (800350c <HAL_ADC_IRQHandler+0x4b0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d002      	beq.n	80032ee <HAL_ADC_IRQHandler+0x292>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	e003      	b.n	80032f6 <HAL_ADC_IRQHandler+0x29a>
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_ADC_IRQHandler+0x4b4>)
 80032f0:	e001      	b.n	80032f6 <HAL_ADC_IRQHandler+0x29a>
 80032f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d047      	beq.n	8003394 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_ADC_IRQHandler+0x2c2>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03f      	beq.n	8003394 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d13a      	bne.n	8003394 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d133      	bne.n	8003394 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12e      	bne.n	8003394 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f964 	bl	8002608 <LL_ADC_INJ_IsConversionOngoing>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11a      	bne.n	800337c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003354:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	65da      	str	r2, [r3, #92]	; 0x5c
 800337a:	e00b      	b.n	8003394 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f043 0210 	orr.w	r2, r3, #16
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fda7 	bl	8003ee8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2260      	movs	r2, #96	; 0x60
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <HAL_ADC_IRQHandler+0x374>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8b4 	bl	8003530 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_ADC_IRQHandler+0x3a4>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd8d 	bl	8003f10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_ADC_IRQHandler+0x3d4>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fd7f 	bl	8003f24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d043      	beq.n	80034c2 <HAL_ADC_IRQHandler+0x466>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03e      	beq.n	80034c2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e021      	b.n	8003496 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d004      	beq.n	800346c <HAL_ADC_IRQHandler+0x410>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <HAL_ADC_IRQHandler+0x4ac>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_ADC_IRQHandler+0x414>
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <HAL_ADC_IRQHandler+0x4b8>)
 800346e:	e000      	b.n	8003472 <HAL_ADC_IRQHandler+0x416>
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_ADC_IRQHandler+0x4bc>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f81e 	bl	80024b4 <LL_ADC_GetMultiDMATransfer>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	e008      	b.n	8003496 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003492:	2301      	movs	r3, #1
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10e      	bne.n	80034ba <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	f043 0202 	orr.w	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f845 	bl	8003544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2210      	movs	r2, #16
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d018      	beq.n	80034fe <HAL_ADC_IRQHandler+0x4a2>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d013      	beq.n	80034fe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	f043 0208 	orr.w	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fcff 	bl	8003efc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	50000100 	.word	0x50000100
 800350c:	50000500 	.word	0x50000500
 8003510:	50000400 	.word	0x50000400
 8003514:	50000300 	.word	0x50000300
 8003518:	50000700 	.word	0x50000700

0800351c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0b6      	sub	sp, #216	; 0xd8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_ADC_ConfigChannel+0x24>
 8003576:	2302      	movs	r3, #2
 8003578:	f000 bc13 	b.w	8003da2 <HAL_ADC_ConfigChannel+0x84a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f82a 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 83f3 	bne.w	8003d7c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f7fe fee5 	bl	8002372 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f818 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80035b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f824 	bl	8002608 <LL_ADC_INJ_IsConversionOngoing>
 80035c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 81d9 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 81d4 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e0:	d10f      	bne.n	8003602 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fe feff 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fe93 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>
 8003600:	e00e      	b.n	8003620 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	461a      	mov	r2, r3
 8003610:	f7fe feee 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fe83 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d022      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6919      	ldr	r1, [r3, #16]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003652:	f7fe fddd 	bl	8002210 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6919      	ldr	r1, [r3, #16]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	461a      	mov	r2, r3
 8003664:	f7fe fe29 	bl	80022ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6919      	ldr	r1, [r3, #16]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	7f1b      	ldrb	r3, [r3, #28]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_ADC_ConfigChannel+0x126>
 8003678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367c:	e000      	b.n	8003680 <HAL_ADC_ConfigChannel+0x128>
 800367e:	2300      	movs	r3, #0
 8003680:	461a      	mov	r2, r3
 8003682:	f7fe fe35 	bl	80022f0 <LL_ADC_SetOffsetSaturation>
 8003686:	e17b      	b.n	8003980 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fde2 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x15c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fdd7 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	e01e      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x19a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fdcc 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e004      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80036e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_ADC_ConfigChannel+0x1b2>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	e018      	b.n	800373c <HAL_ADC_ConfigChannel+0x1e4>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800371e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003726:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fd9b 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fd7f 	bl	8002258 <LL_ADC_GetOffsetChannel>
 800375a:	4603      	mov	r3, r0
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_ADC_ConfigChannel+0x222>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fd74 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	e01e      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x260>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fd69 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003798:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e004      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x278>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	e018      	b.n	8003802 <HAL_ADC_ConfigChannel+0x2aa>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e004      	b.n	8003802 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80037f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fd38 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fd1c 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2e8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fd11 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 021f 	and.w	r2, r3, #31
 800383e:	e01e      	b.n	800387e <HAL_ADC_ConfigChannel+0x326>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fd06 	bl	8002258 <LL_ADC_GetOffsetChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800385e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x33e>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	e016      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x36c>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e004      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d106      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2102      	movs	r1, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fcd7 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2103      	movs	r1, #3
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fcbb 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x3aa>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2103      	movs	r1, #3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fcb0 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80038f8:	4603      	mov	r3, r0
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	e017      	b.n	8003932 <HAL_ADC_ConfigChannel+0x3da>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2103      	movs	r1, #3
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fca5 	bl	8002258 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800391a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800391e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_ADC_ConfigChannel+0x3f2>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0e9b      	lsrs	r3, r3, #26
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	e011      	b.n	800396e <HAL_ADC_ConfigChannel+0x416>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	2103      	movs	r1, #3
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fc82 	bl	8002284 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fe05 	bl	8002594 <LL_ADC_IsEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	f040 813d 	bne.w	8003c0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f7fe fd52 	bl	8002448 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4aa2      	ldr	r2, [pc, #648]	; (8003c34 <HAL_ADC_ConfigChannel+0x6dc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	f040 812e 	bne.w	8003c0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x480>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	3301      	adds	r3, #1
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e019      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x4b4>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e003      	b.n	80039fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80039f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	bf94      	ite	ls
 8003a06:	2301      	movls	r3, #1
 8003a08:	2300      	movhi	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d079      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x4d4>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	3301      	adds	r3, #1
 8003a24:	069b      	lsls	r3, r3, #26
 8003a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a2a:	e015      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x500>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e003      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	069b      	lsls	r3, r3, #26
 8003a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x520>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	e017      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x550>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	ea42 0103 	orr.w	r1, r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x576>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	051b      	lsls	r3, r3, #20
 8003acc:	e018      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x5a8>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e003      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b00:	430b      	orrs	r3, r1
 8003b02:	e07e      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x5c8>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	069b      	lsls	r3, r3, #26
 8003b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b1e:	e015      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x5f4>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b38:	2320      	movs	r3, #32
 8003b3a:	e003      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	069b      	lsls	r3, r3, #26
 8003b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x614>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	0e9b      	lsrs	r3, r3, #26
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	e017      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x644>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	61fb      	str	r3, [r7, #28]
  return result;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10d      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x670>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0e9b      	lsrs	r3, r3, #26
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3b1e      	subs	r3, #30
 8003bc0:	051b      	lsls	r3, r3, #20
 8003bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	e01b      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x6a8>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	613b      	str	r3, [r7, #16]
  return result;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003be0:	2320      	movs	r3, #32
 8003be2:	e003      	b.n	8003bec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b1e      	subs	r3, #30
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c00:	430b      	orrs	r3, r1
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7fe fbf2 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80be 	beq.w	8003d96 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c22:	d004      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x6d6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <HAL_ADC_ConfigChannel+0x6e4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10a      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x6ec>
 8003c2e:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c30:	e009      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x6ee>
 8003c32:	bf00      	nop
 8003c34:	407f0000 	.word	0x407f0000
 8003c38:	80080000 	.word	0x80080000
 8003c3c:	50000100 	.word	0x50000100
 8003c40:	50000300 	.word	0x50000300
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_ADC_ConfigChannel+0x854>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fad4 	bl	80021f4 <LL_ADC_GetCommonPathInternalCh>
 8003c4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <HAL_ADC_ConfigChannel+0x858>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0x70c>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a55      	ldr	r2, [pc, #340]	; (8003db4 <HAL_ADC_ConfigChannel+0x85c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d13a      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d134      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c78:	d005      	beq.n	8003c86 <HAL_ADC_ConfigChannel+0x72e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <HAL_ADC_ConfigChannel+0x860>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f040 8085 	bne.w	8003d90 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x742>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a49      	ldr	r2, [pc, #292]	; (8003dbc <HAL_ADC_ConfigChannel+0x864>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x746>
 8003c9a:	4a49      	ldr	r2, [pc, #292]	; (8003dc0 <HAL_ADC_ConfigChannel+0x868>)
 8003c9c:	e000      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x748>
 8003c9e:	4a43      	ldr	r2, [pc, #268]	; (8003dac <HAL_ADC_ConfigChannel+0x854>)
 8003ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f7fe fa8f 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cb0:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_ADC_ConfigChannel+0x86c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <HAL_ADC_ConfigChannel+0x870>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cca:	e002      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd8:	e05a      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_ADC_ConfigChannel+0x874>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d125      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x7d8>
 8003ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11f      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <HAL_ADC_ConfigChannel+0x864>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d104      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x7ac>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <HAL_ADC_ConfigChannel+0x878>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d047      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0c:	d004      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x7c0>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2a      	ldr	r2, [pc, #168]	; (8003dbc <HAL_ADC_ConfigChannel+0x864>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x7c4>
 8003d18:	4a29      	ldr	r2, [pc, #164]	; (8003dc0 <HAL_ADC_ConfigChannel+0x868>)
 8003d1a:	e000      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x7c6>
 8003d1c:	4a23      	ldr	r2, [pc, #140]	; (8003dac <HAL_ADC_ConfigChannel+0x854>)
 8003d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f7fe fa50 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d2e:	e031      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <HAL_ADC_ConfigChannel+0x87c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d12d      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d127      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_ADC_ConfigChannel+0x864>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d58:	d004      	beq.n	8003d64 <HAL_ADC_ConfigChannel+0x80c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_ADC_ConfigChannel+0x864>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x810>
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_ADC_ConfigChannel+0x868>)
 8003d66:	e000      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x812>
 8003d68:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_ADC_ConfigChannel+0x854>)
 8003d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f7fe fa2a 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
 8003d7a:	e00c      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d8e:	e002      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	37d8      	adds	r7, #216	; 0xd8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	50000700 	.word	0x50000700
 8003db0:	c3210000 	.word	0xc3210000
 8003db4:	90c00010 	.word	0x90c00010
 8003db8:	50000600 	.word	0x50000600
 8003dbc:	50000100 	.word	0x50000100
 8003dc0:	50000300 	.word	0x50000300
 8003dc4:	200001fc 	.word	0x200001fc
 8003dc8:	053e2d63 	.word	0x053e2d63
 8003dcc:	c7520000 	.word	0xc7520000
 8003dd0:	50000500 	.word	0x50000500
 8003dd4:	cb840000 	.word	0xcb840000

08003dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fbd5 	bl	8002594 <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d14d      	bne.n	8003e8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <ADC_Enable+0xc0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e039      	b.n	8003e8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fba4 	bl	800256c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e24:	f7fe f992 	bl	800214c <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e2a:	e028      	b.n	8003e7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fbaf 	bl	8002594 <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fb93 	bl	800256c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e46:	f7fe f981 	bl	800214c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d914      	bls.n	8003e7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00d      	beq.n	8003e7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d1cf      	bne.n	8003e2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	8000003f 	.word	0x8000003f

08003e9c <LL_ADC_IsEnabled>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_IsEnabled+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_IsEnabled+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b0a1      	sub	sp, #132	; 0x84
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0e7      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f72:	2300      	movs	r3, #0
 8003f74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f76:	2300      	movs	r3, #0
 8003f78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f82:	d102      	bne.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e009      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6e      	ldr	r2, [pc, #440]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003f94:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e001      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0be      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ff7f 	bl	8003ec2 <LL_ADC_REG_IsConversionOngoing>
 8003fc4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff79 	bl	8003ec2 <LL_ADC_REG_IsConversionOngoing>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80a0 	bne.w	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 809c 	bne.w	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a55      	ldr	r2, [pc, #340]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ff4:	4b56      	ldr	r3, [pc, #344]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ff6:	e000      	b.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ff8:	4b56      	ldr	r3, [pc, #344]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ffa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d04b      	beq.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004016:	035b      	lsls	r3, r3, #13
 8004018:	430b      	orrs	r3, r1
 800401a:	431a      	orrs	r2, r3
 800401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004028:	d004      	beq.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a45      	ldr	r2, [pc, #276]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10f      	bne.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004034:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004038:	f7ff ff30 	bl	8003e9c <LL_ADC_IsEnabled>
 800403c:	4604      	mov	r4, r0
 800403e:	4841      	ldr	r0, [pc, #260]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004040:	f7ff ff2c 	bl	8003e9c <LL_ADC_IsEnabled>
 8004044:	4603      	mov	r3, r0
 8004046:	4323      	orrs	r3, r4
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e012      	b.n	800407a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004054:	483c      	ldr	r0, [pc, #240]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004056:	f7ff ff21 	bl	8003e9c <LL_ADC_IsEnabled>
 800405a:	4604      	mov	r4, r0
 800405c:	483b      	ldr	r0, [pc, #236]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800405e:	f7ff ff1d 	bl	8003e9c <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	431c      	orrs	r4, r3
 8004066:	483c      	ldr	r0, [pc, #240]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004068:	f7ff ff18 	bl	8003e9c <LL_ADC_IsEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	4323      	orrs	r3, r4
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d056      	beq.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800407e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004086:	f023 030f 	bic.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	430a      	orrs	r2, r1
 8004094:	431a      	orrs	r2, r3
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800409a:	e047      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b0:	d004      	beq.n	80040bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a23      	ldr	r2, [pc, #140]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10f      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040c0:	f7ff feec 	bl	8003e9c <LL_ADC_IsEnabled>
 80040c4:	4604      	mov	r4, r0
 80040c6:	481f      	ldr	r0, [pc, #124]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040c8:	f7ff fee8 	bl	8003e9c <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4323      	orrs	r3, r4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e012      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80040dc:	481a      	ldr	r0, [pc, #104]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040de:	f7ff fedd 	bl	8003e9c <LL_ADC_IsEnabled>
 80040e2:	4604      	mov	r4, r0
 80040e4:	4819      	ldr	r0, [pc, #100]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040e6:	f7ff fed9 	bl	8003e9c <LL_ADC_IsEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	431c      	orrs	r4, r3
 80040ee:	481a      	ldr	r0, [pc, #104]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80040f0:	f7ff fed4 	bl	8003e9c <LL_ADC_IsEnabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4323      	orrs	r3, r4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800410e:	f023 030f 	bic.w	r3, r3, #15
 8004112:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004114:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004116:	e009      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800412a:	e000      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004136:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800413a:	4618      	mov	r0, r3
 800413c:	3784      	adds	r7, #132	; 0x84
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	bf00      	nop
 8004144:	50000100 	.word	0x50000100
 8004148:	50000400 	.word	0x50000400
 800414c:	50000500 	.word	0x50000500
 8004150:	50000300 	.word	0x50000300
 8004154:	50000700 	.word	0x50000700
 8004158:	50000600 	.word	0x50000600

0800415c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418e:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <__NVIC_GetPriorityGrouping+0x18>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 0307 	and.w	r3, r3, #7
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db0b      	blt.n	80041ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4907      	ldr	r1, [pc, #28]	; (80041f8 <__NVIC_EnableIRQ+0x38>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2001      	movs	r0, #1
 80041e2:	fa00 f202 	lsl.w	r2, r0, r2
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db0a      	blt.n	8004226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	490c      	ldr	r1, [pc, #48]	; (8004248 <__NVIC_SetPriority+0x4c>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	440b      	add	r3, r1
 8004220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004224:	e00a      	b.n	800423c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4908      	ldr	r1, [pc, #32]	; (800424c <__NVIC_SetPriority+0x50>)
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3b04      	subs	r3, #4
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	440b      	add	r3, r1
 800423a:	761a      	strb	r2, [r3, #24]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000e100 	.word	0xe000e100
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f1c3 0307 	rsb	r3, r3, #7
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf28      	it	cs
 800426e:	2304      	movcs	r3, #4
 8004270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3304      	adds	r3, #4
 8004276:	2b06      	cmp	r3, #6
 8004278:	d902      	bls.n	8004280 <NVIC_EncodePriority+0x30>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3b03      	subs	r3, #3
 800427e:	e000      	b.n	8004282 <NVIC_EncodePriority+0x32>
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	401a      	ands	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004298:	f04f 31ff 	mov.w	r1, #4294967295
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	4313      	orrs	r3, r2
         );
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	; 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c8:	d301      	bcc.n	80042ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00f      	b.n	80042ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <SysTick_Config+0x40>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042d6:	210f      	movs	r1, #15
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	f7ff ff8e 	bl	80041fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <SysTick_Config+0x40>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <SysTick_Config+0x40>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000e010 	.word	0xe000e010

080042fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff29 	bl	800415c <__NVIC_SetPriorityGrouping>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004320:	f7ff ff40 	bl	80041a4 <__NVIC_GetPriorityGrouping>
 8004324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f7ff ff90 	bl	8004250 <NVIC_EncodePriority>
 8004330:	4602      	mov	r2, r0
 8004332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff5f 	bl	80041fc <__NVIC_SetPriority>
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff33 	bl	80041c0 <__NVIC_EnableIRQ>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ffa4 	bl	80042b8 <SysTick_Config>
 8004370:	4603      	mov	r3, r0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d005      	beq.n	800439e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e037      	b.n	800440e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 020e 	bic.w	r2, r2, #14
 80043ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f003 021f 	and.w	r2, r3, #31
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004402:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800440c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d00d      	beq.n	8004460 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e047      	b.n	80044f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 020e 	bic.w	r2, r2, #14
 800446e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
    }
  }
  return status;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800450a:	e15a      	b.n	80047c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	fa01 f303 	lsl.w	r3, r1, r3
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 814c 	beq.w	80047bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d005      	beq.n	800453c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004538:	2b02      	cmp	r3, #2
 800453a:	d130      	bne.n	800459e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004572:	2201      	movs	r2, #1
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 0201 	and.w	r2, r3, #1
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d017      	beq.n	80045da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d123      	bne.n	800462e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	08da      	lsrs	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3208      	adds	r2, #8
 80045ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	220f      	movs	r2, #15
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	08da      	lsrs	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3208      	adds	r2, #8
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0203 	and.w	r2, r3, #3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a6 	beq.w	80047bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004670:	4b5b      	ldr	r3, [pc, #364]	; (80047e0 <HAL_GPIO_Init+0x2e4>)
 8004672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004674:	4a5a      	ldr	r2, [pc, #360]	; (80047e0 <HAL_GPIO_Init+0x2e4>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6613      	str	r3, [r2, #96]	; 0x60
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <HAL_GPIO_Init+0x2e4>)
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004688:	4a56      	ldr	r2, [pc, #344]	; (80047e4 <HAL_GPIO_Init+0x2e8>)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	3302      	adds	r3, #2
 8004690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	220f      	movs	r2, #15
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046b2:	d01f      	beq.n	80046f4 <HAL_GPIO_Init+0x1f8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <HAL_GPIO_Init+0x2ec>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d019      	beq.n	80046f0 <HAL_GPIO_Init+0x1f4>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_GPIO_Init+0x2f0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_GPIO_Init+0x1f0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_GPIO_Init+0x2f4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00d      	beq.n	80046e8 <HAL_GPIO_Init+0x1ec>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <HAL_GPIO_Init+0x2f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <HAL_GPIO_Init+0x1e8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a48      	ldr	r2, [pc, #288]	; (80047f8 <HAL_GPIO_Init+0x2fc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_GPIO_Init+0x1e4>
 80046dc:	2305      	movs	r3, #5
 80046de:	e00a      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046e0:	2306      	movs	r3, #6
 80046e2:	e008      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046e4:	2304      	movs	r3, #4
 80046e6:	e006      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046e8:	2303      	movs	r3, #3
 80046ea:	e004      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e002      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_GPIO_Init+0x1fa>
 80046f4:	2300      	movs	r3, #0
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	f002 0203 	and.w	r2, r2, #3
 80046fc:	0092      	lsls	r2, r2, #2
 80046fe:	4093      	lsls	r3, r2
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004706:	4937      	ldr	r1, [pc, #220]	; (80047e4 <HAL_GPIO_Init+0x2e8>)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	3302      	adds	r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004714:	4b39      	ldr	r3, [pc, #228]	; (80047fc <HAL_GPIO_Init+0x300>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004738:	4a30      	ldr	r2, [pc, #192]	; (80047fc <HAL_GPIO_Init+0x300>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_GPIO_Init+0x300>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <HAL_GPIO_Init+0x300>)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_GPIO_Init+0x300>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43db      	mvns	r3, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_GPIO_Init+0x300>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_GPIO_Init+0x300>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43db      	mvns	r3, r3
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <HAL_GPIO_Init+0x300>)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3301      	adds	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f ae9d 	bne.w	800450c <HAL_GPIO_Init+0x10>
  }
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40010000 	.word	0x40010000
 80047e8:	48000400 	.word	0x48000400
 80047ec:	48000800 	.word	0x48000800
 80047f0:	48000c00 	.word	0x48000c00
 80047f4:	48001000 	.word	0x48001000
 80047f8:	48001400 	.word	0x48001400
 80047fc:	40010400 	.word	0x40010400

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800481c:	e002      	b.n	8004824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004846:	4a05      	ldr	r2, [pc, #20]	; (800485c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f806 	bl	8004860 <HAL_GPIO_EXTI_Callback>
  }
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40010400 	.word	0x40010400

08004860 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d141      	bne.n	800490a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004886:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004892:	d131      	bne.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004894:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489a:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ac:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b4:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2232      	movs	r2, #50	; 0x32
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	4a3f      	ldr	r2, [pc, #252]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	0c9b      	lsrs	r3, r3, #18
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ca:	e002      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d2:	4b38      	ldr	r3, [pc, #224]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	d102      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f2      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e6:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d158      	bne.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e057      	b.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f8:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fe:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004908:	e04d      	b.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004910:	d141      	bne.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004912:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	d131      	bne.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004938:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2232      	movs	r2, #50	; 0x32
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	0c9b      	lsrs	r3, r3, #18
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004956:	e002      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3b01      	subs	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496a:	d102      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f2      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d112      	bne.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e011      	b.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004994:	e007      	b.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40007000 	.word	0x40007000
 80049b8:	200001fc 	.word	0x200001fc
 80049bc:	431bde83 	.word	0x431bde83

080049c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ce:	6093      	str	r3, [r2, #8]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40007000 	.word	0x40007000

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e306      	b.n	8005000 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b97      	ldr	r3, [pc, #604]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a08:	4b94      	ldr	r3, [pc, #592]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d102      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3e>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_OscConfig+0x44>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b8d      	ldr	r3, [pc, #564]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e2e1      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_OscConfig+0x74>
 8004a46:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a84      	ldr	r2, [pc, #528]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x98>
 8004a5e:	4b7f      	ldr	r3, [pc, #508]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7e      	ldr	r2, [pc, #504]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b7c      	ldr	r3, [pc, #496]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7b      	ldr	r2, [pc, #492]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a78:	4b78      	ldr	r3, [pc, #480]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a77      	ldr	r2, [pc, #476]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b75      	ldr	r3, [pc, #468]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a74      	ldr	r2, [pc, #464]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd fb58 	bl	800214c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fb54 	bl	800214c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e2a6      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab2:	4b6a      	ldr	r3, [pc, #424]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fb44 	bl	800214c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fb40 	bl	800214c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e292      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ada:	4b60      	ldr	r3, [pc, #384]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d075      	beq.n	8004be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af6:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b00:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d102      	bne.n	8004b16 <HAL_RCC_OscConfig+0x136>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_OscConfig+0x13c>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d11f      	bne.n	8004b5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1c:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_OscConfig+0x154>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e265      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b34:	4b49      	ldr	r3, [pc, #292]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	4946      	ldr	r1, [pc, #280]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b48:	4b45      	ldr	r3, [pc, #276]	; (8004c60 <HAL_RCC_OscConfig+0x280>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fd fab1 	bl	80020b4 <HAL_InitTick>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d043      	beq.n	8004be0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e251      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b64:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd faec 	bl	800214c <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fd fae8 	bl	800214c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e23a      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8a:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	492d      	ldr	r1, [pc, #180]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	604b      	str	r3, [r1, #4]
 8004baa:	e01a      	b.n	8004be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2a      	ldr	r2, [pc, #168]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fac8 	bl	800214c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fac4 	bl	800214c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e216      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1e0>
 8004bde:	e000      	b.n	8004be2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d041      	beq.n	8004c72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf6:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfc:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fd faa1 	bl	800214c <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fa9d 	bl	800214c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e1ef      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <HAL_RCC_OscConfig+0x22e>
 8004c2e:	e020      	b.n	8004c72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_OscConfig+0x27c>)
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fd fa84 	bl	800214c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c46:	e00d      	b.n	8004c64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fd fa80 	bl	800214c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d906      	bls.n	8004c64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1d2      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	20000200 	.word	0x20000200
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c64:	4b8c      	ldr	r3, [pc, #560]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ea      	bne.n	8004c48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80a6 	beq.w	8004dcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c80:	2300      	movs	r3, #0
 8004c82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c84:	4b84      	ldr	r3, [pc, #528]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_OscConfig+0x2b4>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca6:	4b7c      	ldr	r3, [pc, #496]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb6:	4b79      	ldr	r3, [pc, #484]	; (8004e9c <HAL_RCC_OscConfig+0x4bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x4bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x4bc>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fd fa3d 	bl	800214c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fd fa39 	bl	800214c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e18b      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x4bc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <HAL_RCC_OscConfig+0x32e>
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	4a65      	ldr	r2, [pc, #404]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0c:	e024      	b.n	8004d58 <HAL_RCC_OscConfig+0x378>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d110      	bne.n	8004d38 <HAL_RCC_OscConfig+0x358>
 8004d16:	4b60      	ldr	r3, [pc, #384]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d26:	4b5c      	ldr	r3, [pc, #368]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	4a5a      	ldr	r2, [pc, #360]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d36:	e00f      	b.n	8004d58 <HAL_RCC_OscConfig+0x378>
 8004d38:	4b57      	ldr	r3, [pc, #348]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a56      	ldr	r2, [pc, #344]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a52      	ldr	r2, [pc, #328]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fd f9f4 	bl	800214c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd f9f0 	bl	800214c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e140      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7e:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ed      	beq.n	8004d68 <HAL_RCC_OscConfig+0x388>
 8004d8c:	e015      	b.n	8004dba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd f9dd 	bl	800214c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd f9d9 	bl	800214c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e129      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dac:	4b3a      	ldr	r3, [pc, #232]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ed      	bne.n	8004d96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b35      	ldr	r3, [pc, #212]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	4a34      	ldr	r2, [pc, #208]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de6:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fd f9ac 	bl	800214c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df8:	f7fd f9a8 	bl	800214c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e0fa      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0a:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ef      	beq.n	8004df8 <HAL_RCC_OscConfig+0x418>
 8004e18:	e01b      	b.n	8004e52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fd f98f 	bl	800214c <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e32:	f7fd f98b 	bl	800214c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0dd      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ef      	bne.n	8004e32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80d1 	beq.w	8004ffe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	f000 808b 	beq.w	8004f80 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d15e      	bne.n	8004f30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <HAL_RCC_OscConfig+0x4b8>)
 8004e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd f965 	bl	800214c <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e84:	e00c      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fd f961 	bl	800214c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d905      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0b3      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ec      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eac:	4b56      	ldr	r3, [pc, #344]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b56      	ldr	r3, [pc, #344]	; (800500c <HAL_RCC_OscConfig+0x62c>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6a11      	ldr	r1, [r2, #32]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ec6:	0212      	lsls	r2, r2, #8
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0552      	lsls	r2, r2, #21
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eda:	0852      	lsrs	r2, r2, #1
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0652      	lsls	r2, r2, #25
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ee6:	06d2      	lsls	r2, r2, #27
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	4947      	ldr	r1, [pc, #284]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b45      	ldr	r3, [pc, #276]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a44      	ldr	r2, [pc, #272]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004efc:	4b42      	ldr	r3, [pc, #264]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a41      	ldr	r2, [pc, #260]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd f920 	bl	800214c <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fd f91c 	bl	800214c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e06e      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	4b39      	ldr	r3, [pc, #228]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x530>
 8004f2e:	e066      	b.n	8004ffe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b35      	ldr	r3, [pc, #212]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a34      	ldr	r2, [pc, #208]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f48:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd f8f8 	bl	800214c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fd f8f4 	bl	800214c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e046      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x580>
 8004f7e:	e03e      	b.n	8004ffe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e039      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <HAL_RCC_OscConfig+0x628>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d12c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	3b01      	subs	r3, #1
 8004fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d123      	bne.n	8004ffa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11b      	bne.n	8004ffa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d113      	bne.n	8004ffa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	019f800c 	.word	0x019f800c

08005010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e11e      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b91      	ldr	r3, [pc, #580]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d910      	bls.n	8005058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b8e      	ldr	r3, [pc, #568]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 020f 	bic.w	r2, r3, #15
 800503e:	498c      	ldr	r1, [pc, #560]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b8a      	ldr	r3, [pc, #552]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e106      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d073      	beq.n	800514c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d129      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506c:	4b81      	ldr	r3, [pc, #516]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0f4      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800507c:	f000 f99e 	bl	80053bc <RCC_GetSysClockFreqFromPLLSource>
 8005080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4a7c      	ldr	r2, [pc, #496]	; (8005278 <HAL_RCC_ClockConfig+0x268>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d93f      	bls.n	800510a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800508a:	4b7a      	ldr	r3, [pc, #488]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d033      	beq.n	800510a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d12f      	bne.n	800510a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050aa:	4b72      	ldr	r3, [pc, #456]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b2:	4a70      	ldr	r2, [pc, #448]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e024      	b.n	800510a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c8:	4b6a      	ldr	r3, [pc, #424]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0c6      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d8:	4b66      	ldr	r3, [pc, #408]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0be      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050e8:	f000 f8ce 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4a61      	ldr	r2, [pc, #388]	; (8005278 <HAL_RCC_ClockConfig+0x268>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d909      	bls.n	800510a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050f6:	4b5f      	ldr	r3, [pc, #380]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fe:	4a5d      	ldr	r2, [pc, #372]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005104:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800510a:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4957      	ldr	r1, [pc, #348]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005118:	4313      	orrs	r3, r2
 800511a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fd f816 	bl	800214c <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd f812 	bl	800214c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e095      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 020c 	and.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	429a      	cmp	r2, r3
 800514a:	d1eb      	bne.n	8005124 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d023      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a42      	ldr	r2, [pc, #264]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800516a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800516e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800517c:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005184:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800518a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b39      	ldr	r3, [pc, #228]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4936      	ldr	r1, [pc, #216]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
 800519e:	e008      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d105      	bne.n	80051b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4a32      	ldr	r2, [pc, #200]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b2:	4b2f      	ldr	r3, [pc, #188]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d21d      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f023 020f 	bic.w	r2, r3, #15
 80051c8:	4929      	ldr	r1, [pc, #164]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051d0:	f7fc ffbc 	bl	800214c <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7fc ffb8 	bl	800214c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e03b      	b.n	8005266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <HAL_RCC_ClockConfig+0x260>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1ed      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4917      	ldr	r1, [pc, #92]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800523a:	f000 f825 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_RCC_ClockConfig+0x264>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	490c      	ldr	r1, [pc, #48]	; (800527c <HAL_RCC_ClockConfig+0x26c>)
 800524c:	5ccb      	ldrb	r3, [r1, r3]
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x270>)
 8005258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_RCC_ClockConfig+0x274>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fc ff28 	bl	80020b4 <HAL_InitTick>
 8005264:	4603      	mov	r3, r0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40022000 	.word	0x40022000
 8005274:	40021000 	.word	0x40021000
 8005278:	04c4b400 	.word	0x04c4b400
 800527c:	0800cdd4 	.word	0x0800cdd4
 8005280:	200001fc 	.word	0x200001fc
 8005284:	20000200 	.word	0x20000200

08005288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800529a:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <HAL_RCC_GetSysClockFreq+0xbc>)
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e047      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d102      	bne.n	80052b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e03e      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d136      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	3301      	adds	r3, #1
 80052d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d10c      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e6:	68d2      	ldr	r2, [r2, #12]
 80052e8:	0a12      	lsrs	r2, r2, #8
 80052ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052ee:	fb02 f303 	mul.w	r3, r2, r3
 80052f2:	617b      	str	r3, [r7, #20]
      break;
 80052f4:	e00c      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005300:	68d2      	ldr	r2, [r2, #12]
 8005302:	0a12      	lsrs	r2, r2, #8
 8005304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
      break;
 800530e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	0e5b      	lsrs	r3, r3, #25
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e001      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005330:	693b      	ldr	r3, [r7, #16]
}
 8005332:	4618      	mov	r0, r3
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	00f42400 	.word	0x00f42400
 8005348:	016e3600 	.word	0x016e3600

0800534c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCC_GetHCLKFreq+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	200001fc 	.word	0x200001fc

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005368:	f7ff fff0 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4904      	ldr	r1, [pc, #16]	; (800538c <HAL_RCC_GetPCLK1Freq+0x28>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021000 	.word	0x40021000
 800538c:	0800cde4 	.word	0x0800cde4

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005394:	f7ff ffda 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0adb      	lsrs	r3, r3, #11
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4904      	ldr	r1, [pc, #16]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800cde4 	.word	0x0800cde4

080053bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053c2:	4b1e      	ldr	r3, [pc, #120]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053cc:	4b1b      	ldr	r3, [pc, #108]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d10c      	bne.n	80053fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e0:	4a17      	ldr	r2, [pc, #92]	; (8005440 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ea:	68d2      	ldr	r2, [r2, #12]
 80053ec:	0a12      	lsrs	r2, r2, #8
 80053ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	617b      	str	r3, [r7, #20]
    break;
 80053f8:	e00c      	b.n	8005414 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	4a0e      	ldr	r2, [pc, #56]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	0a12      	lsrs	r2, r2, #8
 8005408:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]
    break;
 8005412:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	0e5b      	lsrs	r3, r3, #25
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	3301      	adds	r3, #1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800542e:	687b      	ldr	r3, [r7, #4]
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40021000 	.word	0x40021000
 8005440:	016e3600 	.word	0x016e3600
 8005444:	00f42400 	.word	0x00f42400

08005448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005450:	2300      	movs	r3, #0
 8005452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005454:	2300      	movs	r3, #0
 8005456:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8098 	beq.w	8005596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546a:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	4b40      	ldr	r3, [pc, #256]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6593      	str	r3, [r2, #88]	; 0x58
 8005482:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005492:	4b3a      	ldr	r3, [pc, #232]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a39      	ldr	r2, [pc, #228]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800549e:	f7fc fe55 	bl	800214c <HAL_GetTick>
 80054a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054a4:	e009      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fc fe51 	bl	800214c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d902      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	74fb      	strb	r3, [r7, #19]
        break;
 80054b8:	e005      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ba:	4b30      	ldr	r3, [pc, #192]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0ef      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d159      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01e      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d019      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054e8:	4b23      	ldr	r3, [pc, #140]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054f4:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005504:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc fe11 	bl	800214c <HAL_GetTick>
 800552a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552c:	e00b      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fc fe0d 	bl	800214c <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d902      	bls.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	74fb      	strb	r3, [r7, #19]
            break;
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ec      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	4903      	ldr	r1, [pc, #12]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005570:	e008      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	74bb      	strb	r3, [r7, #18]
 8005576:	e005      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005578:	40021000 	.word	0x40021000
 800557c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005584:	7c7b      	ldrb	r3, [r7, #17]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d105      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558a:	4ba7      	ldr	r3, [pc, #668]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	4aa6      	ldr	r2, [pc, #664]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a2:	4ba1      	ldr	r3, [pc, #644]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f023 0203 	bic.w	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	499d      	ldr	r1, [pc, #628]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055c4:	4b98      	ldr	r3, [pc, #608]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f023 020c 	bic.w	r2, r3, #12
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	4995      	ldr	r1, [pc, #596]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055e6:	4b90      	ldr	r3, [pc, #576]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	498c      	ldr	r1, [pc, #560]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005608:	4b87      	ldr	r3, [pc, #540]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	4984      	ldr	r1, [pc, #528]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	497b      	ldr	r1, [pc, #492]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800564c:	4b76      	ldr	r3, [pc, #472]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4973      	ldr	r1, [pc, #460]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800566e:	4b6e      	ldr	r3, [pc, #440]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	496a      	ldr	r1, [pc, #424]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005690:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	4962      	ldr	r1, [pc, #392]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b2:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	4959      	ldr	r1, [pc, #356]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056d4:	4b54      	ldr	r3, [pc, #336]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	4951      	ldr	r1, [pc, #324]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4948      	ldr	r1, [pc, #288]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005718:	4b43      	ldr	r3, [pc, #268]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	4940      	ldr	r1, [pc, #256]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a3a      	ldr	r2, [pc, #232]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005742:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	4932      	ldr	r1, [pc, #200]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	4924      	ldr	r1, [pc, #144]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d015      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c0:	4b19      	ldr	r3, [pc, #100]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	4916      	ldr	r1, [pc, #88]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057de:	d105      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a10      	ldr	r2, [pc, #64]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d019      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4908      	ldr	r1, [pc, #32]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005816:	d109      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a02      	ldr	r2, [pc, #8]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005822:	60d3      	str	r3, [r2, #12]
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d015      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005838:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	4926      	ldr	r1, [pc, #152]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	4918      	ldr	r1, [pc, #96]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588e:	d105      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005890:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058a8:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b6:	490a      	ldr	r1, [pc, #40]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc fa4e 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f001 f8e8 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e054      	b.n	8005a56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d01d      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_TIM_Base_Start_IT+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <HAL_TIM_Base_Start_IT+0xdc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_TIM_Base_Start_IT+0xe0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_TIM_Base_Start_IT+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d115      	bne.n	8005a40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <HAL_TIM_Base_Start_IT+0xec>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d015      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d011      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e008      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e000      	b.n	8005a54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40015000 	.word	0x40015000
 8005a80:	00010007 	.word	0x00010007

08005a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e049      	b.n	8005b2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f841 	bl	8005b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f001 f818 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_TIM_PWM_Start+0x24>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e03c      	b.n	8005be6 <HAL_TIM_PWM_Start+0x9e>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d109      	bne.n	8005b86 <HAL_TIM_PWM_Start+0x3e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e02f      	b.n	8005be6 <HAL_TIM_PWM_Start+0x9e>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d109      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x58>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e022      	b.n	8005be6 <HAL_TIM_PWM_Start+0x9e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b0c      	cmp	r3, #12
 8005ba4:	d109      	bne.n	8005bba <HAL_TIM_PWM_Start+0x72>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e015      	b.n	8005be6 <HAL_TIM_PWM_Start+0x9e>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b10      	cmp	r3, #16
 8005bbe:	d109      	bne.n	8005bd4 <HAL_TIM_PWM_Start+0x8c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e008      	b.n	8005be6 <HAL_TIM_PWM_Start+0x9e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0a6      	b.n	8005d3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start+0xb6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	e023      	b.n	8005c46 <HAL_TIM_PWM_Start+0xfe>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start+0xc6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c0c:	e01b      	b.n	8005c46 <HAL_TIM_PWM_Start+0xfe>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Start+0xd6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c1c:	e013      	b.n	8005c46 <HAL_TIM_PWM_Start+0xfe>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Start+0xe6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c2c:	e00b      	b.n	8005c46 <HAL_TIM_PWM_Start+0xfe>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Start+0xf6>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	e003      	b.n	8005c46 <HAL_TIM_PWM_Start+0xfe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fcea 	bl	8007628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a3a      	ldr	r2, [pc, #232]	; (8005d44 <HAL_TIM_PWM_Start+0x1fc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x148>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a39      	ldr	r2, [pc, #228]	; (8005d48 <HAL_TIM_PWM_Start+0x200>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x148>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a37      	ldr	r2, [pc, #220]	; (8005d4c <HAL_TIM_PWM_Start+0x204>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x148>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a36      	ldr	r2, [pc, #216]	; (8005d50 <HAL_TIM_PWM_Start+0x208>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x148>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a34      	ldr	r2, [pc, #208]	; (8005d54 <HAL_TIM_PWM_Start+0x20c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x148>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a33      	ldr	r2, [pc, #204]	; (8005d58 <HAL_TIM_PWM_Start+0x210>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_PWM_Start+0x14c>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_TIM_PWM_Start+0x14e>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a25      	ldr	r2, [pc, #148]	; (8005d44 <HAL_TIM_PWM_Start+0x1fc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d01d      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a26      	ldr	r2, [pc, #152]	; (8005d5c <HAL_TIM_PWM_Start+0x214>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <HAL_TIM_PWM_Start+0x218>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a23      	ldr	r2, [pc, #140]	; (8005d64 <HAL_TIM_PWM_Start+0x21c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_TIM_PWM_Start+0x200>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_TIM_PWM_Start+0x204>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1b2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <HAL_TIM_PWM_Start+0x210>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d115      	bne.n	8005d26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <HAL_TIM_PWM_Start+0x220>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b06      	cmp	r3, #6
 8005d0a:	d015      	beq.n	8005d38 <HAL_TIM_PWM_Start+0x1f0>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d12:	d011      	beq.n	8005d38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d24:	e008      	b.n	8005d38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e000      	b.n	8005d3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40015000 	.word	0x40015000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	00010007 	.word	0x00010007

08005d6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fc52 	bl	8007628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <HAL_TIM_PWM_Stop+0x120>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_TIM_PWM_Stop+0x54>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3f      	ldr	r2, [pc, #252]	; (8005e90 <HAL_TIM_PWM_Stop+0x124>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_TIM_PWM_Stop+0x54>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3d      	ldr	r2, [pc, #244]	; (8005e94 <HAL_TIM_PWM_Stop+0x128>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_TIM_PWM_Stop+0x54>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3c      	ldr	r2, [pc, #240]	; (8005e98 <HAL_TIM_PWM_Stop+0x12c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_TIM_PWM_Stop+0x54>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_TIM_PWM_Stop+0x130>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_PWM_Stop+0x54>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a39      	ldr	r2, [pc, #228]	; (8005ea0 <HAL_TIM_PWM_Stop+0x134>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_PWM_Stop+0x58>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <HAL_TIM_PWM_Stop+0x5a>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d017      	beq.n	8005dfa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0x8e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	f244 4344 	movw	r3, #17476	; 0x4444
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0x8e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <HAL_TIM_PWM_Stop+0xbe>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_PWM_Stop+0xbe>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Stop+0xce>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	e023      	b.n	8005e82 <HAL_TIM_PWM_Stop+0x116>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Stop+0xde>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e48:	e01b      	b.n	8005e82 <HAL_TIM_PWM_Stop+0x116>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Stop+0xee>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e58:	e013      	b.n	8005e82 <HAL_TIM_PWM_Stop+0x116>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Stop+0xfe>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e68:	e00b      	b.n	8005e82 <HAL_TIM_PWM_Stop+0x116>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x10e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e78:	e003      	b.n	8005e82 <HAL_TIM_PWM_Stop+0x116>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800
 8005ea0:	40015000 	.word	0x40015000

08005ea4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e049      	b.n	8005f4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f841 	bl	8005f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fe08 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_IC_Start_IT+0x1e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e023      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x66>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_IC_Start_IT+0x2e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e01b      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x66>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_IC_Start_IT+0x3e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	e013      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x66>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_IC_Start_IT+0x4e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e00b      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x66>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_IC_Start_IT+0x5e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e003      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x66>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_TIM_IC_Start_IT+0x78>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e013      	b.n	8006008 <HAL_TIM_IC_Start_IT+0xa0>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d104      	bne.n	8005ff0 <HAL_TIM_IC_Start_IT+0x88>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e00b      	b.n	8006008 <HAL_TIM_IC_Start_IT+0xa0>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d104      	bne.n	8006000 <HAL_TIM_IC_Start_IT+0x98>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e003      	b.n	8006008 <HAL_TIM_IC_Start_IT+0xa0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006006:	b2db      	uxtb	r3, r3
 8006008:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d102      	bne.n	8006016 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006010:	7b7b      	ldrb	r3, [r7, #13]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d001      	beq.n	800601a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0e2      	b.n	80061e0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_TIM_IC_Start_IT+0xc2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	e023      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x10a>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d104      	bne.n	800603a <HAL_TIM_IC_Start_IT+0xd2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006038:	e01b      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x10a>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d104      	bne.n	800604a <HAL_TIM_IC_Start_IT+0xe2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006048:	e013      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x10a>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d104      	bne.n	800605a <HAL_TIM_IC_Start_IT+0xf2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006058:	e00b      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x10a>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b10      	cmp	r3, #16
 800605e:	d104      	bne.n	800606a <HAL_TIM_IC_Start_IT+0x102>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006068:	e003      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x10a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <HAL_TIM_IC_Start_IT+0x11a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	e013      	b.n	80060aa <HAL_TIM_IC_Start_IT+0x142>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d104      	bne.n	8006092 <HAL_TIM_IC_Start_IT+0x12a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006090:	e00b      	b.n	80060aa <HAL_TIM_IC_Start_IT+0x142>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d104      	bne.n	80060a2 <HAL_TIM_IC_Start_IT+0x13a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a0:	e003      	b.n	80060aa <HAL_TIM_IC_Start_IT+0x142>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d841      	bhi.n	8006134 <HAL_TIM_IC_Start_IT+0x1cc>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_TIM_IC_Start_IT+0x150>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	08006135 	.word	0x08006135
 80060c0:	08006135 	.word	0x08006135
 80060c4:	08006135 	.word	0x08006135
 80060c8:	080060ff 	.word	0x080060ff
 80060cc:	08006135 	.word	0x08006135
 80060d0:	08006135 	.word	0x08006135
 80060d4:	08006135 	.word	0x08006135
 80060d8:	08006111 	.word	0x08006111
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006135 	.word	0x08006135
 80060e4:	08006135 	.word	0x08006135
 80060e8:	08006123 	.word	0x08006123
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0202 	orr.w	r2, r2, #2
 80060fa:	60da      	str	r2, [r3, #12]
      break;
 80060fc:	e01d      	b.n	800613a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0204 	orr.w	r2, r2, #4
 800610c:	60da      	str	r2, [r3, #12]
      break;
 800610e:	e014      	b.n	800613a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0208 	orr.w	r2, r2, #8
 800611e:	60da      	str	r2, [r3, #12]
      break;
 8006120:	e00b      	b.n	800613a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0210 	orr.w	r2, r2, #16
 8006130:	60da      	str	r2, [r3, #12]
      break;
 8006132:	e002      	b.n	800613a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
      break;
 8006138:	bf00      	nop
  }

  if (status == HAL_OK)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d14e      	bne.n	80061de <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f001 fa6d 	bl	8007628 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a25      	ldr	r2, [pc, #148]	; (80061e8 <HAL_TIM_IC_Start_IT+0x280>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006160:	d01d      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_TIM_IC_Start_IT+0x284>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <HAL_TIM_IC_Start_IT+0x288>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <HAL_TIM_IC_Start_IT+0x28c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <HAL_TIM_IC_Start_IT+0x290>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_TIM_IC_Start_IT+0x294>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIM_IC_Start_IT+0x236>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <HAL_TIM_IC_Start_IT+0x298>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d115      	bne.n	80061ca <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <HAL_TIM_IC_Start_IT+0x29c>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d015      	beq.n	80061dc <HAL_TIM_IC_Start_IT+0x274>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d011      	beq.n	80061dc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	e008      	b.n	80061dc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e000      	b.n	80061de <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061dc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40015000 	.word	0x40015000
 8006204:	00010007 	.word	0x00010007

08006208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0202 	mvn.w	r2, #2
 8006234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fc36 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc28 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc39 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b04      	cmp	r3, #4
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0204 	mvn.w	r2, #4
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc0c 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fbfe 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fc0f 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d122      	bne.n	800630c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0208 	mvn.w	r2, #8
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2204      	movs	r2, #4
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fbe2 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fbd4 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fbe5 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b10      	cmp	r3, #16
 8006318:	d122      	bne.n	8006360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b10      	cmp	r3, #16
 8006326:	d11b      	bne.n	8006360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0210 	mvn.w	r2, #16
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2208      	movs	r2, #8
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fbb8 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fbaa 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbbb 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0201 	mvn.w	r2, #1
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fb84 	bl	8006a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006396:	2b80      	cmp	r3, #128	; 0x80
 8006398:	d10e      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fbd0 	bl	8007b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fbc3 	bl	8007b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d10e      	bne.n	8006412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d107      	bne.n	8006412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fb69 	bl	8006ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b20      	cmp	r3, #32
 800641e:	d10e      	bne.n	800643e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d107      	bne.n	800643e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0220 	mvn.w	r2, #32
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fb83 	bl	8007b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800644c:	d10f      	bne.n	800646e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645c:	d107      	bne.n	800646e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fb89 	bl	8007b80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800647c:	d10f      	bne.n	800649e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648c:	d107      	bne.n	800649e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fb7b 	bl	8007b94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ac:	d10f      	bne.n	80064ce <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fb6d 	bl	8007ba8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064dc:	d10f      	bne.n	80064fe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ec:	d107      	bne.n	80064fe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80064f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fb5f 	bl	8007bbc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006520:	2302      	movs	r3, #2
 8006522:	e088      	b.n	8006636 <HAL_TIM_IC_ConfigChannel+0x130>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11b      	bne.n	800656a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f000 feab 	bl	800729c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 020c 	bic.w	r2, r2, #12
 8006554:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6999      	ldr	r1, [r3, #24]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	619a      	str	r2, [r3, #24]
 8006568:	e060      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d11c      	bne.n	80065aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6819      	ldr	r1, [r3, #0]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f000 ff2f 	bl	80073e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006592:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	619a      	str	r2, [r3, #24]
 80065a8:	e040      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6819      	ldr	r1, [r3, #0]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f000 ff7c 	bl	80074bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 020c 	bic.w	r2, r2, #12
 80065d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69d9      	ldr	r1, [r3, #28]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
 80065e6:	e021      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d11c      	bne.n	8006628 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f000 ff99 	bl	8007534 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006610:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	021a      	lsls	r2, r3, #8
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	61da      	str	r2, [r3, #28]
 8006626:	e001      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800665a:	2302      	movs	r3, #2
 800665c:	e0ff      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b14      	cmp	r3, #20
 800666a:	f200 80f0 	bhi.w	800684e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c9 	.word	0x080066c9
 8006678:	0800684f 	.word	0x0800684f
 800667c:	0800684f 	.word	0x0800684f
 8006680:	0800684f 	.word	0x0800684f
 8006684:	08006709 	.word	0x08006709
 8006688:	0800684f 	.word	0x0800684f
 800668c:	0800684f 	.word	0x0800684f
 8006690:	0800684f 	.word	0x0800684f
 8006694:	0800674b 	.word	0x0800674b
 8006698:	0800684f 	.word	0x0800684f
 800669c:	0800684f 	.word	0x0800684f
 80066a0:	0800684f 	.word	0x0800684f
 80066a4:	0800678b 	.word	0x0800678b
 80066a8:	0800684f 	.word	0x0800684f
 80066ac:	0800684f 	.word	0x0800684f
 80066b0:	0800684f 	.word	0x0800684f
 80066b4:	080067cd 	.word	0x080067cd
 80066b8:	0800684f 	.word	0x0800684f
 80066bc:	0800684f 	.word	0x0800684f
 80066c0:	0800684f 	.word	0x0800684f
 80066c4:	0800680d 	.word	0x0800680d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 faba 	bl	8006c48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	619a      	str	r2, [r3, #24]
      break;
 8006706:	e0a5      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb34 	bl	8006d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
      break;
 8006748:	e084      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fba7 	bl	8006ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0204 	bic.w	r2, r2, #4
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e064      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fc19 	bl	8006fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	021a      	lsls	r2, r3, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e043      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fc8c 	bl	80070f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0208 	orr.w	r2, r2, #8
 80067e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0204 	bic.w	r2, r2, #4
 80067f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800680a:	e023      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fcd6 	bl	80071c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006826:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006836:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800684c:	e002      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
      break;
 8006852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIM_ConfigClockSource+0x1c>
 8006880:	2302      	movs	r3, #2
 8006882:	e0f6      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x20a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80068a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a6f      	ldr	r2, [pc, #444]	; (8006a7c <HAL_TIM_ConfigClockSource+0x214>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f000 80c1 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 80068c4:	4a6d      	ldr	r2, [pc, #436]	; (8006a7c <HAL_TIM_ConfigClockSource+0x214>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	f200 80c6 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 80068cc:	4a6c      	ldr	r2, [pc, #432]	; (8006a80 <HAL_TIM_ConfigClockSource+0x218>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f000 80b9 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 80068d4:	4a6a      	ldr	r2, [pc, #424]	; (8006a80 <HAL_TIM_ConfigClockSource+0x218>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	f200 80be 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 80068dc:	4a69      	ldr	r2, [pc, #420]	; (8006a84 <HAL_TIM_ConfigClockSource+0x21c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f000 80b1 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 80068e4:	4a67      	ldr	r2, [pc, #412]	; (8006a84 <HAL_TIM_ConfigClockSource+0x21c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f200 80b6 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 80068ec:	4a66      	ldr	r2, [pc, #408]	; (8006a88 <HAL_TIM_ConfigClockSource+0x220>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f000 80a9 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 80068f4:	4a64      	ldr	r2, [pc, #400]	; (8006a88 <HAL_TIM_ConfigClockSource+0x220>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f200 80ae 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 80068fc:	4a63      	ldr	r2, [pc, #396]	; (8006a8c <HAL_TIM_ConfigClockSource+0x224>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	f000 80a1 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006904:	4a61      	ldr	r2, [pc, #388]	; (8006a8c <HAL_TIM_ConfigClockSource+0x224>)
 8006906:	4293      	cmp	r3, r2
 8006908:	f200 80a6 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 800690c:	4a60      	ldr	r2, [pc, #384]	; (8006a90 <HAL_TIM_ConfigClockSource+0x228>)
 800690e:	4293      	cmp	r3, r2
 8006910:	f000 8099 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006914:	4a5e      	ldr	r2, [pc, #376]	; (8006a90 <HAL_TIM_ConfigClockSource+0x228>)
 8006916:	4293      	cmp	r3, r2
 8006918:	f200 809e 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 800691c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006920:	f000 8091 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006924:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006928:	f200 8096 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006930:	f000 8089 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006938:	f200 808e 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 800693c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006940:	d03e      	beq.n	80069c0 <HAL_TIM_ConfigClockSource+0x158>
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	f200 8087 	bhi.w	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	f000 8086 	beq.w	8006a5e <HAL_TIM_ConfigClockSource+0x1f6>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	d87f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006958:	2b70      	cmp	r3, #112	; 0x70
 800695a:	d01a      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x12a>
 800695c:	2b70      	cmp	r3, #112	; 0x70
 800695e:	d87b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006960:	2b60      	cmp	r3, #96	; 0x60
 8006962:	d050      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0x19e>
 8006964:	2b60      	cmp	r3, #96	; 0x60
 8006966:	d877      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006968:	2b50      	cmp	r3, #80	; 0x50
 800696a:	d03c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x17e>
 800696c:	2b50      	cmp	r3, #80	; 0x50
 800696e:	d873      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d058      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x1be>
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d86f      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006978:	2b30      	cmp	r3, #48	; 0x30
 800697a:	d064      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 800697c:	2b30      	cmp	r3, #48	; 0x30
 800697e:	d86b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d060      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d867      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05c      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 800698c:	2b10      	cmp	r3, #16
 800698e:	d05a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x1de>
 8006990:	e062      	b.n	8006a58 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6899      	ldr	r1, [r3, #8]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f000 fe21 	bl	80075e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]
      break;
 80069be:	e04f      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f000 fe0a 	bl	80075e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e2:	609a      	str	r2, [r3, #8]
      break;
 80069e4:	e03c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6859      	ldr	r1, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f000 fcc6 	bl	8007384 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2150      	movs	r1, #80	; 0x50
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fdd5 	bl	80075ae <TIM_ITRx_SetConfig>
      break;
 8006a04:	e02c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 fd22 	bl	800745c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2160      	movs	r1, #96	; 0x60
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fdc5 	bl	80075ae <TIM_ITRx_SetConfig>
      break;
 8006a24:	e01c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fca6 	bl	8007384 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2140      	movs	r1, #64	; 0x40
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fdb5 	bl	80075ae <TIM_ITRx_SetConfig>
      break;
 8006a44:	e00c      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f000 fdac 	bl	80075ae <TIM_ITRx_SetConfig>
      break;
 8006a56:	e003      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5c:	e000      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	00100070 	.word	0x00100070
 8006a80:	00100060 	.word	0x00100060
 8006a84:	00100050 	.word	0x00100050
 8006a88:	00100040 	.word	0x00100040
 8006a8c:	00100030 	.word	0x00100030
 8006a90:	00100020 	.word	0x00100020

08006a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a46      	ldr	r2, [pc, #280]	; (8006c24 <TIM_Base_SetConfig+0x12c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d017      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d013      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a43      	ldr	r2, [pc, #268]	; (8006c28 <TIM_Base_SetConfig+0x130>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00f      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a42      	ldr	r2, [pc, #264]	; (8006c2c <TIM_Base_SetConfig+0x134>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00b      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a41      	ldr	r2, [pc, #260]	; (8006c30 <TIM_Base_SetConfig+0x138>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d007      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a40      	ldr	r2, [pc, #256]	; (8006c34 <TIM_Base_SetConfig+0x13c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_Base_SetConfig+0x48>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3f      	ldr	r2, [pc, #252]	; (8006c38 <TIM_Base_SetConfig+0x140>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d108      	bne.n	8006b52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <TIM_Base_SetConfig+0x12c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d023      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d01f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a30      	ldr	r2, [pc, #192]	; (8006c28 <TIM_Base_SetConfig+0x130>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <TIM_Base_SetConfig+0x134>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d017      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2e      	ldr	r2, [pc, #184]	; (8006c30 <TIM_Base_SetConfig+0x138>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <TIM_Base_SetConfig+0x13c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <TIM_Base_SetConfig+0x144>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2c      	ldr	r2, [pc, #176]	; (8006c40 <TIM_Base_SetConfig+0x148>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2b      	ldr	r2, [pc, #172]	; (8006c44 <TIM_Base_SetConfig+0x14c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_Base_SetConfig+0xaa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <TIM_Base_SetConfig+0x140>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d108      	bne.n	8006bb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <TIM_Base_SetConfig+0x12c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <TIM_Base_SetConfig+0x110>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a14      	ldr	r2, [pc, #80]	; (8006c34 <TIM_Base_SetConfig+0x13c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00f      	beq.n	8006c08 <TIM_Base_SetConfig+0x110>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <TIM_Base_SetConfig+0x144>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_Base_SetConfig+0x110>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <TIM_Base_SetConfig+0x148>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_Base_SetConfig+0x110>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <TIM_Base_SetConfig+0x14c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_Base_SetConfig+0x110>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <TIM_Base_SetConfig+0x140>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d103      	bne.n	8006c10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	615a      	str	r2, [r3, #20]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40013400 	.word	0x40013400
 8006c38:	40015000 	.word	0x40015000
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800

08006c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0201 	bic.w	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 0302 	bic.w	r3, r3, #2
 8006c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a30      	ldr	r2, [pc, #192]	; (8006d64 <TIM_OC1_SetConfig+0x11c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x88>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2f      	ldr	r2, [pc, #188]	; (8006d68 <TIM_OC1_SetConfig+0x120>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00f      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x88>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2e      	ldr	r2, [pc, #184]	; (8006d6c <TIM_OC1_SetConfig+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x88>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <TIM_OC1_SetConfig+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x88>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <TIM_OC1_SetConfig+0x12c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x88>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <TIM_OC1_SetConfig+0x130>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d10c      	bne.n	8006cea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0308 	bic.w	r3, r3, #8
 8006cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f023 0304 	bic.w	r3, r3, #4
 8006ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <TIM_OC1_SetConfig+0x11c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <TIM_OC1_SetConfig+0xd2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <TIM_OC1_SetConfig+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_OC1_SetConfig+0xd2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	; (8006d6c <TIM_OC1_SetConfig+0x124>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_OC1_SetConfig+0xd2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <TIM_OC1_SetConfig+0x128>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_OC1_SetConfig+0xd2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <TIM_OC1_SetConfig+0x12c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_OC1_SetConfig+0xd2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a18      	ldr	r2, [pc, #96]	; (8006d78 <TIM_OC1_SetConfig+0x130>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d111      	bne.n	8006d3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	40015000 	.word	0x40015000

08006d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0210 	bic.w	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f023 0320 	bic.w	r3, r3, #32
 8006dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <TIM_OC2_SetConfig+0x110>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d007      	beq.n	8006df0 <TIM_OC2_SetConfig+0x74>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a2b      	ldr	r2, [pc, #172]	; (8006e90 <TIM_OC2_SetConfig+0x114>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_OC2_SetConfig+0x74>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <TIM_OC2_SetConfig+0x118>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10d      	bne.n	8006e0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <TIM_OC2_SetConfig+0x110>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <TIM_OC2_SetConfig+0xc0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <TIM_OC2_SetConfig+0x114>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00f      	beq.n	8006e3c <TIM_OC2_SetConfig+0xc0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <TIM_OC2_SetConfig+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00b      	beq.n	8006e3c <TIM_OC2_SetConfig+0xc0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <TIM_OC2_SetConfig+0x120>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d007      	beq.n	8006e3c <TIM_OC2_SetConfig+0xc0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <TIM_OC2_SetConfig+0x124>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC2_SetConfig+0xc0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <TIM_OC2_SetConfig+0x118>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d113      	bne.n	8006e64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40015000 	.word	0x40015000
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800

08006ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2b      	ldr	r2, [pc, #172]	; (8006fb0 <TIM_OC3_SetConfig+0x10c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d007      	beq.n	8006f16 <TIM_OC3_SetConfig+0x72>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <TIM_OC3_SetConfig+0x110>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_OC3_SetConfig+0x72>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <TIM_OC3_SetConfig+0x114>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d10d      	bne.n	8006f32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <TIM_OC3_SetConfig+0x10c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d013      	beq.n	8006f62 <TIM_OC3_SetConfig+0xbe>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <TIM_OC3_SetConfig+0x110>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_OC3_SetConfig+0xbe>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <TIM_OC3_SetConfig+0x118>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_OC3_SetConfig+0xbe>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <TIM_OC3_SetConfig+0x11c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_OC3_SetConfig+0xbe>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <TIM_OC3_SetConfig+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0xbe>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <TIM_OC3_SetConfig+0x114>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d113      	bne.n	8006f8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40013400 	.word	0x40013400
 8006fb8:	40015000 	.word	0x40015000
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	40014800 	.word	0x40014800

08006fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	031b      	lsls	r3, r3, #12
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <TIM_OC4_SetConfig+0x110>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d007      	beq.n	800703c <TIM_OC4_SetConfig+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a2b      	ldr	r2, [pc, #172]	; (80070dc <TIM_OC4_SetConfig+0x114>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC4_SetConfig+0x74>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <TIM_OC4_SetConfig+0x118>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10d      	bne.n	8007058 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	031b      	lsls	r3, r3, #12
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007056:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <TIM_OC4_SetConfig+0x110>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d013      	beq.n	8007088 <TIM_OC4_SetConfig+0xc0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1e      	ldr	r2, [pc, #120]	; (80070dc <TIM_OC4_SetConfig+0x114>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00f      	beq.n	8007088 <TIM_OC4_SetConfig+0xc0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <TIM_OC4_SetConfig+0x11c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_OC4_SetConfig+0xc0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <TIM_OC4_SetConfig+0x120>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_OC4_SetConfig+0xc0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <TIM_OC4_SetConfig+0x124>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC4_SetConfig+0xc0>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <TIM_OC4_SetConfig+0x118>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d113      	bne.n	80070b0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007096:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	019b      	lsls	r3, r3, #6
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	019b      	lsls	r3, r3, #6
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40015000 	.word	0x40015000
 80070e4:	40014000 	.word	0x40014000
 80070e8:	40014400 	.word	0x40014400
 80070ec:	40014800 	.word	0x40014800

080070f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <TIM_OC5_SetConfig+0xbc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_OC5_SetConfig+0xc0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <TIM_OC5_SetConfig+0xc4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <TIM_OC5_SetConfig+0xc8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC5_SetConfig+0xcc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <TIM_OC5_SetConfig+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d109      	bne.n	8007186 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007178:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	621a      	str	r2, [r3, #32]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40015000 	.word	0x40015000

080071c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800720a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	051b      	lsls	r3, r3, #20
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1a      	ldr	r2, [pc, #104]	; (8007284 <TIM_OC6_SetConfig+0xc0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <TIM_OC6_SetConfig+0xc4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00f      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a18      	ldr	r2, [pc, #96]	; (800728c <TIM_OC6_SetConfig+0xc8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00b      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <TIM_OC6_SetConfig+0xcc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a16      	ldr	r2, [pc, #88]	; (8007294 <TIM_OC6_SetConfig+0xd0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <TIM_OC6_SetConfig+0xd4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d109      	bne.n	800725c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40013400 	.word	0x40013400
 800728c:	40014000 	.word	0x40014000
 8007290:	40014400 	.word	0x40014400
 8007294:	40014800 	.word	0x40014800
 8007298:	40015000 	.word	0x40015000

0800729c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a28      	ldr	r2, [pc, #160]	; (8007368 <TIM_TI1_SetConfig+0xcc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01b      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d0:	d017      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a25      	ldr	r2, [pc, #148]	; (800736c <TIM_TI1_SetConfig+0xd0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a24      	ldr	r2, [pc, #144]	; (8007370 <TIM_TI1_SetConfig+0xd4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00f      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a23      	ldr	r2, [pc, #140]	; (8007374 <TIM_TI1_SetConfig+0xd8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00b      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4a22      	ldr	r2, [pc, #136]	; (8007378 <TIM_TI1_SetConfig+0xdc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <TIM_TI1_SetConfig+0xe0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <TIM_TI1_SetConfig+0x66>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a20      	ldr	r2, [pc, #128]	; (8007380 <TIM_TI1_SetConfig+0xe4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <TIM_TI1_SetConfig+0x6a>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <TIM_TI1_SetConfig+0x6c>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e003      	b.n	8007326 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	b2db      	uxtb	r3, r3
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f023 030a 	bic.w	r3, r3, #10
 8007340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f003 030a 	and.w	r3, r3, #10
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40013400 	.word	0x40013400
 800737c:	40014000 	.word	0x40014000
 8007380:	40015000 	.word	0x40015000

08007384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f023 0201 	bic.w	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 030a 	bic.w	r3, r3, #10
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b087      	sub	sp, #28
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	f023 0210 	bic.w	r2, r3, #16
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	b29b      	uxth	r3, r3
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007434:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	621a      	str	r2, [r3, #32]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f023 0210 	bic.w	r2, r3, #16
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007486:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	031b      	lsls	r3, r3, #12
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	621a      	str	r2, [r3, #32]
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f023 0303 	bic.w	r3, r3, #3
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800750c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	621a      	str	r2, [r3, #32]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007560:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007572:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	031b      	lsls	r3, r3, #12
 8007578:	b29b      	uxth	r3, r3
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007586:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	031b      	lsls	r3, r3, #12
 800758c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f043 0307 	orr.w	r3, r3, #7
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	609a      	str	r2, [r3, #8]
}
 80075dc:	bf00      	nop
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	021a      	lsls	r2, r3, #8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	431a      	orrs	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2201      	movs	r2, #1
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1a      	ldr	r2, [r3, #32]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	43db      	mvns	r3, r3
 800764a:	401a      	ands	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1a      	ldr	r2, [r3, #32]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	fa01 f303 	lsl.w	r3, r1, r3
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_TIMEx_PWMN_Start+0x24>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e022      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d109      	bne.n	80076b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	e015      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d109      	bne.n	80076cc <HAL_TIMEx_PWMN_Start+0x58>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	bf14      	ite	ne
 80076c4:	2301      	movne	r3, #1
 80076c6:	2300      	moveq	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	e008      	b.n	80076de <HAL_TIMEx_PWMN_Start+0x6a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e073      	b.n	80077ce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_TIMEx_PWMN_Start+0x82>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f4:	e013      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d104      	bne.n	8007706 <HAL_TIMEx_PWMN_Start+0x92>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007704:	e00b      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d104      	bne.n	8007716 <HAL_TIMEx_PWMN_Start+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007714:	e003      	b.n	800771e <HAL_TIMEx_PWMN_Start+0xaa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2204      	movs	r2, #4
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fa52 	bl	8007bd0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800773a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d022      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d01d      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_TIMEx_PWMN_Start+0x168>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_TIMEx_PWMN_Start+0x170>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <HAL_TIMEx_PWMN_Start+0x178>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_PWMN_Start+0x118>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d115      	bne.n	80077b8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007794:	4013      	ands	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d015      	beq.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a4:	d011      	beq.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0201 	orr.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b6:	e008      	b.n	80077ca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e000      	b.n	80077cc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40013400 	.word	0x40013400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40015000 	.word	0x40015000
 80077f4:	00010007 	.word	0x00010007

080077f8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f9e0 	bl	8007bd0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	f241 1311 	movw	r3, #4369	; 0x1111
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10f      	bne.n	8007840 <HAL_TIMEx_PWMN_Stop+0x48>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	f244 4344 	movw	r3, #17476	; 0x4444
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d107      	bne.n	8007840 <HAL_TIMEx_PWMN_Stop+0x48>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800783e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	f241 1311 	movw	r3, #4369	; 0x1111
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10f      	bne.n	8007870 <HAL_TIMEx_PWMN_Stop+0x78>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	f244 4344 	movw	r3, #17476	; 0x4444
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d107      	bne.n	8007870 <HAL_TIMEx_PWMN_Stop+0x78>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_TIMEx_PWMN_Stop+0x88>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	e013      	b.n	80078a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d104      	bne.n	8007890 <HAL_TIMEx_PWMN_Stop+0x98>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800788e:	e00b      	b.n	80078a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d104      	bne.n	80078a0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800789e:	e003      	b.n	80078a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e074      	b.n	80079b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a34      	ldr	r2, [pc, #208]	; (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a33      	ldr	r2, [pc, #204]	; (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a31      	ldr	r2, [pc, #196]	; (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007910:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d022      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d01d      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d018      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1c      	ldr	r2, [pc, #112]	; (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00e      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a18      	ldr	r2, [pc, #96]	; (80079dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a11      	ldr	r2, [pc, #68]	; (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d10c      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4313      	orrs	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40015000 	.word	0x40015000
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	40014000 	.word	0x40014000

080079e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e096      	b.n	8007b2a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d009      	beq.n	8007a94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d004      	beq.n	8007a94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d106      	bne.n	8007aa2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d12b      	bne.n	8007b18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	051b      	lsls	r3, r3, #20
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a0e      	ldr	r2, [pc, #56]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d106      	bne.n	8007b18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40013400 	.word	0x40013400
 8007b40:	40015000 	.word	0x40015000

08007b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2204      	movs	r2, #4
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	fa01 f303 	lsl.w	r3, r1, r3
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e042      	b.n	8007cb2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fa f996 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2224      	movs	r2, #36	; 0x24
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0201 	bic.w	r2, r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fc51 	bl	8008504 <UART_SetConfig>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e022      	b.n	8007cb2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 ff41 	bl	8008afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0201 	orr.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 ffc8 	bl	8008c40 <UART_CheckIdleState>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b08a      	sub	sp, #40	; 0x28
 8007cbe:	af02      	add	r7, sp, #8
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	f040 8083 	bne.w	8007ddc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_UART_Transmit+0x28>
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e07b      	b.n	8007dde <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_UART_Transmit+0x3a>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e074      	b.n	8007dde <HAL_UART_Transmit+0x124>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2221      	movs	r2, #33	; 0x21
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d0c:	f7fa fa1e 	bl	800214c <HAL_GetTick>
 8007d10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	88fa      	ldrh	r2, [r7, #6]
 8007d1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d108      	bne.n	8007d3e <HAL_UART_Transmit+0x84>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e003      	b.n	8007d46 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007d4e:	e02c      	b.n	8007daa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2200      	movs	r2, #0
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 ffbb 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e039      	b.n	8007dde <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3302      	adds	r3, #2
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e007      	b.n	8007d98 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1cc      	bne.n	8007d50 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2140      	movs	r1, #64	; 0x40
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 ff88 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e006      	b.n	8007dde <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e000      	b.n	8007dde <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ddc:	2302      	movs	r3, #2
  }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3720      	adds	r7, #32
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d142      	bne.n	8007e86 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_UART_Receive_IT+0x24>
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e03b      	b.n	8007e88 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Receive_IT+0x36>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e034      	b.n	8007e88 <HAL_UART_Receive_IT+0xa0>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <HAL_UART_Receive_IT+0xa8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01f      	beq.n	8007e76 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d018      	beq.n	8007e76 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	613b      	str	r3, [r7, #16]
   return(result);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	69f9      	ldr	r1, [r7, #28]
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e6      	bne.n	8007e44 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fff3 	bl	8008e68 <UART_Start_Receive_IT>
 8007e82:	4603      	mov	r3, r0
 8007e84:	e000      	b.n	8007e88 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
  }
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	; 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40008000 	.word	0x40008000

08007e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b0ba      	sub	sp, #232	; 0xe8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007eba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ebe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d11b      	bne.n	8007f08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d015      	beq.n	8007f08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d105      	bne.n	8007ef4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 82d6 	beq.w	80084aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
      }
      return;
 8007f06:	e2d0      	b.n	80084aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 811f 	beq.w	8008150 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f16:	4b8b      	ldr	r3, [pc, #556]	; (8008144 <HAL_UART_IRQHandler+0x2b0>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f22:	4b89      	ldr	r3, [pc, #548]	; (8008148 <HAL_UART_IRQHandler+0x2b4>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8112 	beq.w	8008150 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d011      	beq.n	8007f5c <HAL_UART_IRQHandler+0xc8>
 8007f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f52:	f043 0201 	orr.w	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d011      	beq.n	8007f8c <HAL_UART_IRQHandler+0xf8>
 8007f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f82:	f043 0204 	orr.w	r2, r3, #4
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d011      	beq.n	8007fbc <HAL_UART_IRQHandler+0x128>
 8007f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb2:	f043 0202 	orr.w	r2, r3, #2
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d017      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fd8:	4b5a      	ldr	r3, [pc, #360]	; (8008144 <HAL_UART_IRQHandler+0x2b0>)
 8007fda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fee:	f043 0208 	orr.w	r2, r3, #8
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008000:	2b00      	cmp	r3, #0
 8008002:	d012      	beq.n	800802a <HAL_UART_IRQHandler+0x196>
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008020:	f043 0220 	orr.w	r2, r3, #32
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 823c 	beq.w	80084ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d013      	beq.n	800806a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800804e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d005      	beq.n	800808e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008086:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800808a:	2b00      	cmp	r3, #0
 800808c:	d04f      	beq.n	800812e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f814 	bl	80090bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d141      	bne.n	8008126 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3308      	adds	r3, #8
 80080ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1d9      	bne.n	80080a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d013      	beq.n	800811e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	4a14      	ldr	r2, [pc, #80]	; (800814c <HAL_UART_IRQHandler+0x2b8>)
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008102:	4618      	mov	r0, r3
 8008104:	f7fc f992 	bl	800442c <HAL_DMA_Abort_IT>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d017      	beq.n	800813e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	e00f      	b.n	800813e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9da 	bl	80084d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008124:	e00b      	b.n	800813e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9d6 	bl	80084d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812c:	e007      	b.n	800813e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9d2 	bl	80084d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800813c:	e1b7      	b.n	80084ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813e:	bf00      	nop
    return;
 8008140:	e1b5      	b.n	80084ae <HAL_UART_IRQHandler+0x61a>
 8008142:	bf00      	nop
 8008144:	10000001 	.word	0x10000001
 8008148:	04000120 	.word	0x04000120
 800814c:	08009189 	.word	0x08009189

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008154:	2b01      	cmp	r3, #1
 8008156:	f040 814a 	bne.w	80083ee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815e:	f003 0310 	and.w	r3, r3, #16
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8143 	beq.w	80083ee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 813c 	beq.w	80083ee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2210      	movs	r2, #16
 800817c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	f040 80b5 	bne.w	80082f8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800819a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8187 	beq.w	80084b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ae:	429a      	cmp	r2, r3
 80081b0:	f080 817f 	bcs.w	80084b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 8086 	bne.w	80082dc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1da      	bne.n	80081d0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800822a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3308      	adds	r3, #8
 800823a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800823e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008242:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008246:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e1      	bne.n	800821a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3308      	adds	r3, #8
 800825c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800827a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800827c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e3      	bne.n	8008256 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ac:	f023 0310 	bic.w	r3, r3, #16
 80082b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082be:	65bb      	str	r3, [r7, #88]	; 0x58
 80082c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e4      	bne.n	800829c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fc f84f 	bl	800437a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f8fb 	bl	80084ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082f6:	e0dc      	b.n	80084b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008304:	b29b      	uxth	r3, r3
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80ce 	beq.w	80084b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800831a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80c9 	beq.w	80084b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008346:	647b      	str	r3, [r7, #68]	; 0x44
 8008348:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800834c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e4      	bne.n	8008324 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	623b      	str	r3, [r7, #32]
   return(result);
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008382:	633a      	str	r2, [r7, #48]	; 0x30
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e1      	bne.n	800835a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0310 	bic.w	r3, r3, #16
 80083be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69b9      	ldr	r1, [r7, #24]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	617b      	str	r3, [r7, #20]
   return(result);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e4      	bne.n	80083aa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f880 	bl	80084ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083ec:	e063      	b.n	80084b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <HAL_UART_IRQHandler+0x584>
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800840e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fb57 	bl	8009ac4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008416:	e051      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008420:	2b00      	cmp	r3, #0
 8008422:	d014      	beq.n	800844e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842c:	2b00      	cmp	r3, #0
 800842e:	d105      	bne.n	800843c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008440:	2b00      	cmp	r3, #0
 8008442:	d03a      	beq.n	80084ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
    }
    return;
 800844c:	e035      	b.n	80084ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <HAL_UART_IRQHandler+0x5da>
 800845a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fea4 	bl	80091b4 <UART_EndTransmit_IT>
    return;
 800846c:	e026      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800846e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <HAL_UART_IRQHandler+0x5fa>
 800847a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800847e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fb30 	bl	8009aec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800848c:	e016      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d010      	beq.n	80084bc <HAL_UART_IRQHandler+0x628>
 800849a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da0c      	bge.n	80084bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fb18 	bl	8009ad8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a8:	e008      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
      return;
 80084aa:	bf00      	nop
 80084ac:	e006      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
    return;
 80084ae:	bf00      	nop
 80084b0:	e004      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
      return;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
      return;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <HAL_UART_IRQHandler+0x628>
    return;
 80084ba:	bf00      	nop
  }
}
 80084bc:	37e8      	adds	r7, #232	; 0xe8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop

080084c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008508:	b08c      	sub	sp, #48	; 0x30
 800850a:	af00      	add	r7, sp, #0
 800850c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	431a      	orrs	r2, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	431a      	orrs	r2, r3
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	4313      	orrs	r3, r2
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4baa      	ldr	r3, [pc, #680]	; (80087dc <UART_SetConfig+0x2d8>)
 8008534:	4013      	ands	r3, r2
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800853c:	430b      	orrs	r3, r1
 800853e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a9f      	ldr	r2, [pc, #636]	; (80087e0 <UART_SetConfig+0x2dc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d004      	beq.n	8008570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856c:	4313      	orrs	r3, r2
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800857a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008584:	430b      	orrs	r3, r1
 8008586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f023 010f 	bic.w	r1, r3, #15
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a90      	ldr	r2, [pc, #576]	; (80087e4 <UART_SetConfig+0x2e0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d125      	bne.n	80085f4 <UART_SetConfig+0xf0>
 80085a8:	4b8f      	ldr	r3, [pc, #572]	; (80087e8 <UART_SetConfig+0x2e4>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d81a      	bhi.n	80085ec <UART_SetConfig+0xe8>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <UART_SetConfig+0xb8>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085cd 	.word	0x080085cd
 80085c0:	080085dd 	.word	0x080085dd
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085e5 	.word	0x080085e5
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e116      	b.n	8008802 <UART_SetConfig+0x2fe>
 80085d4:	2302      	movs	r3, #2
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e112      	b.n	8008802 <UART_SetConfig+0x2fe>
 80085dc:	2304      	movs	r3, #4
 80085de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e2:	e10e      	b.n	8008802 <UART_SetConfig+0x2fe>
 80085e4:	2308      	movs	r3, #8
 80085e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ea:	e10a      	b.n	8008802 <UART_SetConfig+0x2fe>
 80085ec:	2310      	movs	r3, #16
 80085ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f2:	e106      	b.n	8008802 <UART_SetConfig+0x2fe>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a7c      	ldr	r2, [pc, #496]	; (80087ec <UART_SetConfig+0x2e8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d138      	bne.n	8008670 <UART_SetConfig+0x16c>
 80085fe:	4b7a      	ldr	r3, [pc, #488]	; (80087e8 <UART_SetConfig+0x2e4>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	f003 030c 	and.w	r3, r3, #12
 8008608:	2b0c      	cmp	r3, #12
 800860a:	d82d      	bhi.n	8008668 <UART_SetConfig+0x164>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <UART_SetConfig+0x110>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008649 	.word	0x08008649
 8008618:	08008669 	.word	0x08008669
 800861c:	08008669 	.word	0x08008669
 8008620:	08008669 	.word	0x08008669
 8008624:	08008659 	.word	0x08008659
 8008628:	08008669 	.word	0x08008669
 800862c:	08008669 	.word	0x08008669
 8008630:	08008669 	.word	0x08008669
 8008634:	08008651 	.word	0x08008651
 8008638:	08008669 	.word	0x08008669
 800863c:	08008669 	.word	0x08008669
 8008640:	08008669 	.word	0x08008669
 8008644:	08008661 	.word	0x08008661
 8008648:	2300      	movs	r3, #0
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864e:	e0d8      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008650:	2302      	movs	r3, #2
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008656:	e0d4      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008658:	2304      	movs	r3, #4
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865e:	e0d0      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008660:	2308      	movs	r3, #8
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008666:	e0cc      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008668:	2310      	movs	r3, #16
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866e:	e0c8      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a5e      	ldr	r2, [pc, #376]	; (80087f0 <UART_SetConfig+0x2ec>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d125      	bne.n	80086c6 <UART_SetConfig+0x1c2>
 800867a:	4b5b      	ldr	r3, [pc, #364]	; (80087e8 <UART_SetConfig+0x2e4>)
 800867c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008680:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	d016      	beq.n	80086b6 <UART_SetConfig+0x1b2>
 8008688:	2b30      	cmp	r3, #48	; 0x30
 800868a:	d818      	bhi.n	80086be <UART_SetConfig+0x1ba>
 800868c:	2b20      	cmp	r3, #32
 800868e:	d00a      	beq.n	80086a6 <UART_SetConfig+0x1a2>
 8008690:	2b20      	cmp	r3, #32
 8008692:	d814      	bhi.n	80086be <UART_SetConfig+0x1ba>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <UART_SetConfig+0x19a>
 8008698:	2b10      	cmp	r3, #16
 800869a:	d008      	beq.n	80086ae <UART_SetConfig+0x1aa>
 800869c:	e00f      	b.n	80086be <UART_SetConfig+0x1ba>
 800869e:	2300      	movs	r3, #0
 80086a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a4:	e0ad      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086a6:	2302      	movs	r3, #2
 80086a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ac:	e0a9      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086ae:	2304      	movs	r3, #4
 80086b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b4:	e0a5      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086b6:	2308      	movs	r3, #8
 80086b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086bc:	e0a1      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086be:	2310      	movs	r3, #16
 80086c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c4:	e09d      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a4a      	ldr	r2, [pc, #296]	; (80087f4 <UART_SetConfig+0x2f0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d125      	bne.n	800871c <UART_SetConfig+0x218>
 80086d0:	4b45      	ldr	r3, [pc, #276]	; (80087e8 <UART_SetConfig+0x2e4>)
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086da:	2bc0      	cmp	r3, #192	; 0xc0
 80086dc:	d016      	beq.n	800870c <UART_SetConfig+0x208>
 80086de:	2bc0      	cmp	r3, #192	; 0xc0
 80086e0:	d818      	bhi.n	8008714 <UART_SetConfig+0x210>
 80086e2:	2b80      	cmp	r3, #128	; 0x80
 80086e4:	d00a      	beq.n	80086fc <UART_SetConfig+0x1f8>
 80086e6:	2b80      	cmp	r3, #128	; 0x80
 80086e8:	d814      	bhi.n	8008714 <UART_SetConfig+0x210>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <UART_SetConfig+0x1f0>
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d008      	beq.n	8008704 <UART_SetConfig+0x200>
 80086f2:	e00f      	b.n	8008714 <UART_SetConfig+0x210>
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086fa:	e082      	b.n	8008802 <UART_SetConfig+0x2fe>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008702:	e07e      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e07a      	b.n	8008802 <UART_SetConfig+0x2fe>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e076      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e072      	b.n	8008802 <UART_SetConfig+0x2fe>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a35      	ldr	r2, [pc, #212]	; (80087f8 <UART_SetConfig+0x2f4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d12a      	bne.n	800877c <UART_SetConfig+0x278>
 8008726:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <UART_SetConfig+0x2e4>)
 8008728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008734:	d01a      	beq.n	800876c <UART_SetConfig+0x268>
 8008736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873a:	d81b      	bhi.n	8008774 <UART_SetConfig+0x270>
 800873c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008740:	d00c      	beq.n	800875c <UART_SetConfig+0x258>
 8008742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008746:	d815      	bhi.n	8008774 <UART_SetConfig+0x270>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <UART_SetConfig+0x250>
 800874c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008750:	d008      	beq.n	8008764 <UART_SetConfig+0x260>
 8008752:	e00f      	b.n	8008774 <UART_SetConfig+0x270>
 8008754:	2300      	movs	r3, #0
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800875a:	e052      	b.n	8008802 <UART_SetConfig+0x2fe>
 800875c:	2302      	movs	r3, #2
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008762:	e04e      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008764:	2304      	movs	r3, #4
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876a:	e04a      	b.n	8008802 <UART_SetConfig+0x2fe>
 800876c:	2308      	movs	r3, #8
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e046      	b.n	8008802 <UART_SetConfig+0x2fe>
 8008774:	2310      	movs	r3, #16
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e042      	b.n	8008802 <UART_SetConfig+0x2fe>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <UART_SetConfig+0x2dc>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d13a      	bne.n	80087fc <UART_SetConfig+0x2f8>
 8008786:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <UART_SetConfig+0x2e4>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008790:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008794:	d01a      	beq.n	80087cc <UART_SetConfig+0x2c8>
 8008796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800879a:	d81b      	bhi.n	80087d4 <UART_SetConfig+0x2d0>
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a0:	d00c      	beq.n	80087bc <UART_SetConfig+0x2b8>
 80087a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a6:	d815      	bhi.n	80087d4 <UART_SetConfig+0x2d0>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <UART_SetConfig+0x2b0>
 80087ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b0:	d008      	beq.n	80087c4 <UART_SetConfig+0x2c0>
 80087b2:	e00f      	b.n	80087d4 <UART_SetConfig+0x2d0>
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e022      	b.n	8008802 <UART_SetConfig+0x2fe>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c2:	e01e      	b.n	8008802 <UART_SetConfig+0x2fe>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ca:	e01a      	b.n	8008802 <UART_SetConfig+0x2fe>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d2:	e016      	b.n	8008802 <UART_SetConfig+0x2fe>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087da:	e012      	b.n	8008802 <UART_SetConfig+0x2fe>
 80087dc:	cfff69f3 	.word	0xcfff69f3
 80087e0:	40008000 	.word	0x40008000
 80087e4:	40013800 	.word	0x40013800
 80087e8:	40021000 	.word	0x40021000
 80087ec:	40004400 	.word	0x40004400
 80087f0:	40004800 	.word	0x40004800
 80087f4:	40004c00 	.word	0x40004c00
 80087f8:	40005000 	.word	0x40005000
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4aae      	ldr	r2, [pc, #696]	; (8008ac0 <UART_SetConfig+0x5bc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	f040 8097 	bne.w	800893c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800880e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008812:	2b08      	cmp	r3, #8
 8008814:	d823      	bhi.n	800885e <UART_SetConfig+0x35a>
 8008816:	a201      	add	r2, pc, #4	; (adr r2, 800881c <UART_SetConfig+0x318>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008841 	.word	0x08008841
 8008820:	0800885f 	.word	0x0800885f
 8008824:	08008849 	.word	0x08008849
 8008828:	0800885f 	.word	0x0800885f
 800882c:	0800884f 	.word	0x0800884f
 8008830:	0800885f 	.word	0x0800885f
 8008834:	0800885f 	.word	0x0800885f
 8008838:	0800885f 	.word	0x0800885f
 800883c:	08008857 	.word	0x08008857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008840:	f7fc fd90 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8008844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008846:	e010      	b.n	800886a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008848:	4b9e      	ldr	r3, [pc, #632]	; (8008ac4 <UART_SetConfig+0x5c0>)
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800884c:	e00d      	b.n	800886a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884e:	f7fc fd1b 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8008852:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008854:	e009      	b.n	800886a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800885c:	e005      	b.n	800886a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8130 	beq.w	8008ad2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	4a94      	ldr	r2, [pc, #592]	; (8008ac8 <UART_SetConfig+0x5c4>)
 8008878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800887c:	461a      	mov	r2, r3
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	fbb3 f3f2 	udiv	r3, r3, r2
 8008884:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	4413      	add	r3, r2
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	429a      	cmp	r2, r3
 8008894:	d305      	bcc.n	80088a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d903      	bls.n	80088aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088a8:	e113      	b.n	8008ad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	2200      	movs	r2, #0
 80088ae:	60bb      	str	r3, [r7, #8]
 80088b0:	60fa      	str	r2, [r7, #12]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	4a84      	ldr	r2, [pc, #528]	; (8008ac8 <UART_SetConfig+0x5c4>)
 80088b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2200      	movs	r2, #0
 80088c0:	603b      	str	r3, [r7, #0]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088cc:	f7f8 f9f4 	bl	8000cb8 <__aeabi_uldivmod>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 0300 	mov.w	r3, #0
 80088e0:	020b      	lsls	r3, r1, #8
 80088e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088e6:	0202      	lsls	r2, r0, #8
 80088e8:	6979      	ldr	r1, [r7, #20]
 80088ea:	6849      	ldr	r1, [r1, #4]
 80088ec:	0849      	lsrs	r1, r1, #1
 80088ee:	2000      	movs	r0, #0
 80088f0:	460c      	mov	r4, r1
 80088f2:	4605      	mov	r5, r0
 80088f4:	eb12 0804 	adds.w	r8, r2, r4
 80088f8:	eb43 0905 	adc.w	r9, r3, r5
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	469a      	mov	sl, r3
 8008904:	4693      	mov	fp, r2
 8008906:	4652      	mov	r2, sl
 8008908:	465b      	mov	r3, fp
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f8 f9d3 	bl	8000cb8 <__aeabi_uldivmod>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4613      	mov	r3, r2
 8008918:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008920:	d308      	bcc.n	8008934 <UART_SetConfig+0x430>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008928:	d204      	bcs.n	8008934 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a3a      	ldr	r2, [r7, #32]
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	e0ce      	b.n	8008ad2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800893a:	e0ca      	b.n	8008ad2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008944:	d166      	bne.n	8008a14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800894a:	2b08      	cmp	r3, #8
 800894c:	d827      	bhi.n	800899e <UART_SetConfig+0x49a>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x450>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	0800899f 	.word	0x0800899f
 8008964:	0800898f 	.word	0x0800898f
 8008968:	0800899f 	.word	0x0800899f
 800896c:	0800899f 	.word	0x0800899f
 8008970:	0800899f 	.word	0x0800899f
 8008974:	08008997 	.word	0x08008997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008978:	f7fc fcf4 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 800897c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800897e:	e014      	b.n	80089aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008980:	f7fc fd06 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8008984:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008986:	e010      	b.n	80089aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008988:	4b4e      	ldr	r3, [pc, #312]	; (8008ac4 <UART_SetConfig+0x5c0>)
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800898c:	e00d      	b.n	80089aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898e:	f7fc fc7b 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8008992:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008994:	e009      	b.n	80089aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800899c:	e005      	b.n	80089aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8090 	beq.w	8008ad2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	4a44      	ldr	r2, [pc, #272]	; (8008ac8 <UART_SetConfig+0x5c4>)
 80089b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089bc:	461a      	mov	r2, r3
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c4:	005a      	lsls	r2, r3, #1
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	441a      	add	r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	d916      	bls.n	8008a0c <UART_SetConfig+0x508>
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d212      	bcs.n	8008a0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f023 030f 	bic.w	r3, r3, #15
 80089ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	8bfb      	ldrh	r3, [r7, #30]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	8bfa      	ldrh	r2, [r7, #30]
 8008a08:	60da      	str	r2, [r3, #12]
 8008a0a:	e062      	b.n	8008ad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a12:	e05e      	b.n	8008ad2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d828      	bhi.n	8008a6e <UART_SetConfig+0x56a>
 8008a1c:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <UART_SetConfig+0x520>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	08008a6f 	.word	0x08008a6f
 8008a34:	08008a5f 	.word	0x08008a5f
 8008a38:	08008a6f 	.word	0x08008a6f
 8008a3c:	08008a6f 	.word	0x08008a6f
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a67 	.word	0x08008a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a48:	f7fc fc8c 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8008a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a4e:	e014      	b.n	8008a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a50:	f7fc fc9e 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8008a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a56:	e010      	b.n	8008a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <UART_SetConfig+0x5c0>)
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a5c:	e00d      	b.n	8008a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7fc fc13 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8008a62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a78:	bf00      	nop
    }

    if (pclk != 0U)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d028      	beq.n	8008ad2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	4a10      	ldr	r2, [pc, #64]	; (8008ac8 <UART_SetConfig+0x5c4>)
 8008a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	441a      	add	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d910      	bls.n	8008acc <UART_SetConfig+0x5c8>
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab0:	d20c      	bcs.n	8008acc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60da      	str	r2, [r3, #12]
 8008abc:	e009      	b.n	8008ad2 <UART_SetConfig+0x5ce>
 8008abe:	bf00      	nop
 8008ac0:	40008000 	.word	0x40008000
 8008ac4:	00f42400 	.word	0x00f42400
 8008ac8:	0800cdec 	.word	0x0800cdec
      }
      else
      {
        ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2200      	movs	r2, #0
 8008aec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008aee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3730      	adds	r7, #48	; 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01a      	beq.n	8008c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfa:	d10a      	bne.n	8008c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	605a      	str	r2, [r3, #4]
  }
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c50:	f7f9 fa7c 	bl	800214c <HAL_GetTick>
 8008c54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d10e      	bne.n	8008c82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f82f 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e025      	b.n	8008cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d10e      	bne.n	8008cae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f819 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e00f      	b.n	8008cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b09c      	sub	sp, #112	; 0x70
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	e0a9      	b.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	f000 80a5 	beq.w	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7f9 fa2b 	bl	800214c <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d140      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e6      	bne.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	663b      	str	r3, [r7, #96]	; 0x60
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e069      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d051      	beq.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da6:	d149      	bne.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	613b      	str	r3, [r7, #16]
   return(result);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3308      	adds	r3, #8
 8008e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e04:	623a      	str	r2, [r7, #32]
 8008e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e010      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69da      	ldr	r2, [r3, #28]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4013      	ands	r3, r2
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	f43f af46 	beq.w	8008ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3770      	adds	r7, #112	; 0x70
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b0a3      	sub	sp, #140	; 0x8c
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	88fa      	ldrh	r2, [r7, #6]
 8008e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9a:	d10e      	bne.n	8008eba <UART_Start_Receive_IT+0x52>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <UART_Start_Receive_IT+0x48>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eae:	e02d      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	22ff      	movs	r2, #255	; 0xff
 8008eb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eb8:	e028      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <UART_Start_Receive_IT+0x76>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <UART_Start_Receive_IT+0x6c>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	22ff      	movs	r2, #255	; 0xff
 8008ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ed2:	e01b      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	227f      	movs	r2, #127	; 0x7f
 8008ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008edc:	e016      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee6:	d10d      	bne.n	8008f04 <UART_Start_Receive_IT+0x9c>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <UART_Start_Receive_IT+0x92>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	227f      	movs	r2, #127	; 0x7f
 8008ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ef8:	e008      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	223f      	movs	r2, #63	; 0x3f
 8008efe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f02:	e003      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2222      	movs	r2, #34	; 0x22
 8008f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008f40:	673a      	str	r2, [r7, #112]	; 0x70
 8008f42:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008f46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e3      	bne.n	8008f1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5c:	d153      	bne.n	8009006 <UART_Start_Receive_IT+0x19e>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d34d      	bcc.n	8009006 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f72:	d107      	bne.n	8008f84 <UART_Start_Receive_IT+0x11c>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4a4b      	ldr	r2, [pc, #300]	; (80090ac <UART_Start_Receive_IT+0x244>)
 8008f80:	671a      	str	r2, [r3, #112]	; 0x70
 8008f82:	e002      	b.n	8008f8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a4a      	ldr	r2, [pc, #296]	; (80090b0 <UART_Start_Receive_IT+0x248>)
 8008f88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01a      	beq.n	8008fd0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fbe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e4      	bne.n	8008f9a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3308      	adds	r3, #8
 8008fee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ff0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ff2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e5      	bne.n	8008fd0 <UART_Start_Receive_IT+0x168>
 8009004:	e04a      	b.n	800909c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900e:	d107      	bne.n	8009020 <UART_Start_Receive_IT+0x1b8>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d103      	bne.n	8009020 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <UART_Start_Receive_IT+0x24c>)
 800901c:	671a      	str	r2, [r3, #112]	; 0x70
 800901e:	e002      	b.n	8009026 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <UART_Start_Receive_IT+0x250>)
 8009024:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d019      	beq.n	800906a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800904a:	677b      	str	r3, [r7, #116]	; 0x74
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009054:	637b      	str	r3, [r7, #52]	; 0x34
 8009056:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800905a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <UART_Start_Receive_IT+0x1ce>
 8009068:	e018      	b.n	800909c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	613b      	str	r3, [r7, #16]
   return(result);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f043 0320 	orr.w	r3, r3, #32
 800907e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009088:	623b      	str	r3, [r7, #32]
 800908a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	61bb      	str	r3, [r7, #24]
   return(result);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	378c      	adds	r7, #140	; 0x8c
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	080097c5 	.word	0x080097c5
 80090b0:	080094cd 	.word	0x080094cd
 80090b4:	0800936b 	.word	0x0800936b
 80090b8:	0800920b 	.word	0x0800920b

080090bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b095      	sub	sp, #84	; 0x54
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e2:	643b      	str	r3, [r7, #64]	; 0x40
 80090e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e6      	bne.n	80090c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	61fb      	str	r3, [r7, #28]
   return(result);
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	64bb      	str	r3, [r7, #72]	; 0x48
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e3      	bne.n	80090f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009132:	2b01      	cmp	r3, #1
 8009134:	d118      	bne.n	8009168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	60bb      	str	r3, [r7, #8]
   return(result);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	647b      	str	r3, [r7, #68]	; 0x44
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e6      	bne.n	8009136 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2220      	movs	r2, #32
 800916c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800917c:	bf00      	nop
 800917e:	3754      	adds	r7, #84	; 0x54
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff f996 	bl	80084d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6979      	ldr	r1, [r7, #20]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	613b      	str	r3, [r7, #16]
   return(result);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff f961 	bl	80084c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009202:	bf00      	nop
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b096      	sub	sp, #88	; 0x58
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009218:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009222:	2b22      	cmp	r3, #34	; 0x22
 8009224:	f040 8095 	bne.w	8009352 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009232:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009236:	b2d9      	uxtb	r1, r3
 8009238:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800923c:	b2da      	uxtb	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009242:	400a      	ands	r2, r1
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d178      	bne.n	8009362 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009284:	653b      	str	r3, [r7, #80]	; 0x50
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800928e:	647b      	str	r3, [r7, #68]	; 0x44
 8009290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e6      	bne.n	8009270 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	623b      	str	r3, [r7, #32]
   return(result);
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f023 0301 	bic.w	r3, r3, #1
 80092b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092c2:	633a      	str	r2, [r7, #48]	; 0x30
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e5      	bne.n	80092a2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d12e      	bne.n	800934a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0310 	bic.w	r3, r3, #16
 8009306:	64bb      	str	r3, [r7, #72]	; 0x48
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	69b9      	ldr	r1, [r7, #24]
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	617b      	str	r3, [r7, #20]
   return(result);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f003 0310 	and.w	r3, r3, #16
 800932e:	2b10      	cmp	r3, #16
 8009330:	d103      	bne.n	800933a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2210      	movs	r2, #16
 8009338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff f8d2 	bl	80084ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009348:	e00b      	b.n	8009362 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7f8 fa68 	bl	8001820 <HAL_UART_RxCpltCallback>
}
 8009350:	e007      	b.n	8009362 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0208 	orr.w	r2, r2, #8
 8009360:	619a      	str	r2, [r3, #24]
}
 8009362:	bf00      	nop
 8009364:	3758      	adds	r7, #88	; 0x58
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b096      	sub	sp, #88	; 0x58
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009378:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009382:	2b22      	cmp	r3, #34	; 0x22
 8009384:	f040 8095 	bne.w	80094b2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009398:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800939c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093a0:	4013      	ands	r3, r2
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	1c9a      	adds	r2, r3, #2
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d178      	bne.n	80094c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ee:	643b      	str	r3, [r7, #64]	; 0x40
 80093f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e6      	bne.n	80093d0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	61fb      	str	r3, [r7, #28]
   return(result);
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	64bb      	str	r3, [r7, #72]	; 0x48
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e5      	bne.n	8009402 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009448:	2b01      	cmp	r3, #1
 800944a:	d12e      	bne.n	80094aa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f023 0310 	bic.w	r3, r3, #16
 8009466:	647b      	str	r3, [r7, #68]	; 0x44
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	61bb      	str	r3, [r7, #24]
 8009472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6979      	ldr	r1, [r7, #20]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	613b      	str	r3, [r7, #16]
   return(result);
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e6      	bne.n	8009452 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b10      	cmp	r3, #16
 8009490:	d103      	bne.n	800949a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2210      	movs	r2, #16
 8009498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff f822 	bl	80084ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094a8:	e00b      	b.n	80094c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7f8 f9b8 	bl	8001820 <HAL_UART_RxCpltCallback>
}
 80094b0:	e007      	b.n	80094c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0208 	orr.w	r2, r2, #8
 80094c0:	619a      	str	r2, [r3, #24]
}
 80094c2:	bf00      	nop
 80094c4:	3758      	adds	r7, #88	; 0x58
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b0a6      	sub	sp, #152	; 0x98
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009502:	2b22      	cmp	r3, #34	; 0x22
 8009504:	f040 814f 	bne.w	80097a6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800950e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009512:	e0f6      	b.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800951e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009522:	b2d9      	uxtb	r1, r3
 8009524:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009528:	b2da      	uxtb	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	400a      	ands	r2, r1
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800955a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	2b00      	cmp	r3, #0
 8009564:	d053      	beq.n	800960e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d011      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2201      	movs	r2, #1
 8009584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800958c:	f043 0201 	orr.w	r2, r3, #1
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d011      	beq.n	80095c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80095a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2202      	movs	r2, #2
 80095b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095bc:	f043 0204 	orr.w	r2, r3, #4
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d011      	beq.n	80095f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80095d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00b      	beq.n	80095f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2204      	movs	r2, #4
 80095e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ec:	f043 0202 	orr.w	r2, r3, #2
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d006      	beq.n	800960e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fe ff69 	bl	80084d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d173      	bne.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800962a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800962e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800963c:	66bb      	str	r3, [r7, #104]	; 0x68
 800963e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009642:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800964a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e4      	bne.n	800961a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3308      	adds	r3, #8
 8009656:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800965a:	e853 3f00 	ldrex	r3, [r3]
 800965e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009666:	f023 0301 	bic.w	r3, r3, #1
 800966a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009674:	657a      	str	r2, [r7, #84]	; 0x54
 8009676:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800967a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e3      	bne.n	8009650 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d12e      	bne.n	80096fc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f023 0310 	bic.w	r3, r3, #16
 80096b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096c2:	643b      	str	r3, [r7, #64]	; 0x40
 80096c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e6      	bne.n	80096a4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d103      	bne.n	80096ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2210      	movs	r2, #16
 80096ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fe fef9 	bl	80084ec <HAL_UARTEx_RxEventCallback>
 80096fa:	e002      	b.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7f8 f88f 	bl	8001820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009702:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009706:	2b00      	cmp	r3, #0
 8009708:	d006      	beq.n	8009718 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800970a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f aefe 	bne.w	8009514 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800971e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009722:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009726:	2b00      	cmp	r3, #0
 8009728:	d045      	beq.n	80097b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009734:	429a      	cmp	r2, r3
 8009736:	d23e      	bcs.n	80097b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3308      	adds	r3, #8
 800973e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	61fb      	str	r3, [r7, #28]
   return(result);
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974e:	673b      	str	r3, [r7, #112]	; 0x70
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800975a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800975e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009760:	e841 2300 	strex	r3, r2, [r1]
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e5      	bne.n	8009738 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a14      	ldr	r2, [pc, #80]	; (80097c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009770:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f043 0320 	orr.w	r3, r3, #32
 8009786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6979      	ldr	r1, [r7, #20]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	613b      	str	r3, [r7, #16]
   return(result);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097a4:	e007      	b.n	80097b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0208 	orr.w	r2, r2, #8
 80097b4:	619a      	str	r2, [r3, #24]
}
 80097b6:	bf00      	nop
 80097b8:	3798      	adds	r7, #152	; 0x98
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	0800920b 	.word	0x0800920b

080097c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b0a8      	sub	sp, #160	; 0xa0
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	2b22      	cmp	r3, #34	; 0x22
 80097fc:	f040 8153 	bne.w	8009aa6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009806:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800980a:	e0fa      	b.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800981e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009822:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009826:	4013      	ands	r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800982e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009834:	1c9a      	adds	r2, r3, #2
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	b29a      	uxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009856:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	2b00      	cmp	r3, #0
 8009860:	d053      	beq.n	800990a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d011      	beq.n	8009892 <UART_RxISR_16BIT_FIFOEN+0xce>
 800986e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009888:	f043 0201 	orr.w	r2, r3, #1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d011      	beq.n	80098c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800989e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2202      	movs	r2, #2
 80098b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b8:	f043 0204 	orr.w	r2, r3, #4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d011      	beq.n	80098f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2204      	movs	r2, #4
 80098e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e8:	f043 0202 	orr.w	r2, r3, #2
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d006      	beq.n	800990a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fe fdeb 	bl	80084d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d175      	bne.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800992a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800993a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800993e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e4      	bne.n	8009916 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800995c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009962:	f023 0301 	bic.w	r3, r3, #1
 8009966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009974:	65ba      	str	r2, [r7, #88]	; 0x58
 8009976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800997a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e1      	bne.n	800994c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d12e      	bne.n	80099fc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	f023 0310 	bic.w	r3, r3, #16
 80099b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099c2:	647b      	str	r3, [r7, #68]	; 0x44
 80099c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e6      	bne.n	80099a4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d103      	bne.n	80099ec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2210      	movs	r2, #16
 80099ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe fd79 	bl	80084ec <HAL_UARTEx_RxEventCallback>
 80099fa:	e002      	b.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7f7 ff0f 	bl	8001820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f47f aefa 	bne.w	800980c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a1e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d045      	beq.n	8009ab6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a30:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d23e      	bcs.n	8009ab6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	623b      	str	r3, [r7, #32]
   return(result);
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a58:	633a      	str	r2, [r7, #48]	; 0x30
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e5      	bne.n	8009a38 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a14      	ldr	r2, [pc, #80]	; (8009ac0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009a70:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f043 0320 	orr.w	r3, r3, #32
 8009a86:	673b      	str	r3, [r7, #112]	; 0x70
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	69b9      	ldr	r1, [r7, #24]
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e6      	bne.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009aa4:	e007      	b.n	8009ab6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0208 	orr.w	r2, r2, #8
 8009ab4:	619a      	str	r2, [r3, #24]
}
 8009ab6:	bf00      	nop
 8009ab8:	37a0      	adds	r7, #160	; 0xa0
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800936b 	.word	0x0800936b

08009ac4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e027      	b.n	8009b66 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2224      	movs	r2, #36	; 0x24
 8009b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e02d      	b.n	8009be6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2224      	movs	r2, #36	; 0x24
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0201 	bic.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f850 	bl	8009c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e02d      	b.n	8009c62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	; 0x24
 8009c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f812 	bl	8009c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c8c:	e031      	b.n	8009cf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c8e:	2308      	movs	r3, #8
 8009c90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c92:	2308      	movs	r3, #8
 8009c94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	0e5b      	lsrs	r3, r3, #25
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f003 0307 	and.w	r3, r3, #7
 8009ca4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	0f5b      	lsrs	r3, r3, #29
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	7b3a      	ldrb	r2, [r7, #12]
 8009cba:	4911      	ldr	r1, [pc, #68]	; (8009d00 <UARTEx_SetNbDataToProcess+0x94>)
 8009cbc:	5c8a      	ldrb	r2, [r1, r2]
 8009cbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cc2:	7b3a      	ldrb	r2, [r7, #12]
 8009cc4:	490f      	ldr	r1, [pc, #60]	; (8009d04 <UARTEx_SetNbDataToProcess+0x98>)
 8009cc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	7b7a      	ldrb	r2, [r7, #13]
 8009cd8:	4909      	ldr	r1, [pc, #36]	; (8009d00 <UARTEx_SetNbDataToProcess+0x94>)
 8009cda:	5c8a      	ldrb	r2, [r1, r2]
 8009cdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ce0:	7b7a      	ldrb	r2, [r7, #13]
 8009ce2:	4908      	ldr	r1, [pc, #32]	; (8009d04 <UARTEx_SetNbDataToProcess+0x98>)
 8009ce4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ce6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	0800ce04 	.word	0x0800ce04
 8009d04:	0800ce0c 	.word	0x0800ce0c

08009d08 <atoi>:
 8009d08:	220a      	movs	r2, #10
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	f000 bd9a 	b.w	800a844 <strtol>

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	; (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000208 	.word	0x20000208

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4d0d      	ldr	r5, [pc, #52]	; (8009d54 <__libc_init_array+0x38>)
 8009d20:	4c0d      	ldr	r4, [pc, #52]	; (8009d58 <__libc_init_array+0x3c>)
 8009d22:	1b64      	subs	r4, r4, r5
 8009d24:	10a4      	asrs	r4, r4, #2
 8009d26:	2600      	movs	r6, #0
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	4d0b      	ldr	r5, [pc, #44]	; (8009d5c <__libc_init_array+0x40>)
 8009d2e:	4c0c      	ldr	r4, [pc, #48]	; (8009d60 <__libc_init_array+0x44>)
 8009d30:	f002 ffec 	bl	800cd0c <_init>
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	2600      	movs	r6, #0
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800d25c 	.word	0x0800d25c
 8009d58:	0800d25c 	.word	0x0800d25c
 8009d5c:	0800d25c 	.word	0x0800d25c
 8009d60:	0800d260 	.word	0x0800d260

08009d64 <memset>:
 8009d64:	4402      	add	r2, r0
 8009d66:	4603      	mov	r3, r0
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d100      	bne.n	8009d6e <memset+0xa>
 8009d6c:	4770      	bx	lr
 8009d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d72:	e7f9      	b.n	8009d68 <memset+0x4>

08009d74 <__cvt>:
 8009d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	ec55 4b10 	vmov	r4, r5, d0
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	460e      	mov	r6, r1
 8009d80:	4619      	mov	r1, r3
 8009d82:	462b      	mov	r3, r5
 8009d84:	bfbb      	ittet	lt
 8009d86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d8a:	461d      	movlt	r5, r3
 8009d8c:	2300      	movge	r3, #0
 8009d8e:	232d      	movlt	r3, #45	; 0x2d
 8009d90:	700b      	strb	r3, [r1, #0]
 8009d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d98:	4691      	mov	r9, r2
 8009d9a:	f023 0820 	bic.w	r8, r3, #32
 8009d9e:	bfbc      	itt	lt
 8009da0:	4622      	movlt	r2, r4
 8009da2:	4614      	movlt	r4, r2
 8009da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009da8:	d005      	beq.n	8009db6 <__cvt+0x42>
 8009daa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dae:	d100      	bne.n	8009db2 <__cvt+0x3e>
 8009db0:	3601      	adds	r6, #1
 8009db2:	2102      	movs	r1, #2
 8009db4:	e000      	b.n	8009db8 <__cvt+0x44>
 8009db6:	2103      	movs	r1, #3
 8009db8:	ab03      	add	r3, sp, #12
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	ab02      	add	r3, sp, #8
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	ec45 4b10 	vmov	d0, r4, r5
 8009dc4:	4653      	mov	r3, sl
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	f000 fdf2 	bl	800a9b0 <_dtoa_r>
 8009dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	d102      	bne.n	8009dda <__cvt+0x66>
 8009dd4:	f019 0f01 	tst.w	r9, #1
 8009dd8:	d022      	beq.n	8009e20 <__cvt+0xac>
 8009dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dde:	eb07 0906 	add.w	r9, r7, r6
 8009de2:	d110      	bne.n	8009e06 <__cvt+0x92>
 8009de4:	783b      	ldrb	r3, [r7, #0]
 8009de6:	2b30      	cmp	r3, #48	; 0x30
 8009de8:	d10a      	bne.n	8009e00 <__cvt+0x8c>
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fea1 	bl	8000b38 <__aeabi_dcmpeq>
 8009df6:	b918      	cbnz	r0, 8009e00 <__cvt+0x8c>
 8009df8:	f1c6 0601 	rsb	r6, r6, #1
 8009dfc:	f8ca 6000 	str.w	r6, [sl]
 8009e00:	f8da 3000 	ldr.w	r3, [sl]
 8009e04:	4499      	add	r9, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fe93 	bl	8000b38 <__aeabi_dcmpeq>
 8009e12:	b108      	cbz	r0, 8009e18 <__cvt+0xa4>
 8009e14:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e18:	2230      	movs	r2, #48	; 0x30
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	454b      	cmp	r3, r9
 8009e1e:	d307      	bcc.n	8009e30 <__cvt+0xbc>
 8009e20:	9b03      	ldr	r3, [sp, #12]
 8009e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e24:	1bdb      	subs	r3, r3, r7
 8009e26:	4638      	mov	r0, r7
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	b004      	add	sp, #16
 8009e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e30:	1c59      	adds	r1, r3, #1
 8009e32:	9103      	str	r1, [sp, #12]
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e7f0      	b.n	8009e1a <__cvt+0xa6>

08009e38 <__exponent>:
 8009e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	bfb8      	it	lt
 8009e40:	4249      	neglt	r1, r1
 8009e42:	f803 2b02 	strb.w	r2, [r3], #2
 8009e46:	bfb4      	ite	lt
 8009e48:	222d      	movlt	r2, #45	; 0x2d
 8009e4a:	222b      	movge	r2, #43	; 0x2b
 8009e4c:	2909      	cmp	r1, #9
 8009e4e:	7042      	strb	r2, [r0, #1]
 8009e50:	dd2a      	ble.n	8009ea8 <__exponent+0x70>
 8009e52:	f10d 0407 	add.w	r4, sp, #7
 8009e56:	46a4      	mov	ip, r4
 8009e58:	270a      	movs	r7, #10
 8009e5a:	46a6      	mov	lr, r4
 8009e5c:	460a      	mov	r2, r1
 8009e5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e62:	fb07 1516 	mls	r5, r7, r6, r1
 8009e66:	3530      	adds	r5, #48	; 0x30
 8009e68:	2a63      	cmp	r2, #99	; 0x63
 8009e6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e72:	4631      	mov	r1, r6
 8009e74:	dcf1      	bgt.n	8009e5a <__exponent+0x22>
 8009e76:	3130      	adds	r1, #48	; 0x30
 8009e78:	f1ae 0502 	sub.w	r5, lr, #2
 8009e7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e80:	1c44      	adds	r4, r0, #1
 8009e82:	4629      	mov	r1, r5
 8009e84:	4561      	cmp	r1, ip
 8009e86:	d30a      	bcc.n	8009e9e <__exponent+0x66>
 8009e88:	f10d 0209 	add.w	r2, sp, #9
 8009e8c:	eba2 020e 	sub.w	r2, r2, lr
 8009e90:	4565      	cmp	r5, ip
 8009e92:	bf88      	it	hi
 8009e94:	2200      	movhi	r2, #0
 8009e96:	4413      	add	r3, r2
 8009e98:	1a18      	subs	r0, r3, r0
 8009e9a:	b003      	add	sp, #12
 8009e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ea2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ea6:	e7ed      	b.n	8009e84 <__exponent+0x4c>
 8009ea8:	2330      	movs	r3, #48	; 0x30
 8009eaa:	3130      	adds	r1, #48	; 0x30
 8009eac:	7083      	strb	r3, [r0, #2]
 8009eae:	70c1      	strb	r1, [r0, #3]
 8009eb0:	1d03      	adds	r3, r0, #4
 8009eb2:	e7f1      	b.n	8009e98 <__exponent+0x60>

08009eb4 <_printf_float>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	ed2d 8b02 	vpush	{d8}
 8009ebc:	b08d      	sub	sp, #52	; 0x34
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	461f      	mov	r7, r3
 8009ec8:	4605      	mov	r5, r0
 8009eca:	f001 fb71 	bl	800b5b0 <_localeconv_r>
 8009ece:	f8d0 a000 	ldr.w	sl, [r0]
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	f7f6 f9ae 	bl	8000234 <strlen>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	930a      	str	r3, [sp, #40]	; 0x28
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	f103 0208 	add.w	r2, r3, #8
 8009ef2:	f8c8 2000 	str.w	r2, [r8]
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009efe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f0c:	ee08 0a10 	vmov	s16, r0
 8009f10:	4b9f      	ldr	r3, [pc, #636]	; (800a190 <_printf_float+0x2dc>)
 8009f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f16:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1a:	f7f6 fe3f 	bl	8000b9c <__aeabi_dcmpun>
 8009f1e:	bb88      	cbnz	r0, 8009f84 <_printf_float+0xd0>
 8009f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f24:	4b9a      	ldr	r3, [pc, #616]	; (800a190 <_printf_float+0x2dc>)
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	f7f6 fe19 	bl	8000b60 <__aeabi_dcmple>
 8009f2e:	bb48      	cbnz	r0, 8009f84 <_printf_float+0xd0>
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 fe08 	bl	8000b4c <__aeabi_dcmplt>
 8009f3c:	b110      	cbz	r0, 8009f44 <_printf_float+0x90>
 8009f3e:	232d      	movs	r3, #45	; 0x2d
 8009f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f44:	4b93      	ldr	r3, [pc, #588]	; (800a194 <_printf_float+0x2e0>)
 8009f46:	4894      	ldr	r0, [pc, #592]	; (800a198 <_printf_float+0x2e4>)
 8009f48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f4c:	bf94      	ite	ls
 8009f4e:	4698      	movls	r8, r3
 8009f50:	4680      	movhi	r8, r0
 8009f52:	2303      	movs	r3, #3
 8009f54:	6123      	str	r3, [r4, #16]
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	f023 0204 	bic.w	r2, r3, #4
 8009f5c:	6022      	str	r2, [r4, #0]
 8009f5e:	f04f 0900 	mov.w	r9, #0
 8009f62:	9700      	str	r7, [sp, #0]
 8009f64:	4633      	mov	r3, r6
 8009f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f68:	4621      	mov	r1, r4
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 f9d8 	bl	800a320 <_printf_common>
 8009f70:	3001      	adds	r0, #1
 8009f72:	f040 8090 	bne.w	800a096 <_printf_float+0x1e2>
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	b00d      	add	sp, #52	; 0x34
 8009f7c:	ecbd 8b02 	vpop	{d8}
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	4642      	mov	r2, r8
 8009f86:	464b      	mov	r3, r9
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 fe06 	bl	8000b9c <__aeabi_dcmpun>
 8009f90:	b140      	cbz	r0, 8009fa4 <_printf_float+0xf0>
 8009f92:	464b      	mov	r3, r9
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfbc      	itt	lt
 8009f98:	232d      	movlt	r3, #45	; 0x2d
 8009f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f9e:	487f      	ldr	r0, [pc, #508]	; (800a19c <_printf_float+0x2e8>)
 8009fa0:	4b7f      	ldr	r3, [pc, #508]	; (800a1a0 <_printf_float+0x2ec>)
 8009fa2:	e7d1      	b.n	8009f48 <_printf_float+0x94>
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009faa:	9206      	str	r2, [sp, #24]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	d13f      	bne.n	800a030 <_printf_float+0x17c>
 8009fb0:	2306      	movs	r3, #6
 8009fb2:	6063      	str	r3, [r4, #4]
 8009fb4:	9b05      	ldr	r3, [sp, #20]
 8009fb6:	6861      	ldr	r1, [r4, #4]
 8009fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8009fc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fc6:	ab09      	add	r3, sp, #36	; 0x24
 8009fc8:	ec49 8b10 	vmov	d0, r8, r9
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	6022      	str	r2, [r4, #0]
 8009fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f7ff fecd 	bl	8009d74 <__cvt>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fde:	2b47      	cmp	r3, #71	; 0x47
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	d108      	bne.n	8009ff6 <_printf_float+0x142>
 8009fe4:	1cc8      	adds	r0, r1, #3
 8009fe6:	db02      	blt.n	8009fee <_printf_float+0x13a>
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	4299      	cmp	r1, r3
 8009fec:	dd41      	ble.n	800a072 <_printf_float+0x1be>
 8009fee:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ff2:	fa5f fb8b 	uxtb.w	fp, fp
 8009ff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ffa:	d820      	bhi.n	800a03e <_printf_float+0x18a>
 8009ffc:	3901      	subs	r1, #1
 8009ffe:	465a      	mov	r2, fp
 800a000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a004:	9109      	str	r1, [sp, #36]	; 0x24
 800a006:	f7ff ff17 	bl	8009e38 <__exponent>
 800a00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a00c:	1813      	adds	r3, r2, r0
 800a00e:	2a01      	cmp	r2, #1
 800a010:	4681      	mov	r9, r0
 800a012:	6123      	str	r3, [r4, #16]
 800a014:	dc02      	bgt.n	800a01c <_printf_float+0x168>
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	07d2      	lsls	r2, r2, #31
 800a01a:	d501      	bpl.n	800a020 <_printf_float+0x16c>
 800a01c:	3301      	adds	r3, #1
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a024:	2b00      	cmp	r3, #0
 800a026:	d09c      	beq.n	8009f62 <_printf_float+0xae>
 800a028:	232d      	movs	r3, #45	; 0x2d
 800a02a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02e:	e798      	b.n	8009f62 <_printf_float+0xae>
 800a030:	9a06      	ldr	r2, [sp, #24]
 800a032:	2a47      	cmp	r2, #71	; 0x47
 800a034:	d1be      	bne.n	8009fb4 <_printf_float+0x100>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1bc      	bne.n	8009fb4 <_printf_float+0x100>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e7b9      	b.n	8009fb2 <_printf_float+0xfe>
 800a03e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a042:	d118      	bne.n	800a076 <_printf_float+0x1c2>
 800a044:	2900      	cmp	r1, #0
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	dd0b      	ble.n	800a062 <_printf_float+0x1ae>
 800a04a:	6121      	str	r1, [r4, #16]
 800a04c:	b913      	cbnz	r3, 800a054 <_printf_float+0x1a0>
 800a04e:	6822      	ldr	r2, [r4, #0]
 800a050:	07d0      	lsls	r0, r2, #31
 800a052:	d502      	bpl.n	800a05a <_printf_float+0x1a6>
 800a054:	3301      	adds	r3, #1
 800a056:	440b      	add	r3, r1
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a05c:	f04f 0900 	mov.w	r9, #0
 800a060:	e7de      	b.n	800a020 <_printf_float+0x16c>
 800a062:	b913      	cbnz	r3, 800a06a <_printf_float+0x1b6>
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	07d2      	lsls	r2, r2, #31
 800a068:	d501      	bpl.n	800a06e <_printf_float+0x1ba>
 800a06a:	3302      	adds	r3, #2
 800a06c:	e7f4      	b.n	800a058 <_printf_float+0x1a4>
 800a06e:	2301      	movs	r3, #1
 800a070:	e7f2      	b.n	800a058 <_printf_float+0x1a4>
 800a072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	4299      	cmp	r1, r3
 800a07a:	db05      	blt.n	800a088 <_printf_float+0x1d4>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	6121      	str	r1, [r4, #16]
 800a080:	07d8      	lsls	r0, r3, #31
 800a082:	d5ea      	bpl.n	800a05a <_printf_float+0x1a6>
 800a084:	1c4b      	adds	r3, r1, #1
 800a086:	e7e7      	b.n	800a058 <_printf_float+0x1a4>
 800a088:	2900      	cmp	r1, #0
 800a08a:	bfd4      	ite	le
 800a08c:	f1c1 0202 	rsble	r2, r1, #2
 800a090:	2201      	movgt	r2, #1
 800a092:	4413      	add	r3, r2
 800a094:	e7e0      	b.n	800a058 <_printf_float+0x1a4>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	055a      	lsls	r2, r3, #21
 800a09a:	d407      	bmi.n	800a0ac <_printf_float+0x1f8>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	4642      	mov	r2, r8
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d12c      	bne.n	800a104 <_printf_float+0x250>
 800a0aa:	e764      	b.n	8009f76 <_printf_float+0xc2>
 800a0ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0b0:	f240 80e0 	bls.w	800a274 <_printf_float+0x3c0>
 800a0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f7f6 fd3c 	bl	8000b38 <__aeabi_dcmpeq>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d034      	beq.n	800a12e <_printf_float+0x27a>
 800a0c4:	4a37      	ldr	r2, [pc, #220]	; (800a1a4 <_printf_float+0x2f0>)
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f af51 	beq.w	8009f76 <_printf_float+0xc2>
 800a0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	db02      	blt.n	800a0e2 <_printf_float+0x22e>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07d8      	lsls	r0, r3, #31
 800a0e0:	d510      	bpl.n	800a104 <_printf_float+0x250>
 800a0e2:	ee18 3a10 	vmov	r3, s16
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f af41 	beq.w	8009f76 <_printf_float+0xc2>
 800a0f4:	f04f 0800 	mov.w	r8, #0
 800a0f8:	f104 091a 	add.w	r9, r4, #26
 800a0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fe:	3b01      	subs	r3, #1
 800a100:	4543      	cmp	r3, r8
 800a102:	dc09      	bgt.n	800a118 <_printf_float+0x264>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	079b      	lsls	r3, r3, #30
 800a108:	f100 8105 	bmi.w	800a316 <_printf_float+0x462>
 800a10c:	68e0      	ldr	r0, [r4, #12]
 800a10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a110:	4298      	cmp	r0, r3
 800a112:	bfb8      	it	lt
 800a114:	4618      	movlt	r0, r3
 800a116:	e730      	b.n	8009f7a <_printf_float+0xc6>
 800a118:	2301      	movs	r3, #1
 800a11a:	464a      	mov	r2, r9
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f af27 	beq.w	8009f76 <_printf_float+0xc2>
 800a128:	f108 0801 	add.w	r8, r8, #1
 800a12c:	e7e6      	b.n	800a0fc <_printf_float+0x248>
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc39      	bgt.n	800a1a8 <_printf_float+0x2f4>
 800a134:	4a1b      	ldr	r2, [pc, #108]	; (800a1a4 <_printf_float+0x2f0>)
 800a136:	2301      	movs	r3, #1
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af19 	beq.w	8009f76 <_printf_float+0xc2>
 800a144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a148:	4313      	orrs	r3, r2
 800a14a:	d102      	bne.n	800a152 <_printf_float+0x29e>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	07d9      	lsls	r1, r3, #31
 800a150:	d5d8      	bpl.n	800a104 <_printf_float+0x250>
 800a152:	ee18 3a10 	vmov	r3, s16
 800a156:	4652      	mov	r2, sl
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af09 	beq.w	8009f76 <_printf_float+0xc2>
 800a164:	f04f 0900 	mov.w	r9, #0
 800a168:	f104 0a1a 	add.w	sl, r4, #26
 800a16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16e:	425b      	negs	r3, r3
 800a170:	454b      	cmp	r3, r9
 800a172:	dc01      	bgt.n	800a178 <_printf_float+0x2c4>
 800a174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a176:	e792      	b.n	800a09e <_printf_float+0x1ea>
 800a178:	2301      	movs	r3, #1
 800a17a:	4652      	mov	r2, sl
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f aef7 	beq.w	8009f76 <_printf_float+0xc2>
 800a188:	f109 0901 	add.w	r9, r9, #1
 800a18c:	e7ee      	b.n	800a16c <_printf_float+0x2b8>
 800a18e:	bf00      	nop
 800a190:	7fefffff 	.word	0x7fefffff
 800a194:	0800ce18 	.word	0x0800ce18
 800a198:	0800ce1c 	.word	0x0800ce1c
 800a19c:	0800ce24 	.word	0x0800ce24
 800a1a0:	0800ce20 	.word	0x0800ce20
 800a1a4:	0800ce28 	.word	0x0800ce28
 800a1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	bfa8      	it	ge
 800a1b0:	461a      	movge	r2, r3
 800a1b2:	2a00      	cmp	r2, #0
 800a1b4:	4691      	mov	r9, r2
 800a1b6:	dc37      	bgt.n	800a228 <_printf_float+0x374>
 800a1b8:	f04f 0b00 	mov.w	fp, #0
 800a1bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1c0:	f104 021a 	add.w	r2, r4, #26
 800a1c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1c6:	9305      	str	r3, [sp, #20]
 800a1c8:	eba3 0309 	sub.w	r3, r3, r9
 800a1cc:	455b      	cmp	r3, fp
 800a1ce:	dc33      	bgt.n	800a238 <_printf_float+0x384>
 800a1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	db3b      	blt.n	800a250 <_printf_float+0x39c>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	07da      	lsls	r2, r3, #31
 800a1dc:	d438      	bmi.n	800a250 <_printf_float+0x39c>
 800a1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e0:	9a05      	ldr	r2, [sp, #20]
 800a1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e4:	1a9a      	subs	r2, r3, r2
 800a1e6:	eba3 0901 	sub.w	r9, r3, r1
 800a1ea:	4591      	cmp	r9, r2
 800a1ec:	bfa8      	it	ge
 800a1ee:	4691      	movge	r9, r2
 800a1f0:	f1b9 0f00 	cmp.w	r9, #0
 800a1f4:	dc35      	bgt.n	800a262 <_printf_float+0x3ae>
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1fe:	f104 0a1a 	add.w	sl, r4, #26
 800a202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	eba3 0309 	sub.w	r3, r3, r9
 800a20c:	4543      	cmp	r3, r8
 800a20e:	f77f af79 	ble.w	800a104 <_printf_float+0x250>
 800a212:	2301      	movs	r3, #1
 800a214:	4652      	mov	r2, sl
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f aeaa 	beq.w	8009f76 <_printf_float+0xc2>
 800a222:	f108 0801 	add.w	r8, r8, #1
 800a226:	e7ec      	b.n	800a202 <_printf_float+0x34e>
 800a228:	4613      	mov	r3, r2
 800a22a:	4631      	mov	r1, r6
 800a22c:	4642      	mov	r2, r8
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	d1c0      	bne.n	800a1b8 <_printf_float+0x304>
 800a236:	e69e      	b.n	8009f76 <_printf_float+0xc2>
 800a238:	2301      	movs	r3, #1
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	9205      	str	r2, [sp, #20]
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f ae97 	beq.w	8009f76 <_printf_float+0xc2>
 800a248:	9a05      	ldr	r2, [sp, #20]
 800a24a:	f10b 0b01 	add.w	fp, fp, #1
 800a24e:	e7b9      	b.n	800a1c4 <_printf_float+0x310>
 800a250:	ee18 3a10 	vmov	r3, s16
 800a254:	4652      	mov	r2, sl
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	d1be      	bne.n	800a1de <_printf_float+0x32a>
 800a260:	e689      	b.n	8009f76 <_printf_float+0xc2>
 800a262:	9a05      	ldr	r2, [sp, #20]
 800a264:	464b      	mov	r3, r9
 800a266:	4442      	add	r2, r8
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	d1c1      	bne.n	800a1f6 <_printf_float+0x342>
 800a272:	e680      	b.n	8009f76 <_printf_float+0xc2>
 800a274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a276:	2a01      	cmp	r2, #1
 800a278:	dc01      	bgt.n	800a27e <_printf_float+0x3ca>
 800a27a:	07db      	lsls	r3, r3, #31
 800a27c:	d538      	bpl.n	800a2f0 <_printf_float+0x43c>
 800a27e:	2301      	movs	r3, #1
 800a280:	4642      	mov	r2, r8
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f ae74 	beq.w	8009f76 <_printf_float+0xc2>
 800a28e:	ee18 3a10 	vmov	r3, s16
 800a292:	4652      	mov	r2, sl
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f ae6b 	beq.w	8009f76 <_printf_float+0xc2>
 800a2a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f7f6 fc46 	bl	8000b38 <__aeabi_dcmpeq>
 800a2ac:	b9d8      	cbnz	r0, 800a2e6 <_printf_float+0x432>
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	f108 0201 	add.w	r2, r8, #1
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d10e      	bne.n	800a2de <_printf_float+0x42a>
 800a2c0:	e659      	b.n	8009f76 <_printf_float+0xc2>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	f43f ae52 	beq.w	8009f76 <_printf_float+0xc2>
 800a2d2:	f108 0801 	add.w	r8, r8, #1
 800a2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	4543      	cmp	r3, r8
 800a2dc:	dcf1      	bgt.n	800a2c2 <_printf_float+0x40e>
 800a2de:	464b      	mov	r3, r9
 800a2e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2e4:	e6dc      	b.n	800a0a0 <_printf_float+0x1ec>
 800a2e6:	f04f 0800 	mov.w	r8, #0
 800a2ea:	f104 0a1a 	add.w	sl, r4, #26
 800a2ee:	e7f2      	b.n	800a2d6 <_printf_float+0x422>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4642      	mov	r2, r8
 800a2f4:	e7df      	b.n	800a2b6 <_printf_float+0x402>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	464a      	mov	r2, r9
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	47b8      	blx	r7
 800a300:	3001      	adds	r0, #1
 800a302:	f43f ae38 	beq.w	8009f76 <_printf_float+0xc2>
 800a306:	f108 0801 	add.w	r8, r8, #1
 800a30a:	68e3      	ldr	r3, [r4, #12]
 800a30c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a30e:	1a5b      	subs	r3, r3, r1
 800a310:	4543      	cmp	r3, r8
 800a312:	dcf0      	bgt.n	800a2f6 <_printf_float+0x442>
 800a314:	e6fa      	b.n	800a10c <_printf_float+0x258>
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	f104 0919 	add.w	r9, r4, #25
 800a31e:	e7f4      	b.n	800a30a <_printf_float+0x456>

0800a320 <_printf_common>:
 800a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	4616      	mov	r6, r2
 800a326:	4699      	mov	r9, r3
 800a328:	688a      	ldr	r2, [r1, #8]
 800a32a:	690b      	ldr	r3, [r1, #16]
 800a32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a330:	4293      	cmp	r3, r2
 800a332:	bfb8      	it	lt
 800a334:	4613      	movlt	r3, r2
 800a336:	6033      	str	r3, [r6, #0]
 800a338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a33c:	4607      	mov	r7, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	b10a      	cbz	r2, 800a346 <_printf_common+0x26>
 800a342:	3301      	adds	r3, #1
 800a344:	6033      	str	r3, [r6, #0]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	0699      	lsls	r1, r3, #26
 800a34a:	bf42      	ittt	mi
 800a34c:	6833      	ldrmi	r3, [r6, #0]
 800a34e:	3302      	addmi	r3, #2
 800a350:	6033      	strmi	r3, [r6, #0]
 800a352:	6825      	ldr	r5, [r4, #0]
 800a354:	f015 0506 	ands.w	r5, r5, #6
 800a358:	d106      	bne.n	800a368 <_printf_common+0x48>
 800a35a:	f104 0a19 	add.w	sl, r4, #25
 800a35e:	68e3      	ldr	r3, [r4, #12]
 800a360:	6832      	ldr	r2, [r6, #0]
 800a362:	1a9b      	subs	r3, r3, r2
 800a364:	42ab      	cmp	r3, r5
 800a366:	dc26      	bgt.n	800a3b6 <_printf_common+0x96>
 800a368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a36c:	1e13      	subs	r3, r2, #0
 800a36e:	6822      	ldr	r2, [r4, #0]
 800a370:	bf18      	it	ne
 800a372:	2301      	movne	r3, #1
 800a374:	0692      	lsls	r2, r2, #26
 800a376:	d42b      	bmi.n	800a3d0 <_printf_common+0xb0>
 800a378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a37c:	4649      	mov	r1, r9
 800a37e:	4638      	mov	r0, r7
 800a380:	47c0      	blx	r8
 800a382:	3001      	adds	r0, #1
 800a384:	d01e      	beq.n	800a3c4 <_printf_common+0xa4>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	68e5      	ldr	r5, [r4, #12]
 800a38a:	6832      	ldr	r2, [r6, #0]
 800a38c:	f003 0306 	and.w	r3, r3, #6
 800a390:	2b04      	cmp	r3, #4
 800a392:	bf08      	it	eq
 800a394:	1aad      	subeq	r5, r5, r2
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	6922      	ldr	r2, [r4, #16]
 800a39a:	bf0c      	ite	eq
 800a39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3a0:	2500      	movne	r5, #0
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	bfc4      	itt	gt
 800a3a6:	1a9b      	subgt	r3, r3, r2
 800a3a8:	18ed      	addgt	r5, r5, r3
 800a3aa:	2600      	movs	r6, #0
 800a3ac:	341a      	adds	r4, #26
 800a3ae:	42b5      	cmp	r5, r6
 800a3b0:	d11a      	bne.n	800a3e8 <_printf_common+0xc8>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e008      	b.n	800a3c8 <_printf_common+0xa8>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	4638      	mov	r0, r7
 800a3be:	47c0      	blx	r8
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d103      	bne.n	800a3cc <_printf_common+0xac>
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	e7c6      	b.n	800a35e <_printf_common+0x3e>
 800a3d0:	18e1      	adds	r1, r4, r3
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	2030      	movs	r0, #48	; 0x30
 800a3d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3da:	4422      	add	r2, r4
 800a3dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	e7c7      	b.n	800a378 <_printf_common+0x58>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	47c0      	blx	r8
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d0e6      	beq.n	800a3c4 <_printf_common+0xa4>
 800a3f6:	3601      	adds	r6, #1
 800a3f8:	e7d9      	b.n	800a3ae <_printf_common+0x8e>
	...

0800a3fc <_printf_i>:
 800a3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	7e0f      	ldrb	r7, [r1, #24]
 800a402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a404:	2f78      	cmp	r7, #120	; 0x78
 800a406:	4691      	mov	r9, r2
 800a408:	4680      	mov	r8, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	469a      	mov	sl, r3
 800a40e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a412:	d807      	bhi.n	800a424 <_printf_i+0x28>
 800a414:	2f62      	cmp	r7, #98	; 0x62
 800a416:	d80a      	bhi.n	800a42e <_printf_i+0x32>
 800a418:	2f00      	cmp	r7, #0
 800a41a:	f000 80d8 	beq.w	800a5ce <_printf_i+0x1d2>
 800a41e:	2f58      	cmp	r7, #88	; 0x58
 800a420:	f000 80a3 	beq.w	800a56a <_printf_i+0x16e>
 800a424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a42c:	e03a      	b.n	800a4a4 <_printf_i+0xa8>
 800a42e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a432:	2b15      	cmp	r3, #21
 800a434:	d8f6      	bhi.n	800a424 <_printf_i+0x28>
 800a436:	a101      	add	r1, pc, #4	; (adr r1, 800a43c <_printf_i+0x40>)
 800a438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a43c:	0800a495 	.word	0x0800a495
 800a440:	0800a4a9 	.word	0x0800a4a9
 800a444:	0800a425 	.word	0x0800a425
 800a448:	0800a425 	.word	0x0800a425
 800a44c:	0800a425 	.word	0x0800a425
 800a450:	0800a425 	.word	0x0800a425
 800a454:	0800a4a9 	.word	0x0800a4a9
 800a458:	0800a425 	.word	0x0800a425
 800a45c:	0800a425 	.word	0x0800a425
 800a460:	0800a425 	.word	0x0800a425
 800a464:	0800a425 	.word	0x0800a425
 800a468:	0800a5b5 	.word	0x0800a5b5
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a597 	.word	0x0800a597
 800a474:	0800a425 	.word	0x0800a425
 800a478:	0800a425 	.word	0x0800a425
 800a47c:	0800a5d7 	.word	0x0800a5d7
 800a480:	0800a425 	.word	0x0800a425
 800a484:	0800a4d9 	.word	0x0800a4d9
 800a488:	0800a425 	.word	0x0800a425
 800a48c:	0800a425 	.word	0x0800a425
 800a490:	0800a59f 	.word	0x0800a59f
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	1d1a      	adds	r2, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	602a      	str	r2, [r5, #0]
 800a49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e0a3      	b.n	800a5f0 <_printf_i+0x1f4>
 800a4a8:	6820      	ldr	r0, [r4, #0]
 800a4aa:	6829      	ldr	r1, [r5, #0]
 800a4ac:	0606      	lsls	r6, r0, #24
 800a4ae:	f101 0304 	add.w	r3, r1, #4
 800a4b2:	d50a      	bpl.n	800a4ca <_printf_i+0xce>
 800a4b4:	680e      	ldr	r6, [r1, #0]
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	da03      	bge.n	800a4c4 <_printf_i+0xc8>
 800a4bc:	232d      	movs	r3, #45	; 0x2d
 800a4be:	4276      	negs	r6, r6
 800a4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c4:	485e      	ldr	r0, [pc, #376]	; (800a640 <_printf_i+0x244>)
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e019      	b.n	800a4fe <_printf_i+0x102>
 800a4ca:	680e      	ldr	r6, [r1, #0]
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4d2:	bf18      	it	ne
 800a4d4:	b236      	sxthne	r6, r6
 800a4d6:	e7ef      	b.n	800a4b8 <_printf_i+0xbc>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	6820      	ldr	r0, [r4, #0]
 800a4dc:	1d19      	adds	r1, r3, #4
 800a4de:	6029      	str	r1, [r5, #0]
 800a4e0:	0601      	lsls	r1, r0, #24
 800a4e2:	d501      	bpl.n	800a4e8 <_printf_i+0xec>
 800a4e4:	681e      	ldr	r6, [r3, #0]
 800a4e6:	e002      	b.n	800a4ee <_printf_i+0xf2>
 800a4e8:	0646      	lsls	r6, r0, #25
 800a4ea:	d5fb      	bpl.n	800a4e4 <_printf_i+0xe8>
 800a4ec:	881e      	ldrh	r6, [r3, #0]
 800a4ee:	4854      	ldr	r0, [pc, #336]	; (800a640 <_printf_i+0x244>)
 800a4f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2308      	moveq	r3, #8
 800a4f6:	230a      	movne	r3, #10
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4fe:	6865      	ldr	r5, [r4, #4]
 800a500:	60a5      	str	r5, [r4, #8]
 800a502:	2d00      	cmp	r5, #0
 800a504:	bfa2      	ittt	ge
 800a506:	6821      	ldrge	r1, [r4, #0]
 800a508:	f021 0104 	bicge.w	r1, r1, #4
 800a50c:	6021      	strge	r1, [r4, #0]
 800a50e:	b90e      	cbnz	r6, 800a514 <_printf_i+0x118>
 800a510:	2d00      	cmp	r5, #0
 800a512:	d04d      	beq.n	800a5b0 <_printf_i+0x1b4>
 800a514:	4615      	mov	r5, r2
 800a516:	fbb6 f1f3 	udiv	r1, r6, r3
 800a51a:	fb03 6711 	mls	r7, r3, r1, r6
 800a51e:	5dc7      	ldrb	r7, [r0, r7]
 800a520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a524:	4637      	mov	r7, r6
 800a526:	42bb      	cmp	r3, r7
 800a528:	460e      	mov	r6, r1
 800a52a:	d9f4      	bls.n	800a516 <_printf_i+0x11a>
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d10b      	bne.n	800a548 <_printf_i+0x14c>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	07de      	lsls	r6, r3, #31
 800a534:	d508      	bpl.n	800a548 <_printf_i+0x14c>
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	4299      	cmp	r1, r3
 800a53c:	bfde      	ittt	le
 800a53e:	2330      	movle	r3, #48	; 0x30
 800a540:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a544:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a548:	1b52      	subs	r2, r2, r5
 800a54a:	6122      	str	r2, [r4, #16]
 800a54c:	f8cd a000 	str.w	sl, [sp]
 800a550:	464b      	mov	r3, r9
 800a552:	aa03      	add	r2, sp, #12
 800a554:	4621      	mov	r1, r4
 800a556:	4640      	mov	r0, r8
 800a558:	f7ff fee2 	bl	800a320 <_printf_common>
 800a55c:	3001      	adds	r0, #1
 800a55e:	d14c      	bne.n	800a5fa <_printf_i+0x1fe>
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	b004      	add	sp, #16
 800a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56a:	4835      	ldr	r0, [pc, #212]	; (800a640 <_printf_i+0x244>)
 800a56c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a570:	6829      	ldr	r1, [r5, #0]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	f851 6b04 	ldr.w	r6, [r1], #4
 800a578:	6029      	str	r1, [r5, #0]
 800a57a:	061d      	lsls	r5, r3, #24
 800a57c:	d514      	bpl.n	800a5a8 <_printf_i+0x1ac>
 800a57e:	07df      	lsls	r7, r3, #31
 800a580:	bf44      	itt	mi
 800a582:	f043 0320 	orrmi.w	r3, r3, #32
 800a586:	6023      	strmi	r3, [r4, #0]
 800a588:	b91e      	cbnz	r6, 800a592 <_printf_i+0x196>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	f023 0320 	bic.w	r3, r3, #32
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	2310      	movs	r3, #16
 800a594:	e7b0      	b.n	800a4f8 <_printf_i+0xfc>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	f043 0320 	orr.w	r3, r3, #32
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	2378      	movs	r3, #120	; 0x78
 800a5a0:	4828      	ldr	r0, [pc, #160]	; (800a644 <_printf_i+0x248>)
 800a5a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a6:	e7e3      	b.n	800a570 <_printf_i+0x174>
 800a5a8:	0659      	lsls	r1, r3, #25
 800a5aa:	bf48      	it	mi
 800a5ac:	b2b6      	uxthmi	r6, r6
 800a5ae:	e7e6      	b.n	800a57e <_printf_i+0x182>
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	e7bb      	b.n	800a52c <_printf_i+0x130>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	6826      	ldr	r6, [r4, #0]
 800a5b8:	6961      	ldr	r1, [r4, #20]
 800a5ba:	1d18      	adds	r0, r3, #4
 800a5bc:	6028      	str	r0, [r5, #0]
 800a5be:	0635      	lsls	r5, r6, #24
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0x1cc>
 800a5c4:	6019      	str	r1, [r3, #0]
 800a5c6:	e002      	b.n	800a5ce <_printf_i+0x1d2>
 800a5c8:	0670      	lsls	r0, r6, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0x1c8>
 800a5cc:	8019      	strh	r1, [r3, #0]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6123      	str	r3, [r4, #16]
 800a5d2:	4615      	mov	r5, r2
 800a5d4:	e7ba      	b.n	800a54c <_printf_i+0x150>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	1d1a      	adds	r2, r3, #4
 800a5da:	602a      	str	r2, [r5, #0]
 800a5dc:	681d      	ldr	r5, [r3, #0]
 800a5de:	6862      	ldr	r2, [r4, #4]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f7f5 fe34 	bl	8000250 <memchr>
 800a5e8:	b108      	cbz	r0, 800a5ee <_printf_i+0x1f2>
 800a5ea:	1b40      	subs	r0, r0, r5
 800a5ec:	6060      	str	r0, [r4, #4]
 800a5ee:	6863      	ldr	r3, [r4, #4]
 800a5f0:	6123      	str	r3, [r4, #16]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f8:	e7a8      	b.n	800a54c <_printf_i+0x150>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4649      	mov	r1, r9
 800a600:	4640      	mov	r0, r8
 800a602:	47d0      	blx	sl
 800a604:	3001      	adds	r0, #1
 800a606:	d0ab      	beq.n	800a560 <_printf_i+0x164>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	079b      	lsls	r3, r3, #30
 800a60c:	d413      	bmi.n	800a636 <_printf_i+0x23a>
 800a60e:	68e0      	ldr	r0, [r4, #12]
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	4298      	cmp	r0, r3
 800a614:	bfb8      	it	lt
 800a616:	4618      	movlt	r0, r3
 800a618:	e7a4      	b.n	800a564 <_printf_i+0x168>
 800a61a:	2301      	movs	r3, #1
 800a61c:	4632      	mov	r2, r6
 800a61e:	4649      	mov	r1, r9
 800a620:	4640      	mov	r0, r8
 800a622:	47d0      	blx	sl
 800a624:	3001      	adds	r0, #1
 800a626:	d09b      	beq.n	800a560 <_printf_i+0x164>
 800a628:	3501      	adds	r5, #1
 800a62a:	68e3      	ldr	r3, [r4, #12]
 800a62c:	9903      	ldr	r1, [sp, #12]
 800a62e:	1a5b      	subs	r3, r3, r1
 800a630:	42ab      	cmp	r3, r5
 800a632:	dcf2      	bgt.n	800a61a <_printf_i+0x21e>
 800a634:	e7eb      	b.n	800a60e <_printf_i+0x212>
 800a636:	2500      	movs	r5, #0
 800a638:	f104 0619 	add.w	r6, r4, #25
 800a63c:	e7f5      	b.n	800a62a <_printf_i+0x22e>
 800a63e:	bf00      	nop
 800a640:	0800ce2a 	.word	0x0800ce2a
 800a644:	0800ce3b 	.word	0x0800ce3b

0800a648 <siprintf>:
 800a648:	b40e      	push	{r1, r2, r3}
 800a64a:	b500      	push	{lr}
 800a64c:	b09c      	sub	sp, #112	; 0x70
 800a64e:	ab1d      	add	r3, sp, #116	; 0x74
 800a650:	9002      	str	r0, [sp, #8]
 800a652:	9006      	str	r0, [sp, #24]
 800a654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a658:	4809      	ldr	r0, [pc, #36]	; (800a680 <siprintf+0x38>)
 800a65a:	9107      	str	r1, [sp, #28]
 800a65c:	9104      	str	r1, [sp, #16]
 800a65e:	4909      	ldr	r1, [pc, #36]	; (800a684 <siprintf+0x3c>)
 800a660:	f853 2b04 	ldr.w	r2, [r3], #4
 800a664:	9105      	str	r1, [sp, #20]
 800a666:	6800      	ldr	r0, [r0, #0]
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	a902      	add	r1, sp, #8
 800a66c:	f001 fc90 	bl	800bf90 <_svfiprintf_r>
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	b01c      	add	sp, #112	; 0x70
 800a678:	f85d eb04 	ldr.w	lr, [sp], #4
 800a67c:	b003      	add	sp, #12
 800a67e:	4770      	bx	lr
 800a680:	20000208 	.word	0x20000208
 800a684:	ffff0208 	.word	0xffff0208

0800a688 <strtok>:
 800a688:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <strtok+0x5c>)
 800a68a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a68c:	681e      	ldr	r6, [r3, #0]
 800a68e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a690:	4605      	mov	r5, r0
 800a692:	b9fc      	cbnz	r4, 800a6d4 <strtok+0x4c>
 800a694:	2050      	movs	r0, #80	; 0x50
 800a696:	9101      	str	r1, [sp, #4]
 800a698:	f000 ff8e 	bl	800b5b8 <malloc>
 800a69c:	9901      	ldr	r1, [sp, #4]
 800a69e:	65b0      	str	r0, [r6, #88]	; 0x58
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	b920      	cbnz	r0, 800a6ae <strtok+0x26>
 800a6a4:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <strtok+0x60>)
 800a6a6:	4811      	ldr	r0, [pc, #68]	; (800a6ec <strtok+0x64>)
 800a6a8:	2157      	movs	r1, #87	; 0x57
 800a6aa:	f000 f8d5 	bl	800a858 <__assert_func>
 800a6ae:	e9c0 4400 	strd	r4, r4, [r0]
 800a6b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a6b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a6ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a6be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a6c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a6c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a6ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a6ce:	6184      	str	r4, [r0, #24]
 800a6d0:	7704      	strb	r4, [r0, #28]
 800a6d2:	6244      	str	r4, [r0, #36]	; 0x24
 800a6d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4628      	mov	r0, r5
 800a6da:	b002      	add	sp, #8
 800a6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6e0:	f000 b806 	b.w	800a6f0 <__strtok_r>
 800a6e4:	20000208 	.word	0x20000208
 800a6e8:	0800ce4c 	.word	0x0800ce4c
 800a6ec:	0800ce63 	.word	0x0800ce63

0800a6f0 <__strtok_r>:
 800a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f2:	b908      	cbnz	r0, 800a6f8 <__strtok_r+0x8>
 800a6f4:	6810      	ldr	r0, [r2, #0]
 800a6f6:	b188      	cbz	r0, 800a71c <__strtok_r+0x2c>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a700:	460f      	mov	r7, r1
 800a702:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a706:	b91e      	cbnz	r6, 800a710 <__strtok_r+0x20>
 800a708:	b965      	cbnz	r5, 800a724 <__strtok_r+0x34>
 800a70a:	6015      	str	r5, [r2, #0]
 800a70c:	4628      	mov	r0, r5
 800a70e:	e005      	b.n	800a71c <__strtok_r+0x2c>
 800a710:	42b5      	cmp	r5, r6
 800a712:	d1f6      	bne.n	800a702 <__strtok_r+0x12>
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1f0      	bne.n	800a6fa <__strtok_r+0xa>
 800a718:	6014      	str	r4, [r2, #0]
 800a71a:	7003      	strb	r3, [r0, #0]
 800a71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a71e:	461c      	mov	r4, r3
 800a720:	e00c      	b.n	800a73c <__strtok_r+0x4c>
 800a722:	b915      	cbnz	r5, 800a72a <__strtok_r+0x3a>
 800a724:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a728:	460e      	mov	r6, r1
 800a72a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a72e:	42ab      	cmp	r3, r5
 800a730:	d1f7      	bne.n	800a722 <__strtok_r+0x32>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0f3      	beq.n	800a71e <__strtok_r+0x2e>
 800a736:	2300      	movs	r3, #0
 800a738:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a73c:	6014      	str	r4, [r2, #0]
 800a73e:	e7ed      	b.n	800a71c <__strtok_r+0x2c>

0800a740 <_strtol_l.constprop.0>:
 800a740:	2b01      	cmp	r3, #1
 800a742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a746:	d001      	beq.n	800a74c <_strtol_l.constprop.0+0xc>
 800a748:	2b24      	cmp	r3, #36	; 0x24
 800a74a:	d906      	bls.n	800a75a <_strtol_l.constprop.0+0x1a>
 800a74c:	f7ff fae0 	bl	8009d10 <__errno>
 800a750:	2316      	movs	r3, #22
 800a752:	6003      	str	r3, [r0, #0]
 800a754:	2000      	movs	r0, #0
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a840 <_strtol_l.constprop.0+0x100>
 800a75e:	460d      	mov	r5, r1
 800a760:	462e      	mov	r6, r5
 800a762:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a766:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a76a:	f017 0708 	ands.w	r7, r7, #8
 800a76e:	d1f7      	bne.n	800a760 <_strtol_l.constprop.0+0x20>
 800a770:	2c2d      	cmp	r4, #45	; 0x2d
 800a772:	d132      	bne.n	800a7da <_strtol_l.constprop.0+0x9a>
 800a774:	782c      	ldrb	r4, [r5, #0]
 800a776:	2701      	movs	r7, #1
 800a778:	1cb5      	adds	r5, r6, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d05b      	beq.n	800a836 <_strtol_l.constprop.0+0xf6>
 800a77e:	2b10      	cmp	r3, #16
 800a780:	d109      	bne.n	800a796 <_strtol_l.constprop.0+0x56>
 800a782:	2c30      	cmp	r4, #48	; 0x30
 800a784:	d107      	bne.n	800a796 <_strtol_l.constprop.0+0x56>
 800a786:	782c      	ldrb	r4, [r5, #0]
 800a788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a78c:	2c58      	cmp	r4, #88	; 0x58
 800a78e:	d14d      	bne.n	800a82c <_strtol_l.constprop.0+0xec>
 800a790:	786c      	ldrb	r4, [r5, #1]
 800a792:	2310      	movs	r3, #16
 800a794:	3502      	adds	r5, #2
 800a796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a79a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a79e:	f04f 0c00 	mov.w	ip, #0
 800a7a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7a6:	4666      	mov	r6, ip
 800a7a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a7b0:	f1be 0f09 	cmp.w	lr, #9
 800a7b4:	d816      	bhi.n	800a7e4 <_strtol_l.constprop.0+0xa4>
 800a7b6:	4674      	mov	r4, lr
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	dd24      	ble.n	800a806 <_strtol_l.constprop.0+0xc6>
 800a7bc:	f1bc 0f00 	cmp.w	ip, #0
 800a7c0:	db1e      	blt.n	800a800 <_strtol_l.constprop.0+0xc0>
 800a7c2:	45b1      	cmp	r9, r6
 800a7c4:	d31c      	bcc.n	800a800 <_strtol_l.constprop.0+0xc0>
 800a7c6:	d101      	bne.n	800a7cc <_strtol_l.constprop.0+0x8c>
 800a7c8:	45a2      	cmp	sl, r4
 800a7ca:	db19      	blt.n	800a800 <_strtol_l.constprop.0+0xc0>
 800a7cc:	fb06 4603 	mla	r6, r6, r3, r4
 800a7d0:	f04f 0c01 	mov.w	ip, #1
 800a7d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d8:	e7e8      	b.n	800a7ac <_strtol_l.constprop.0+0x6c>
 800a7da:	2c2b      	cmp	r4, #43	; 0x2b
 800a7dc:	bf04      	itt	eq
 800a7de:	782c      	ldrbeq	r4, [r5, #0]
 800a7e0:	1cb5      	addeq	r5, r6, #2
 800a7e2:	e7ca      	b.n	800a77a <_strtol_l.constprop.0+0x3a>
 800a7e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a7e8:	f1be 0f19 	cmp.w	lr, #25
 800a7ec:	d801      	bhi.n	800a7f2 <_strtol_l.constprop.0+0xb2>
 800a7ee:	3c37      	subs	r4, #55	; 0x37
 800a7f0:	e7e2      	b.n	800a7b8 <_strtol_l.constprop.0+0x78>
 800a7f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a7f6:	f1be 0f19 	cmp.w	lr, #25
 800a7fa:	d804      	bhi.n	800a806 <_strtol_l.constprop.0+0xc6>
 800a7fc:	3c57      	subs	r4, #87	; 0x57
 800a7fe:	e7db      	b.n	800a7b8 <_strtol_l.constprop.0+0x78>
 800a800:	f04f 3cff 	mov.w	ip, #4294967295
 800a804:	e7e6      	b.n	800a7d4 <_strtol_l.constprop.0+0x94>
 800a806:	f1bc 0f00 	cmp.w	ip, #0
 800a80a:	da05      	bge.n	800a818 <_strtol_l.constprop.0+0xd8>
 800a80c:	2322      	movs	r3, #34	; 0x22
 800a80e:	6003      	str	r3, [r0, #0]
 800a810:	4646      	mov	r6, r8
 800a812:	b942      	cbnz	r2, 800a826 <_strtol_l.constprop.0+0xe6>
 800a814:	4630      	mov	r0, r6
 800a816:	e79e      	b.n	800a756 <_strtol_l.constprop.0+0x16>
 800a818:	b107      	cbz	r7, 800a81c <_strtol_l.constprop.0+0xdc>
 800a81a:	4276      	negs	r6, r6
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d0f9      	beq.n	800a814 <_strtol_l.constprop.0+0xd4>
 800a820:	f1bc 0f00 	cmp.w	ip, #0
 800a824:	d000      	beq.n	800a828 <_strtol_l.constprop.0+0xe8>
 800a826:	1e69      	subs	r1, r5, #1
 800a828:	6011      	str	r1, [r2, #0]
 800a82a:	e7f3      	b.n	800a814 <_strtol_l.constprop.0+0xd4>
 800a82c:	2430      	movs	r4, #48	; 0x30
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1b1      	bne.n	800a796 <_strtol_l.constprop.0+0x56>
 800a832:	2308      	movs	r3, #8
 800a834:	e7af      	b.n	800a796 <_strtol_l.constprop.0+0x56>
 800a836:	2c30      	cmp	r4, #48	; 0x30
 800a838:	d0a5      	beq.n	800a786 <_strtol_l.constprop.0+0x46>
 800a83a:	230a      	movs	r3, #10
 800a83c:	e7ab      	b.n	800a796 <_strtol_l.constprop.0+0x56>
 800a83e:	bf00      	nop
 800a840:	0800cefd 	.word	0x0800cefd

0800a844 <strtol>:
 800a844:	4613      	mov	r3, r2
 800a846:	460a      	mov	r2, r1
 800a848:	4601      	mov	r1, r0
 800a84a:	4802      	ldr	r0, [pc, #8]	; (800a854 <strtol+0x10>)
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f7ff bf77 	b.w	800a740 <_strtol_l.constprop.0>
 800a852:	bf00      	nop
 800a854:	20000208 	.word	0x20000208

0800a858 <__assert_func>:
 800a858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a85a:	4614      	mov	r4, r2
 800a85c:	461a      	mov	r2, r3
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <__assert_func+0x2c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4605      	mov	r5, r0
 800a864:	68d8      	ldr	r0, [r3, #12]
 800a866:	b14c      	cbz	r4, 800a87c <__assert_func+0x24>
 800a868:	4b07      	ldr	r3, [pc, #28]	; (800a888 <__assert_func+0x30>)
 800a86a:	9100      	str	r1, [sp, #0]
 800a86c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a870:	4906      	ldr	r1, [pc, #24]	; (800a88c <__assert_func+0x34>)
 800a872:	462b      	mov	r3, r5
 800a874:	f000 fe8a 	bl	800b58c <fiprintf>
 800a878:	f001 feb4 	bl	800c5e4 <abort>
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <__assert_func+0x38>)
 800a87e:	461c      	mov	r4, r3
 800a880:	e7f3      	b.n	800a86a <__assert_func+0x12>
 800a882:	bf00      	nop
 800a884:	20000208 	.word	0x20000208
 800a888:	0800cec0 	.word	0x0800cec0
 800a88c:	0800cecd 	.word	0x0800cecd
 800a890:	0800cefb 	.word	0x0800cefb

0800a894 <quorem>:
 800a894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	6903      	ldr	r3, [r0, #16]
 800a89a:	690c      	ldr	r4, [r1, #16]
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	4607      	mov	r7, r0
 800a8a0:	f2c0 8081 	blt.w	800a9a6 <quorem+0x112>
 800a8a4:	3c01      	subs	r4, #1
 800a8a6:	f101 0814 	add.w	r8, r1, #20
 800a8aa:	f100 0514 	add.w	r5, r0, #20
 800a8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8cc:	d331      	bcc.n	800a932 <quorem+0x9e>
 800a8ce:	f04f 0e00 	mov.w	lr, #0
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	46ac      	mov	ip, r5
 800a8d6:	46f2      	mov	sl, lr
 800a8d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8dc:	b293      	uxth	r3, r2
 800a8de:	fb06 e303 	mla	r3, r6, r3, lr
 800a8e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8ec:	f8dc a000 	ldr.w	sl, [ip]
 800a8f0:	0c12      	lsrs	r2, r2, #16
 800a8f2:	fa13 f38a 	uxtah	r3, r3, sl
 800a8f6:	fb06 e202 	mla	r2, r6, r2, lr
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	9b00      	ldr	r3, [sp, #0]
 800a8fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a902:	b292      	uxth	r2, r2
 800a904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a90c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a910:	4581      	cmp	r9, r0
 800a912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a916:	f84c 3b04 	str.w	r3, [ip], #4
 800a91a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a91e:	d2db      	bcs.n	800a8d8 <quorem+0x44>
 800a920:	f855 300b 	ldr.w	r3, [r5, fp]
 800a924:	b92b      	cbnz	r3, 800a932 <quorem+0x9e>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	3b04      	subs	r3, #4
 800a92a:	429d      	cmp	r5, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	d32e      	bcc.n	800a98e <quorem+0xfa>
 800a930:	613c      	str	r4, [r7, #16]
 800a932:	4638      	mov	r0, r7
 800a934:	f001 f8d8 	bl	800bae8 <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	db24      	blt.n	800a986 <quorem+0xf2>
 800a93c:	3601      	adds	r6, #1
 800a93e:	4628      	mov	r0, r5
 800a940:	f04f 0c00 	mov.w	ip, #0
 800a944:	f858 2b04 	ldr.w	r2, [r8], #4
 800a948:	f8d0 e000 	ldr.w	lr, [r0]
 800a94c:	b293      	uxth	r3, r2
 800a94e:	ebac 0303 	sub.w	r3, ip, r3
 800a952:	0c12      	lsrs	r2, r2, #16
 800a954:	fa13 f38e 	uxtah	r3, r3, lr
 800a958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a960:	b29b      	uxth	r3, r3
 800a962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a966:	45c1      	cmp	r9, r8
 800a968:	f840 3b04 	str.w	r3, [r0], #4
 800a96c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a970:	d2e8      	bcs.n	800a944 <quorem+0xb0>
 800a972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a97a:	b922      	cbnz	r2, 800a986 <quorem+0xf2>
 800a97c:	3b04      	subs	r3, #4
 800a97e:	429d      	cmp	r5, r3
 800a980:	461a      	mov	r2, r3
 800a982:	d30a      	bcc.n	800a99a <quorem+0x106>
 800a984:	613c      	str	r4, [r7, #16]
 800a986:	4630      	mov	r0, r6
 800a988:	b003      	add	sp, #12
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	6812      	ldr	r2, [r2, #0]
 800a990:	3b04      	subs	r3, #4
 800a992:	2a00      	cmp	r2, #0
 800a994:	d1cc      	bne.n	800a930 <quorem+0x9c>
 800a996:	3c01      	subs	r4, #1
 800a998:	e7c7      	b.n	800a92a <quorem+0x96>
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	3b04      	subs	r3, #4
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d1f0      	bne.n	800a984 <quorem+0xf0>
 800a9a2:	3c01      	subs	r4, #1
 800a9a4:	e7eb      	b.n	800a97e <quorem+0xea>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e7ee      	b.n	800a988 <quorem+0xf4>
 800a9aa:	0000      	movs	r0, r0
 800a9ac:	0000      	movs	r0, r0
	...

0800a9b0 <_dtoa_r>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	ed2d 8b04 	vpush	{d8-d9}
 800a9b8:	ec57 6b10 	vmov	r6, r7, d0
 800a9bc:	b093      	sub	sp, #76	; 0x4c
 800a9be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9c4:	9106      	str	r1, [sp, #24]
 800a9c6:	ee10 aa10 	vmov	sl, s0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d0:	46bb      	mov	fp, r7
 800a9d2:	b975      	cbnz	r5, 800a9f2 <_dtoa_r+0x42>
 800a9d4:	2010      	movs	r0, #16
 800a9d6:	f000 fdef 	bl	800b5b8 <malloc>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a9de:	b920      	cbnz	r0, 800a9ea <_dtoa_r+0x3a>
 800a9e0:	4ba7      	ldr	r3, [pc, #668]	; (800ac80 <_dtoa_r+0x2d0>)
 800a9e2:	21ea      	movs	r1, #234	; 0xea
 800a9e4:	48a7      	ldr	r0, [pc, #668]	; (800ac84 <_dtoa_r+0x2d4>)
 800a9e6:	f7ff ff37 	bl	800a858 <__assert_func>
 800a9ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9ee:	6005      	str	r5, [r0, #0]
 800a9f0:	60c5      	str	r5, [r0, #12]
 800a9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f4:	6819      	ldr	r1, [r3, #0]
 800a9f6:	b151      	cbz	r1, 800aa0e <_dtoa_r+0x5e>
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	604a      	str	r2, [r1, #4]
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4093      	lsls	r3, r2
 800aa00:	608b      	str	r3, [r1, #8]
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 fe2e 	bl	800b664 <_Bfree>
 800aa08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	1e3b      	subs	r3, r7, #0
 800aa10:	bfaa      	itet	ge
 800aa12:	2300      	movge	r3, #0
 800aa14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa18:	f8c8 3000 	strge.w	r3, [r8]
 800aa1c:	4b9a      	ldr	r3, [pc, #616]	; (800ac88 <_dtoa_r+0x2d8>)
 800aa1e:	bfbc      	itt	lt
 800aa20:	2201      	movlt	r2, #1
 800aa22:	f8c8 2000 	strlt.w	r2, [r8]
 800aa26:	ea33 030b 	bics.w	r3, r3, fp
 800aa2a:	d11b      	bne.n	800aa64 <_dtoa_r+0xb4>
 800aa2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa38:	4333      	orrs	r3, r6
 800aa3a:	f000 8592 	beq.w	800b562 <_dtoa_r+0xbb2>
 800aa3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa40:	b963      	cbnz	r3, 800aa5c <_dtoa_r+0xac>
 800aa42:	4b92      	ldr	r3, [pc, #584]	; (800ac8c <_dtoa_r+0x2dc>)
 800aa44:	e022      	b.n	800aa8c <_dtoa_r+0xdc>
 800aa46:	4b92      	ldr	r3, [pc, #584]	; (800ac90 <_dtoa_r+0x2e0>)
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	9801      	ldr	r0, [sp, #4]
 800aa52:	b013      	add	sp, #76	; 0x4c
 800aa54:	ecbd 8b04 	vpop	{d8-d9}
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	4b8b      	ldr	r3, [pc, #556]	; (800ac8c <_dtoa_r+0x2dc>)
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	3303      	adds	r3, #3
 800aa62:	e7f3      	b.n	800aa4c <_dtoa_r+0x9c>
 800aa64:	2200      	movs	r2, #0
 800aa66:	2300      	movs	r3, #0
 800aa68:	4650      	mov	r0, sl
 800aa6a:	4659      	mov	r1, fp
 800aa6c:	f7f6 f864 	bl	8000b38 <__aeabi_dcmpeq>
 800aa70:	ec4b ab19 	vmov	d9, sl, fp
 800aa74:	4680      	mov	r8, r0
 800aa76:	b158      	cbz	r0, 800aa90 <_dtoa_r+0xe0>
 800aa78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 856b 	beq.w	800b55c <_dtoa_r+0xbac>
 800aa86:	4883      	ldr	r0, [pc, #524]	; (800ac94 <_dtoa_r+0x2e4>)
 800aa88:	6018      	str	r0, [r3, #0]
 800aa8a:	1e43      	subs	r3, r0, #1
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	e7df      	b.n	800aa50 <_dtoa_r+0xa0>
 800aa90:	ec4b ab10 	vmov	d0, sl, fp
 800aa94:	aa10      	add	r2, sp, #64	; 0x40
 800aa96:	a911      	add	r1, sp, #68	; 0x44
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 f8cb 	bl	800bc34 <__d2b>
 800aa9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aaa2:	ee08 0a10 	vmov	s16, r0
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	f000 8084 	beq.w	800abb4 <_dtoa_r+0x204>
 800aaac:	ee19 3a90 	vmov	r3, s19
 800aab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aab8:	4656      	mov	r6, sl
 800aaba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aac6:	4b74      	ldr	r3, [pc, #464]	; (800ac98 <_dtoa_r+0x2e8>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fc13 	bl	80002f8 <__aeabi_dsub>
 800aad2:	a365      	add	r3, pc, #404	; (adr r3, 800ac68 <_dtoa_r+0x2b8>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fdc6 	bl	8000668 <__aeabi_dmul>
 800aadc:	a364      	add	r3, pc, #400	; (adr r3, 800ac70 <_dtoa_r+0x2c0>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fc0b 	bl	80002fc <__adddf3>
 800aae6:	4606      	mov	r6, r0
 800aae8:	4628      	mov	r0, r5
 800aaea:	460f      	mov	r7, r1
 800aaec:	f7f5 fd52 	bl	8000594 <__aeabi_i2d>
 800aaf0:	a361      	add	r3, pc, #388	; (adr r3, 800ac78 <_dtoa_r+0x2c8>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fdb7 	bl	8000668 <__aeabi_dmul>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f5 fbfb 	bl	80002fc <__adddf3>
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	f7f6 f85d 	bl	8000bc8 <__aeabi_d2iz>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	9000      	str	r0, [sp, #0]
 800ab12:	2300      	movs	r3, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f6 f818 	bl	8000b4c <__aeabi_dcmplt>
 800ab1c:	b150      	cbz	r0, 800ab34 <_dtoa_r+0x184>
 800ab1e:	9800      	ldr	r0, [sp, #0]
 800ab20:	f7f5 fd38 	bl	8000594 <__aeabi_i2d>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f6 f806 	bl	8000b38 <__aeabi_dcmpeq>
 800ab2c:	b910      	cbnz	r0, 800ab34 <_dtoa_r+0x184>
 800ab2e:	9b00      	ldr	r3, [sp, #0]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	9b00      	ldr	r3, [sp, #0]
 800ab36:	2b16      	cmp	r3, #22
 800ab38:	d85a      	bhi.n	800abf0 <_dtoa_r+0x240>
 800ab3a:	9a00      	ldr	r2, [sp, #0]
 800ab3c:	4b57      	ldr	r3, [pc, #348]	; (800ac9c <_dtoa_r+0x2ec>)
 800ab3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	ec51 0b19 	vmov	r0, r1, d9
 800ab4a:	f7f5 ffff 	bl	8000b4c <__aeabi_dcmplt>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d050      	beq.n	800abf4 <_dtoa_r+0x244>
 800ab52:	9b00      	ldr	r3, [sp, #0]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab5e:	1b5d      	subs	r5, r3, r5
 800ab60:	1e6b      	subs	r3, r5, #1
 800ab62:	9305      	str	r3, [sp, #20]
 800ab64:	bf45      	ittet	mi
 800ab66:	f1c5 0301 	rsbmi	r3, r5, #1
 800ab6a:	9304      	strmi	r3, [sp, #16]
 800ab6c:	2300      	movpl	r3, #0
 800ab6e:	2300      	movmi	r3, #0
 800ab70:	bf4c      	ite	mi
 800ab72:	9305      	strmi	r3, [sp, #20]
 800ab74:	9304      	strpl	r3, [sp, #16]
 800ab76:	9b00      	ldr	r3, [sp, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db3d      	blt.n	800abf8 <_dtoa_r+0x248>
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	9a00      	ldr	r2, [sp, #0]
 800ab80:	920a      	str	r2, [sp, #40]	; 0x28
 800ab82:	4413      	add	r3, r2
 800ab84:	9305      	str	r3, [sp, #20]
 800ab86:	2300      	movs	r3, #0
 800ab88:	9307      	str	r3, [sp, #28]
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	f200 8089 	bhi.w	800aca4 <_dtoa_r+0x2f4>
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	bfc4      	itt	gt
 800ab96:	3b04      	subgt	r3, #4
 800ab98:	9306      	strgt	r3, [sp, #24]
 800ab9a:	9b06      	ldr	r3, [sp, #24]
 800ab9c:	f1a3 0302 	sub.w	r3, r3, #2
 800aba0:	bfcc      	ite	gt
 800aba2:	2500      	movgt	r5, #0
 800aba4:	2501      	movle	r5, #1
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	f200 8087 	bhi.w	800acba <_dtoa_r+0x30a>
 800abac:	e8df f003 	tbb	[pc, r3]
 800abb0:	59383a2d 	.word	0x59383a2d
 800abb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800abb8:	441d      	add	r5, r3
 800abba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	bfc1      	itttt	gt
 800abc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800abca:	fa0b f303 	lslgt.w	r3, fp, r3
 800abce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abd2:	bfda      	itte	le
 800abd4:	f1c3 0320 	rsble	r3, r3, #32
 800abd8:	fa06 f003 	lslle.w	r0, r6, r3
 800abdc:	4318      	orrgt	r0, r3
 800abde:	f7f5 fcc9 	bl	8000574 <__aeabi_ui2d>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4606      	mov	r6, r0
 800abe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800abea:	3d01      	subs	r5, #1
 800abec:	930e      	str	r3, [sp, #56]	; 0x38
 800abee:	e76a      	b.n	800aac6 <_dtoa_r+0x116>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7b2      	b.n	800ab5a <_dtoa_r+0x1aa>
 800abf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800abf6:	e7b1      	b.n	800ab5c <_dtoa_r+0x1ac>
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	9a00      	ldr	r2, [sp, #0]
 800abfc:	1a9b      	subs	r3, r3, r2
 800abfe:	9304      	str	r3, [sp, #16]
 800ac00:	4253      	negs	r3, r2
 800ac02:	9307      	str	r3, [sp, #28]
 800ac04:	2300      	movs	r3, #0
 800ac06:	930a      	str	r3, [sp, #40]	; 0x28
 800ac08:	e7bf      	b.n	800ab8a <_dtoa_r+0x1da>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9308      	str	r3, [sp, #32]
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc55      	bgt.n	800acc0 <_dtoa_r+0x310>
 800ac14:	2301      	movs	r3, #1
 800ac16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac1e:	e00c      	b.n	800ac3a <_dtoa_r+0x28a>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e7f3      	b.n	800ac0c <_dtoa_r+0x25c>
 800ac24:	2300      	movs	r3, #0
 800ac26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac28:	9308      	str	r3, [sp, #32]
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	9302      	str	r3, [sp, #8]
 800ac30:	3301      	adds	r3, #1
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	bfb8      	it	lt
 800ac38:	2301      	movlt	r3, #1
 800ac3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	6042      	str	r2, [r0, #4]
 800ac40:	2204      	movs	r2, #4
 800ac42:	f102 0614 	add.w	r6, r2, #20
 800ac46:	429e      	cmp	r6, r3
 800ac48:	6841      	ldr	r1, [r0, #4]
 800ac4a:	d93d      	bls.n	800acc8 <_dtoa_r+0x318>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 fcc9 	bl	800b5e4 <_Balloc>
 800ac52:	9001      	str	r0, [sp, #4]
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d13b      	bne.n	800acd0 <_dtoa_r+0x320>
 800ac58:	4b11      	ldr	r3, [pc, #68]	; (800aca0 <_dtoa_r+0x2f0>)
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac60:	e6c0      	b.n	800a9e4 <_dtoa_r+0x34>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e7df      	b.n	800ac26 <_dtoa_r+0x276>
 800ac66:	bf00      	nop
 800ac68:	636f4361 	.word	0x636f4361
 800ac6c:	3fd287a7 	.word	0x3fd287a7
 800ac70:	8b60c8b3 	.word	0x8b60c8b3
 800ac74:	3fc68a28 	.word	0x3fc68a28
 800ac78:	509f79fb 	.word	0x509f79fb
 800ac7c:	3fd34413 	.word	0x3fd34413
 800ac80:	0800ce4c 	.word	0x0800ce4c
 800ac84:	0800d00a 	.word	0x0800d00a
 800ac88:	7ff00000 	.word	0x7ff00000
 800ac8c:	0800d006 	.word	0x0800d006
 800ac90:	0800cffd 	.word	0x0800cffd
 800ac94:	0800ce29 	.word	0x0800ce29
 800ac98:	3ff80000 	.word	0x3ff80000
 800ac9c:	0800d100 	.word	0x0800d100
 800aca0:	0800d065 	.word	0x0800d065
 800aca4:	2501      	movs	r5, #1
 800aca6:	2300      	movs	r3, #0
 800aca8:	9306      	str	r3, [sp, #24]
 800acaa:	9508      	str	r5, [sp, #32]
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	2312      	movs	r3, #18
 800acb8:	e7b0      	b.n	800ac1c <_dtoa_r+0x26c>
 800acba:	2301      	movs	r3, #1
 800acbc:	9308      	str	r3, [sp, #32]
 800acbe:	e7f5      	b.n	800acac <_dtoa_r+0x2fc>
 800acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acc6:	e7b8      	b.n	800ac3a <_dtoa_r+0x28a>
 800acc8:	3101      	adds	r1, #1
 800acca:	6041      	str	r1, [r0, #4]
 800accc:	0052      	lsls	r2, r2, #1
 800acce:	e7b8      	b.n	800ac42 <_dtoa_r+0x292>
 800acd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd2:	9a01      	ldr	r2, [sp, #4]
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	2b0e      	cmp	r3, #14
 800acda:	f200 809d 	bhi.w	800ae18 <_dtoa_r+0x468>
 800acde:	2d00      	cmp	r5, #0
 800ace0:	f000 809a 	beq.w	800ae18 <_dtoa_r+0x468>
 800ace4:	9b00      	ldr	r3, [sp, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	dd32      	ble.n	800ad50 <_dtoa_r+0x3a0>
 800acea:	4ab7      	ldr	r2, [pc, #732]	; (800afc8 <_dtoa_r+0x618>)
 800acec:	f003 030f 	and.w	r3, r3, #15
 800acf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	05d8      	lsls	r0, r3, #23
 800acfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad00:	d516      	bpl.n	800ad30 <_dtoa_r+0x380>
 800ad02:	4bb2      	ldr	r3, [pc, #712]	; (800afcc <_dtoa_r+0x61c>)
 800ad04:	ec51 0b19 	vmov	r0, r1, d9
 800ad08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad0c:	f7f5 fdd6 	bl	80008bc <__aeabi_ddiv>
 800ad10:	f007 070f 	and.w	r7, r7, #15
 800ad14:	4682      	mov	sl, r0
 800ad16:	468b      	mov	fp, r1
 800ad18:	2503      	movs	r5, #3
 800ad1a:	4eac      	ldr	r6, [pc, #688]	; (800afcc <_dtoa_r+0x61c>)
 800ad1c:	b957      	cbnz	r7, 800ad34 <_dtoa_r+0x384>
 800ad1e:	4642      	mov	r2, r8
 800ad20:	464b      	mov	r3, r9
 800ad22:	4650      	mov	r0, sl
 800ad24:	4659      	mov	r1, fp
 800ad26:	f7f5 fdc9 	bl	80008bc <__aeabi_ddiv>
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	468b      	mov	fp, r1
 800ad2e:	e028      	b.n	800ad82 <_dtoa_r+0x3d2>
 800ad30:	2502      	movs	r5, #2
 800ad32:	e7f2      	b.n	800ad1a <_dtoa_r+0x36a>
 800ad34:	07f9      	lsls	r1, r7, #31
 800ad36:	d508      	bpl.n	800ad4a <_dtoa_r+0x39a>
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad40:	f7f5 fc92 	bl	8000668 <__aeabi_dmul>
 800ad44:	3501      	adds	r5, #1
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	107f      	asrs	r7, r7, #1
 800ad4c:	3608      	adds	r6, #8
 800ad4e:	e7e5      	b.n	800ad1c <_dtoa_r+0x36c>
 800ad50:	f000 809b 	beq.w	800ae8a <_dtoa_r+0x4da>
 800ad54:	9b00      	ldr	r3, [sp, #0]
 800ad56:	4f9d      	ldr	r7, [pc, #628]	; (800afcc <_dtoa_r+0x61c>)
 800ad58:	425e      	negs	r6, r3
 800ad5a:	4b9b      	ldr	r3, [pc, #620]	; (800afc8 <_dtoa_r+0x618>)
 800ad5c:	f006 020f 	and.w	r2, r6, #15
 800ad60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	ec51 0b19 	vmov	r0, r1, d9
 800ad6c:	f7f5 fc7c 	bl	8000668 <__aeabi_dmul>
 800ad70:	1136      	asrs	r6, r6, #4
 800ad72:	4682      	mov	sl, r0
 800ad74:	468b      	mov	fp, r1
 800ad76:	2300      	movs	r3, #0
 800ad78:	2502      	movs	r5, #2
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d17a      	bne.n	800ae74 <_dtoa_r+0x4c4>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1d3      	bne.n	800ad2a <_dtoa_r+0x37a>
 800ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8082 	beq.w	800ae8e <_dtoa_r+0x4de>
 800ad8a:	4b91      	ldr	r3, [pc, #580]	; (800afd0 <_dtoa_r+0x620>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4650      	mov	r0, sl
 800ad90:	4659      	mov	r1, fp
 800ad92:	f7f5 fedb 	bl	8000b4c <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d079      	beq.n	800ae8e <_dtoa_r+0x4de>
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d076      	beq.n	800ae8e <_dtoa_r+0x4de>
 800ada0:	9b02      	ldr	r3, [sp, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd36      	ble.n	800ae14 <_dtoa_r+0x464>
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	4650      	mov	r0, sl
 800adaa:	4659      	mov	r1, fp
 800adac:	1e5f      	subs	r7, r3, #1
 800adae:	2200      	movs	r2, #0
 800adb0:	4b88      	ldr	r3, [pc, #544]	; (800afd4 <_dtoa_r+0x624>)
 800adb2:	f7f5 fc59 	bl	8000668 <__aeabi_dmul>
 800adb6:	9e02      	ldr	r6, [sp, #8]
 800adb8:	4682      	mov	sl, r0
 800adba:	468b      	mov	fp, r1
 800adbc:	3501      	adds	r5, #1
 800adbe:	4628      	mov	r0, r5
 800adc0:	f7f5 fbe8 	bl	8000594 <__aeabi_i2d>
 800adc4:	4652      	mov	r2, sl
 800adc6:	465b      	mov	r3, fp
 800adc8:	f7f5 fc4e 	bl	8000668 <__aeabi_dmul>
 800adcc:	4b82      	ldr	r3, [pc, #520]	; (800afd8 <_dtoa_r+0x628>)
 800adce:	2200      	movs	r2, #0
 800add0:	f7f5 fa94 	bl	80002fc <__adddf3>
 800add4:	46d0      	mov	r8, sl
 800add6:	46d9      	mov	r9, fp
 800add8:	4682      	mov	sl, r0
 800adda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800adde:	2e00      	cmp	r6, #0
 800ade0:	d158      	bne.n	800ae94 <_dtoa_r+0x4e4>
 800ade2:	4b7e      	ldr	r3, [pc, #504]	; (800afdc <_dtoa_r+0x62c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 fa85 	bl	80002f8 <__aeabi_dsub>
 800adee:	4652      	mov	r2, sl
 800adf0:	465b      	mov	r3, fp
 800adf2:	4680      	mov	r8, r0
 800adf4:	4689      	mov	r9, r1
 800adf6:	f7f5 fec7 	bl	8000b88 <__aeabi_dcmpgt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f040 8295 	bne.w	800b32a <_dtoa_r+0x97a>
 800ae00:	4652      	mov	r2, sl
 800ae02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae06:	4640      	mov	r0, r8
 800ae08:	4649      	mov	r1, r9
 800ae0a:	f7f5 fe9f 	bl	8000b4c <__aeabi_dcmplt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f040 8289 	bne.w	800b326 <_dtoa_r+0x976>
 800ae14:	ec5b ab19 	vmov	sl, fp, d9
 800ae18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f2c0 8148 	blt.w	800b0b0 <_dtoa_r+0x700>
 800ae20:	9a00      	ldr	r2, [sp, #0]
 800ae22:	2a0e      	cmp	r2, #14
 800ae24:	f300 8144 	bgt.w	800b0b0 <_dtoa_r+0x700>
 800ae28:	4b67      	ldr	r3, [pc, #412]	; (800afc8 <_dtoa_r+0x618>)
 800ae2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f280 80d5 	bge.w	800afe4 <_dtoa_r+0x634>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f300 80d1 	bgt.w	800afe4 <_dtoa_r+0x634>
 800ae42:	f040 826f 	bne.w	800b324 <_dtoa_r+0x974>
 800ae46:	4b65      	ldr	r3, [pc, #404]	; (800afdc <_dtoa_r+0x62c>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	f7f5 fc0b 	bl	8000668 <__aeabi_dmul>
 800ae52:	4652      	mov	r2, sl
 800ae54:	465b      	mov	r3, fp
 800ae56:	f7f5 fe8d 	bl	8000b74 <__aeabi_dcmpge>
 800ae5a:	9e03      	ldr	r6, [sp, #12]
 800ae5c:	4637      	mov	r7, r6
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f040 8245 	bne.w	800b2ee <_dtoa_r+0x93e>
 800ae64:	9d01      	ldr	r5, [sp, #4]
 800ae66:	2331      	movs	r3, #49	; 0x31
 800ae68:	f805 3b01 	strb.w	r3, [r5], #1
 800ae6c:	9b00      	ldr	r3, [sp, #0]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	e240      	b.n	800b2f6 <_dtoa_r+0x946>
 800ae74:	07f2      	lsls	r2, r6, #31
 800ae76:	d505      	bpl.n	800ae84 <_dtoa_r+0x4d4>
 800ae78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae7c:	f7f5 fbf4 	bl	8000668 <__aeabi_dmul>
 800ae80:	3501      	adds	r5, #1
 800ae82:	2301      	movs	r3, #1
 800ae84:	1076      	asrs	r6, r6, #1
 800ae86:	3708      	adds	r7, #8
 800ae88:	e777      	b.n	800ad7a <_dtoa_r+0x3ca>
 800ae8a:	2502      	movs	r5, #2
 800ae8c:	e779      	b.n	800ad82 <_dtoa_r+0x3d2>
 800ae8e:	9f00      	ldr	r7, [sp, #0]
 800ae90:	9e03      	ldr	r6, [sp, #12]
 800ae92:	e794      	b.n	800adbe <_dtoa_r+0x40e>
 800ae94:	9901      	ldr	r1, [sp, #4]
 800ae96:	4b4c      	ldr	r3, [pc, #304]	; (800afc8 <_dtoa_r+0x618>)
 800ae98:	4431      	add	r1, r6
 800ae9a:	910d      	str	r1, [sp, #52]	; 0x34
 800ae9c:	9908      	ldr	r1, [sp, #32]
 800ae9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d043      	beq.n	800af32 <_dtoa_r+0x582>
 800aeaa:	494d      	ldr	r1, [pc, #308]	; (800afe0 <_dtoa_r+0x630>)
 800aeac:	2000      	movs	r0, #0
 800aeae:	f7f5 fd05 	bl	80008bc <__aeabi_ddiv>
 800aeb2:	4652      	mov	r2, sl
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	f7f5 fa1f 	bl	80002f8 <__aeabi_dsub>
 800aeba:	9d01      	ldr	r5, [sp, #4]
 800aebc:	4682      	mov	sl, r0
 800aebe:	468b      	mov	fp, r1
 800aec0:	4649      	mov	r1, r9
 800aec2:	4640      	mov	r0, r8
 800aec4:	f7f5 fe80 	bl	8000bc8 <__aeabi_d2iz>
 800aec8:	4606      	mov	r6, r0
 800aeca:	f7f5 fb63 	bl	8000594 <__aeabi_i2d>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	4640      	mov	r0, r8
 800aed4:	4649      	mov	r1, r9
 800aed6:	f7f5 fa0f 	bl	80002f8 <__aeabi_dsub>
 800aeda:	3630      	adds	r6, #48	; 0x30
 800aedc:	f805 6b01 	strb.w	r6, [r5], #1
 800aee0:	4652      	mov	r2, sl
 800aee2:	465b      	mov	r3, fp
 800aee4:	4680      	mov	r8, r0
 800aee6:	4689      	mov	r9, r1
 800aee8:	f7f5 fe30 	bl	8000b4c <__aeabi_dcmplt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d163      	bne.n	800afb8 <_dtoa_r+0x608>
 800aef0:	4642      	mov	r2, r8
 800aef2:	464b      	mov	r3, r9
 800aef4:	4936      	ldr	r1, [pc, #216]	; (800afd0 <_dtoa_r+0x620>)
 800aef6:	2000      	movs	r0, #0
 800aef8:	f7f5 f9fe 	bl	80002f8 <__aeabi_dsub>
 800aefc:	4652      	mov	r2, sl
 800aefe:	465b      	mov	r3, fp
 800af00:	f7f5 fe24 	bl	8000b4c <__aeabi_dcmplt>
 800af04:	2800      	cmp	r0, #0
 800af06:	f040 80b5 	bne.w	800b074 <_dtoa_r+0x6c4>
 800af0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af0c:	429d      	cmp	r5, r3
 800af0e:	d081      	beq.n	800ae14 <_dtoa_r+0x464>
 800af10:	4b30      	ldr	r3, [pc, #192]	; (800afd4 <_dtoa_r+0x624>)
 800af12:	2200      	movs	r2, #0
 800af14:	4650      	mov	r0, sl
 800af16:	4659      	mov	r1, fp
 800af18:	f7f5 fba6 	bl	8000668 <__aeabi_dmul>
 800af1c:	4b2d      	ldr	r3, [pc, #180]	; (800afd4 <_dtoa_r+0x624>)
 800af1e:	4682      	mov	sl, r0
 800af20:	468b      	mov	fp, r1
 800af22:	4640      	mov	r0, r8
 800af24:	4649      	mov	r1, r9
 800af26:	2200      	movs	r2, #0
 800af28:	f7f5 fb9e 	bl	8000668 <__aeabi_dmul>
 800af2c:	4680      	mov	r8, r0
 800af2e:	4689      	mov	r9, r1
 800af30:	e7c6      	b.n	800aec0 <_dtoa_r+0x510>
 800af32:	4650      	mov	r0, sl
 800af34:	4659      	mov	r1, fp
 800af36:	f7f5 fb97 	bl	8000668 <__aeabi_dmul>
 800af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af3c:	9d01      	ldr	r5, [sp, #4]
 800af3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af40:	4682      	mov	sl, r0
 800af42:	468b      	mov	fp, r1
 800af44:	4649      	mov	r1, r9
 800af46:	4640      	mov	r0, r8
 800af48:	f7f5 fe3e 	bl	8000bc8 <__aeabi_d2iz>
 800af4c:	4606      	mov	r6, r0
 800af4e:	f7f5 fb21 	bl	8000594 <__aeabi_i2d>
 800af52:	3630      	adds	r6, #48	; 0x30
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4640      	mov	r0, r8
 800af5a:	4649      	mov	r1, r9
 800af5c:	f7f5 f9cc 	bl	80002f8 <__aeabi_dsub>
 800af60:	f805 6b01 	strb.w	r6, [r5], #1
 800af64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af66:	429d      	cmp	r5, r3
 800af68:	4680      	mov	r8, r0
 800af6a:	4689      	mov	r9, r1
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	d124      	bne.n	800afbc <_dtoa_r+0x60c>
 800af72:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <_dtoa_r+0x630>)
 800af74:	4650      	mov	r0, sl
 800af76:	4659      	mov	r1, fp
 800af78:	f7f5 f9c0 	bl	80002fc <__adddf3>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4640      	mov	r0, r8
 800af82:	4649      	mov	r1, r9
 800af84:	f7f5 fe00 	bl	8000b88 <__aeabi_dcmpgt>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d173      	bne.n	800b074 <_dtoa_r+0x6c4>
 800af8c:	4652      	mov	r2, sl
 800af8e:	465b      	mov	r3, fp
 800af90:	4913      	ldr	r1, [pc, #76]	; (800afe0 <_dtoa_r+0x630>)
 800af92:	2000      	movs	r0, #0
 800af94:	f7f5 f9b0 	bl	80002f8 <__aeabi_dsub>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4640      	mov	r0, r8
 800af9e:	4649      	mov	r1, r9
 800afa0:	f7f5 fdd4 	bl	8000b4c <__aeabi_dcmplt>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	f43f af35 	beq.w	800ae14 <_dtoa_r+0x464>
 800afaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800afac:	1e6b      	subs	r3, r5, #1
 800afae:	930f      	str	r3, [sp, #60]	; 0x3c
 800afb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afb4:	2b30      	cmp	r3, #48	; 0x30
 800afb6:	d0f8      	beq.n	800afaa <_dtoa_r+0x5fa>
 800afb8:	9700      	str	r7, [sp, #0]
 800afba:	e049      	b.n	800b050 <_dtoa_r+0x6a0>
 800afbc:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <_dtoa_r+0x624>)
 800afbe:	f7f5 fb53 	bl	8000668 <__aeabi_dmul>
 800afc2:	4680      	mov	r8, r0
 800afc4:	4689      	mov	r9, r1
 800afc6:	e7bd      	b.n	800af44 <_dtoa_r+0x594>
 800afc8:	0800d100 	.word	0x0800d100
 800afcc:	0800d0d8 	.word	0x0800d0d8
 800afd0:	3ff00000 	.word	0x3ff00000
 800afd4:	40240000 	.word	0x40240000
 800afd8:	401c0000 	.word	0x401c0000
 800afdc:	40140000 	.word	0x40140000
 800afe0:	3fe00000 	.word	0x3fe00000
 800afe4:	9d01      	ldr	r5, [sp, #4]
 800afe6:	4656      	mov	r6, sl
 800afe8:	465f      	mov	r7, fp
 800afea:	4642      	mov	r2, r8
 800afec:	464b      	mov	r3, r9
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fc63 	bl	80008bc <__aeabi_ddiv>
 800aff6:	f7f5 fde7 	bl	8000bc8 <__aeabi_d2iz>
 800affa:	4682      	mov	sl, r0
 800affc:	f7f5 faca 	bl	8000594 <__aeabi_i2d>
 800b000:	4642      	mov	r2, r8
 800b002:	464b      	mov	r3, r9
 800b004:	f7f5 fb30 	bl	8000668 <__aeabi_dmul>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b014:	f7f5 f970 	bl	80002f8 <__aeabi_dsub>
 800b018:	f805 6b01 	strb.w	r6, [r5], #1
 800b01c:	9e01      	ldr	r6, [sp, #4]
 800b01e:	9f03      	ldr	r7, [sp, #12]
 800b020:	1bae      	subs	r6, r5, r6
 800b022:	42b7      	cmp	r7, r6
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	d135      	bne.n	800b096 <_dtoa_r+0x6e6>
 800b02a:	f7f5 f967 	bl	80002fc <__adddf3>
 800b02e:	4642      	mov	r2, r8
 800b030:	464b      	mov	r3, r9
 800b032:	4606      	mov	r6, r0
 800b034:	460f      	mov	r7, r1
 800b036:	f7f5 fda7 	bl	8000b88 <__aeabi_dcmpgt>
 800b03a:	b9d0      	cbnz	r0, 800b072 <_dtoa_r+0x6c2>
 800b03c:	4642      	mov	r2, r8
 800b03e:	464b      	mov	r3, r9
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 fd78 	bl	8000b38 <__aeabi_dcmpeq>
 800b048:	b110      	cbz	r0, 800b050 <_dtoa_r+0x6a0>
 800b04a:	f01a 0f01 	tst.w	sl, #1
 800b04e:	d110      	bne.n	800b072 <_dtoa_r+0x6c2>
 800b050:	4620      	mov	r0, r4
 800b052:	ee18 1a10 	vmov	r1, s16
 800b056:	f000 fb05 	bl	800b664 <_Bfree>
 800b05a:	2300      	movs	r3, #0
 800b05c:	9800      	ldr	r0, [sp, #0]
 800b05e:	702b      	strb	r3, [r5, #0]
 800b060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b062:	3001      	adds	r0, #1
 800b064:	6018      	str	r0, [r3, #0]
 800b066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f43f acf1 	beq.w	800aa50 <_dtoa_r+0xa0>
 800b06e:	601d      	str	r5, [r3, #0]
 800b070:	e4ee      	b.n	800aa50 <_dtoa_r+0xa0>
 800b072:	9f00      	ldr	r7, [sp, #0]
 800b074:	462b      	mov	r3, r5
 800b076:	461d      	mov	r5, r3
 800b078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b07c:	2a39      	cmp	r2, #57	; 0x39
 800b07e:	d106      	bne.n	800b08e <_dtoa_r+0x6de>
 800b080:	9a01      	ldr	r2, [sp, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d1f7      	bne.n	800b076 <_dtoa_r+0x6c6>
 800b086:	9901      	ldr	r1, [sp, #4]
 800b088:	2230      	movs	r2, #48	; 0x30
 800b08a:	3701      	adds	r7, #1
 800b08c:	700a      	strb	r2, [r1, #0]
 800b08e:	781a      	ldrb	r2, [r3, #0]
 800b090:	3201      	adds	r2, #1
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	e790      	b.n	800afb8 <_dtoa_r+0x608>
 800b096:	4ba6      	ldr	r3, [pc, #664]	; (800b330 <_dtoa_r+0x980>)
 800b098:	2200      	movs	r2, #0
 800b09a:	f7f5 fae5 	bl	8000668 <__aeabi_dmul>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	f7f5 fd47 	bl	8000b38 <__aeabi_dcmpeq>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d09d      	beq.n	800afea <_dtoa_r+0x63a>
 800b0ae:	e7cf      	b.n	800b050 <_dtoa_r+0x6a0>
 800b0b0:	9a08      	ldr	r2, [sp, #32]
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	f000 80d7 	beq.w	800b266 <_dtoa_r+0x8b6>
 800b0b8:	9a06      	ldr	r2, [sp, #24]
 800b0ba:	2a01      	cmp	r2, #1
 800b0bc:	f300 80ba 	bgt.w	800b234 <_dtoa_r+0x884>
 800b0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0c2:	2a00      	cmp	r2, #0
 800b0c4:	f000 80b2 	beq.w	800b22c <_dtoa_r+0x87c>
 800b0c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0cc:	9e07      	ldr	r6, [sp, #28]
 800b0ce:	9d04      	ldr	r5, [sp, #16]
 800b0d0:	9a04      	ldr	r2, [sp, #16]
 800b0d2:	441a      	add	r2, r3
 800b0d4:	9204      	str	r2, [sp, #16]
 800b0d6:	9a05      	ldr	r2, [sp, #20]
 800b0d8:	2101      	movs	r1, #1
 800b0da:	441a      	add	r2, r3
 800b0dc:	4620      	mov	r0, r4
 800b0de:	9205      	str	r2, [sp, #20]
 800b0e0:	f000 fb78 	bl	800b7d4 <__i2b>
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	dd0c      	ble.n	800b104 <_dtoa_r+0x754>
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd09      	ble.n	800b104 <_dtoa_r+0x754>
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	9a04      	ldr	r2, [sp, #16]
 800b0f4:	bfa8      	it	ge
 800b0f6:	462b      	movge	r3, r5
 800b0f8:	1ad2      	subs	r2, r2, r3
 800b0fa:	9204      	str	r2, [sp, #16]
 800b0fc:	9a05      	ldr	r2, [sp, #20]
 800b0fe:	1aed      	subs	r5, r5, r3
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	9305      	str	r3, [sp, #20]
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	b31b      	cbz	r3, 800b150 <_dtoa_r+0x7a0>
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 80af 	beq.w	800b26e <_dtoa_r+0x8be>
 800b110:	2e00      	cmp	r6, #0
 800b112:	dd13      	ble.n	800b13c <_dtoa_r+0x78c>
 800b114:	4639      	mov	r1, r7
 800b116:	4632      	mov	r2, r6
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fc1b 	bl	800b954 <__pow5mult>
 800b11e:	ee18 2a10 	vmov	r2, s16
 800b122:	4601      	mov	r1, r0
 800b124:	4607      	mov	r7, r0
 800b126:	4620      	mov	r0, r4
 800b128:	f000 fb6a 	bl	800b800 <__multiply>
 800b12c:	ee18 1a10 	vmov	r1, s16
 800b130:	4680      	mov	r8, r0
 800b132:	4620      	mov	r0, r4
 800b134:	f000 fa96 	bl	800b664 <_Bfree>
 800b138:	ee08 8a10 	vmov	s16, r8
 800b13c:	9b07      	ldr	r3, [sp, #28]
 800b13e:	1b9a      	subs	r2, r3, r6
 800b140:	d006      	beq.n	800b150 <_dtoa_r+0x7a0>
 800b142:	ee18 1a10 	vmov	r1, s16
 800b146:	4620      	mov	r0, r4
 800b148:	f000 fc04 	bl	800b954 <__pow5mult>
 800b14c:	ee08 0a10 	vmov	s16, r0
 800b150:	2101      	movs	r1, #1
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fb3e 	bl	800b7d4 <__i2b>
 800b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	4606      	mov	r6, r0
 800b15e:	f340 8088 	ble.w	800b272 <_dtoa_r+0x8c2>
 800b162:	461a      	mov	r2, r3
 800b164:	4601      	mov	r1, r0
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fbf4 	bl	800b954 <__pow5mult>
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	4606      	mov	r6, r0
 800b172:	f340 8081 	ble.w	800b278 <_dtoa_r+0x8c8>
 800b176:	f04f 0800 	mov.w	r8, #0
 800b17a:	6933      	ldr	r3, [r6, #16]
 800b17c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b180:	6918      	ldr	r0, [r3, #16]
 800b182:	f000 fad7 	bl	800b734 <__hi0bits>
 800b186:	f1c0 0020 	rsb	r0, r0, #32
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	4418      	add	r0, r3
 800b18e:	f010 001f 	ands.w	r0, r0, #31
 800b192:	f000 8092 	beq.w	800b2ba <_dtoa_r+0x90a>
 800b196:	f1c0 0320 	rsb	r3, r0, #32
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	f340 808a 	ble.w	800b2b4 <_dtoa_r+0x904>
 800b1a0:	f1c0 001c 	rsb	r0, r0, #28
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	4403      	add	r3, r0
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	4403      	add	r3, r0
 800b1ae:	4405      	add	r5, r0
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dd07      	ble.n	800b1c8 <_dtoa_r+0x818>
 800b1b8:	ee18 1a10 	vmov	r1, s16
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fc22 	bl	800ba08 <__lshift>
 800b1c4:	ee08 0a10 	vmov	s16, r0
 800b1c8:	9b05      	ldr	r3, [sp, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dd05      	ble.n	800b1da <_dtoa_r+0x82a>
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fc18 	bl	800ba08 <__lshift>
 800b1d8:	4606      	mov	r6, r0
 800b1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d06e      	beq.n	800b2be <_dtoa_r+0x90e>
 800b1e0:	ee18 0a10 	vmov	r0, s16
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	f000 fc7f 	bl	800bae8 <__mcmp>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	da67      	bge.n	800b2be <_dtoa_r+0x90e>
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	ee18 1a10 	vmov	r1, s16
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fa53 	bl	800b6a8 <__multadd>
 800b202:	9b08      	ldr	r3, [sp, #32]
 800b204:	ee08 0a10 	vmov	s16, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 81b1 	beq.w	800b570 <_dtoa_r+0xbc0>
 800b20e:	2300      	movs	r3, #0
 800b210:	4639      	mov	r1, r7
 800b212:	220a      	movs	r2, #10
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fa47 	bl	800b6a8 <__multadd>
 800b21a:	9b02      	ldr	r3, [sp, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	4607      	mov	r7, r0
 800b220:	f300 808e 	bgt.w	800b340 <_dtoa_r+0x990>
 800b224:	9b06      	ldr	r3, [sp, #24]
 800b226:	2b02      	cmp	r3, #2
 800b228:	dc51      	bgt.n	800b2ce <_dtoa_r+0x91e>
 800b22a:	e089      	b.n	800b340 <_dtoa_r+0x990>
 800b22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b22e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b232:	e74b      	b.n	800b0cc <_dtoa_r+0x71c>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	1e5e      	subs	r6, r3, #1
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	42b3      	cmp	r3, r6
 800b23c:	bfbf      	itttt	lt
 800b23e:	9b07      	ldrlt	r3, [sp, #28]
 800b240:	9607      	strlt	r6, [sp, #28]
 800b242:	1af2      	sublt	r2, r6, r3
 800b244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b246:	bfb6      	itet	lt
 800b248:	189b      	addlt	r3, r3, r2
 800b24a:	1b9e      	subge	r6, r3, r6
 800b24c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	bfb8      	it	lt
 800b252:	2600      	movlt	r6, #0
 800b254:	2b00      	cmp	r3, #0
 800b256:	bfb7      	itett	lt
 800b258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b25c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b260:	1a9d      	sublt	r5, r3, r2
 800b262:	2300      	movlt	r3, #0
 800b264:	e734      	b.n	800b0d0 <_dtoa_r+0x720>
 800b266:	9e07      	ldr	r6, [sp, #28]
 800b268:	9d04      	ldr	r5, [sp, #16]
 800b26a:	9f08      	ldr	r7, [sp, #32]
 800b26c:	e73b      	b.n	800b0e6 <_dtoa_r+0x736>
 800b26e:	9a07      	ldr	r2, [sp, #28]
 800b270:	e767      	b.n	800b142 <_dtoa_r+0x792>
 800b272:	9b06      	ldr	r3, [sp, #24]
 800b274:	2b01      	cmp	r3, #1
 800b276:	dc18      	bgt.n	800b2aa <_dtoa_r+0x8fa>
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	d115      	bne.n	800b2aa <_dtoa_r+0x8fa>
 800b27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b282:	b993      	cbnz	r3, 800b2aa <_dtoa_r+0x8fa>
 800b284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b288:	0d1b      	lsrs	r3, r3, #20
 800b28a:	051b      	lsls	r3, r3, #20
 800b28c:	b183      	cbz	r3, 800b2b0 <_dtoa_r+0x900>
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	3301      	adds	r3, #1
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	9b05      	ldr	r3, [sp, #20]
 800b296:	3301      	adds	r3, #1
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	f04f 0801 	mov.w	r8, #1
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f47f af6a 	bne.w	800b17a <_dtoa_r+0x7ca>
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	e76f      	b.n	800b18a <_dtoa_r+0x7da>
 800b2aa:	f04f 0800 	mov.w	r8, #0
 800b2ae:	e7f6      	b.n	800b29e <_dtoa_r+0x8ee>
 800b2b0:	4698      	mov	r8, r3
 800b2b2:	e7f4      	b.n	800b29e <_dtoa_r+0x8ee>
 800b2b4:	f43f af7d 	beq.w	800b1b2 <_dtoa_r+0x802>
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	301c      	adds	r0, #28
 800b2bc:	e772      	b.n	800b1a4 <_dtoa_r+0x7f4>
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc37      	bgt.n	800b334 <_dtoa_r+0x984>
 800b2c4:	9b06      	ldr	r3, [sp, #24]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	dd34      	ble.n	800b334 <_dtoa_r+0x984>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	9302      	str	r3, [sp, #8]
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	b96b      	cbnz	r3, 800b2ee <_dtoa_r+0x93e>
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	2205      	movs	r2, #5
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 f9e6 	bl	800b6a8 <__multadd>
 800b2dc:	4601      	mov	r1, r0
 800b2de:	4606      	mov	r6, r0
 800b2e0:	ee18 0a10 	vmov	r0, s16
 800b2e4:	f000 fc00 	bl	800bae8 <__mcmp>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f73f adbb 	bgt.w	800ae64 <_dtoa_r+0x4b4>
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	9d01      	ldr	r5, [sp, #4]
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	f04f 0800 	mov.w	r8, #0
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 f9b1 	bl	800b664 <_Bfree>
 800b302:	2f00      	cmp	r7, #0
 800b304:	f43f aea4 	beq.w	800b050 <_dtoa_r+0x6a0>
 800b308:	f1b8 0f00 	cmp.w	r8, #0
 800b30c:	d005      	beq.n	800b31a <_dtoa_r+0x96a>
 800b30e:	45b8      	cmp	r8, r7
 800b310:	d003      	beq.n	800b31a <_dtoa_r+0x96a>
 800b312:	4641      	mov	r1, r8
 800b314:	4620      	mov	r0, r4
 800b316:	f000 f9a5 	bl	800b664 <_Bfree>
 800b31a:	4639      	mov	r1, r7
 800b31c:	4620      	mov	r0, r4
 800b31e:	f000 f9a1 	bl	800b664 <_Bfree>
 800b322:	e695      	b.n	800b050 <_dtoa_r+0x6a0>
 800b324:	2600      	movs	r6, #0
 800b326:	4637      	mov	r7, r6
 800b328:	e7e1      	b.n	800b2ee <_dtoa_r+0x93e>
 800b32a:	9700      	str	r7, [sp, #0]
 800b32c:	4637      	mov	r7, r6
 800b32e:	e599      	b.n	800ae64 <_dtoa_r+0x4b4>
 800b330:	40240000 	.word	0x40240000
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 80ca 	beq.w	800b4d0 <_dtoa_r+0xb20>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	2d00      	cmp	r5, #0
 800b342:	dd05      	ble.n	800b350 <_dtoa_r+0x9a0>
 800b344:	4639      	mov	r1, r7
 800b346:	462a      	mov	r2, r5
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fb5d 	bl	800ba08 <__lshift>
 800b34e:	4607      	mov	r7, r0
 800b350:	f1b8 0f00 	cmp.w	r8, #0
 800b354:	d05b      	beq.n	800b40e <_dtoa_r+0xa5e>
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 f943 	bl	800b5e4 <_Balloc>
 800b35e:	4605      	mov	r5, r0
 800b360:	b928      	cbnz	r0, 800b36e <_dtoa_r+0x9be>
 800b362:	4b87      	ldr	r3, [pc, #540]	; (800b580 <_dtoa_r+0xbd0>)
 800b364:	4602      	mov	r2, r0
 800b366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b36a:	f7ff bb3b 	b.w	800a9e4 <_dtoa_r+0x34>
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	3202      	adds	r2, #2
 800b372:	0092      	lsls	r2, r2, #2
 800b374:	f107 010c 	add.w	r1, r7, #12
 800b378:	300c      	adds	r0, #12
 800b37a:	f000 f925 	bl	800b5c8 <memcpy>
 800b37e:	2201      	movs	r2, #1
 800b380:	4629      	mov	r1, r5
 800b382:	4620      	mov	r0, r4
 800b384:	f000 fb40 	bl	800ba08 <__lshift>
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	f103 0901 	add.w	r9, r3, #1
 800b38e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b392:	4413      	add	r3, r2
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	f00a 0301 	and.w	r3, sl, #1
 800b39a:	46b8      	mov	r8, r7
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	4607      	mov	r7, r0
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	ee18 0a10 	vmov	r0, s16
 800b3a6:	f7ff fa75 	bl	800a894 <quorem>
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	9002      	str	r0, [sp, #8]
 800b3ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3b2:	ee18 0a10 	vmov	r0, s16
 800b3b6:	f000 fb97 	bl	800bae8 <__mcmp>
 800b3ba:	463a      	mov	r2, r7
 800b3bc:	9003      	str	r0, [sp, #12]
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fbad 	bl	800bb20 <__mdiff>
 800b3c6:	68c2      	ldr	r2, [r0, #12]
 800b3c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	bb02      	cbnz	r2, 800b412 <_dtoa_r+0xa62>
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	ee18 0a10 	vmov	r0, s16
 800b3d6:	f000 fb87 	bl	800bae8 <__mcmp>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4620      	mov	r0, r4
 800b3e0:	9207      	str	r2, [sp, #28]
 800b3e2:	f000 f93f 	bl	800b664 <_Bfree>
 800b3e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b3ea:	ea43 0102 	orr.w	r1, r3, r2
 800b3ee:	9b04      	ldr	r3, [sp, #16]
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	464d      	mov	r5, r9
 800b3f4:	d10f      	bne.n	800b416 <_dtoa_r+0xa66>
 800b3f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3fa:	d02a      	beq.n	800b452 <_dtoa_r+0xaa2>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd02      	ble.n	800b408 <_dtoa_r+0xa58>
 800b402:	9b02      	ldr	r3, [sp, #8]
 800b404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b408:	f88b a000 	strb.w	sl, [fp]
 800b40c:	e775      	b.n	800b2fa <_dtoa_r+0x94a>
 800b40e:	4638      	mov	r0, r7
 800b410:	e7ba      	b.n	800b388 <_dtoa_r+0x9d8>
 800b412:	2201      	movs	r2, #1
 800b414:	e7e2      	b.n	800b3dc <_dtoa_r+0xa2c>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	db04      	blt.n	800b426 <_dtoa_r+0xa76>
 800b41c:	9906      	ldr	r1, [sp, #24]
 800b41e:	430b      	orrs	r3, r1
 800b420:	9904      	ldr	r1, [sp, #16]
 800b422:	430b      	orrs	r3, r1
 800b424:	d122      	bne.n	800b46c <_dtoa_r+0xabc>
 800b426:	2a00      	cmp	r2, #0
 800b428:	ddee      	ble.n	800b408 <_dtoa_r+0xa58>
 800b42a:	ee18 1a10 	vmov	r1, s16
 800b42e:	2201      	movs	r2, #1
 800b430:	4620      	mov	r0, r4
 800b432:	f000 fae9 	bl	800ba08 <__lshift>
 800b436:	4631      	mov	r1, r6
 800b438:	ee08 0a10 	vmov	s16, r0
 800b43c:	f000 fb54 	bl	800bae8 <__mcmp>
 800b440:	2800      	cmp	r0, #0
 800b442:	dc03      	bgt.n	800b44c <_dtoa_r+0xa9c>
 800b444:	d1e0      	bne.n	800b408 <_dtoa_r+0xa58>
 800b446:	f01a 0f01 	tst.w	sl, #1
 800b44a:	d0dd      	beq.n	800b408 <_dtoa_r+0xa58>
 800b44c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b450:	d1d7      	bne.n	800b402 <_dtoa_r+0xa52>
 800b452:	2339      	movs	r3, #57	; 0x39
 800b454:	f88b 3000 	strb.w	r3, [fp]
 800b458:	462b      	mov	r3, r5
 800b45a:	461d      	mov	r5, r3
 800b45c:	3b01      	subs	r3, #1
 800b45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b462:	2a39      	cmp	r2, #57	; 0x39
 800b464:	d071      	beq.n	800b54a <_dtoa_r+0xb9a>
 800b466:	3201      	adds	r2, #1
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	e746      	b.n	800b2fa <_dtoa_r+0x94a>
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	dd07      	ble.n	800b480 <_dtoa_r+0xad0>
 800b470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b474:	d0ed      	beq.n	800b452 <_dtoa_r+0xaa2>
 800b476:	f10a 0301 	add.w	r3, sl, #1
 800b47a:	f88b 3000 	strb.w	r3, [fp]
 800b47e:	e73c      	b.n	800b2fa <_dtoa_r+0x94a>
 800b480:	9b05      	ldr	r3, [sp, #20]
 800b482:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b486:	4599      	cmp	r9, r3
 800b488:	d047      	beq.n	800b51a <_dtoa_r+0xb6a>
 800b48a:	ee18 1a10 	vmov	r1, s16
 800b48e:	2300      	movs	r3, #0
 800b490:	220a      	movs	r2, #10
 800b492:	4620      	mov	r0, r4
 800b494:	f000 f908 	bl	800b6a8 <__multadd>
 800b498:	45b8      	cmp	r8, r7
 800b49a:	ee08 0a10 	vmov	s16, r0
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	f04f 020a 	mov.w	r2, #10
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	d106      	bne.n	800b4ba <_dtoa_r+0xb0a>
 800b4ac:	f000 f8fc 	bl	800b6a8 <__multadd>
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4607      	mov	r7, r0
 800b4b4:	f109 0901 	add.w	r9, r9, #1
 800b4b8:	e772      	b.n	800b3a0 <_dtoa_r+0x9f0>
 800b4ba:	f000 f8f5 	bl	800b6a8 <__multadd>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 f8ee 	bl	800b6a8 <__multadd>
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	e7f1      	b.n	800b4b4 <_dtoa_r+0xb04>
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	9302      	str	r3, [sp, #8]
 800b4d4:	9d01      	ldr	r5, [sp, #4]
 800b4d6:	ee18 0a10 	vmov	r0, s16
 800b4da:	4631      	mov	r1, r6
 800b4dc:	f7ff f9da 	bl	800a894 <quorem>
 800b4e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b4e4:	9b01      	ldr	r3, [sp, #4]
 800b4e6:	f805 ab01 	strb.w	sl, [r5], #1
 800b4ea:	1aea      	subs	r2, r5, r3
 800b4ec:	9b02      	ldr	r3, [sp, #8]
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	dd09      	ble.n	800b506 <_dtoa_r+0xb56>
 800b4f2:	ee18 1a10 	vmov	r1, s16
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	220a      	movs	r2, #10
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 f8d4 	bl	800b6a8 <__multadd>
 800b500:	ee08 0a10 	vmov	s16, r0
 800b504:	e7e7      	b.n	800b4d6 <_dtoa_r+0xb26>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfc8      	it	gt
 800b50c:	461d      	movgt	r5, r3
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	bfd8      	it	le
 800b512:	2501      	movle	r5, #1
 800b514:	441d      	add	r5, r3
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	ee18 1a10 	vmov	r1, s16
 800b51e:	2201      	movs	r2, #1
 800b520:	4620      	mov	r0, r4
 800b522:	f000 fa71 	bl	800ba08 <__lshift>
 800b526:	4631      	mov	r1, r6
 800b528:	ee08 0a10 	vmov	s16, r0
 800b52c:	f000 fadc 	bl	800bae8 <__mcmp>
 800b530:	2800      	cmp	r0, #0
 800b532:	dc91      	bgt.n	800b458 <_dtoa_r+0xaa8>
 800b534:	d102      	bne.n	800b53c <_dtoa_r+0xb8c>
 800b536:	f01a 0f01 	tst.w	sl, #1
 800b53a:	d18d      	bne.n	800b458 <_dtoa_r+0xaa8>
 800b53c:	462b      	mov	r3, r5
 800b53e:	461d      	mov	r5, r3
 800b540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b544:	2a30      	cmp	r2, #48	; 0x30
 800b546:	d0fa      	beq.n	800b53e <_dtoa_r+0xb8e>
 800b548:	e6d7      	b.n	800b2fa <_dtoa_r+0x94a>
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d184      	bne.n	800b45a <_dtoa_r+0xaaa>
 800b550:	9b00      	ldr	r3, [sp, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	2331      	movs	r3, #49	; 0x31
 800b558:	7013      	strb	r3, [r2, #0]
 800b55a:	e6ce      	b.n	800b2fa <_dtoa_r+0x94a>
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <_dtoa_r+0xbd4>)
 800b55e:	f7ff ba95 	b.w	800aa8c <_dtoa_r+0xdc>
 800b562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b564:	2b00      	cmp	r3, #0
 800b566:	f47f aa6e 	bne.w	800aa46 <_dtoa_r+0x96>
 800b56a:	4b07      	ldr	r3, [pc, #28]	; (800b588 <_dtoa_r+0xbd8>)
 800b56c:	f7ff ba8e 	b.w	800aa8c <_dtoa_r+0xdc>
 800b570:	9b02      	ldr	r3, [sp, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dcae      	bgt.n	800b4d4 <_dtoa_r+0xb24>
 800b576:	9b06      	ldr	r3, [sp, #24]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	f73f aea8 	bgt.w	800b2ce <_dtoa_r+0x91e>
 800b57e:	e7a9      	b.n	800b4d4 <_dtoa_r+0xb24>
 800b580:	0800d065 	.word	0x0800d065
 800b584:	0800ce28 	.word	0x0800ce28
 800b588:	0800cffd 	.word	0x0800cffd

0800b58c <fiprintf>:
 800b58c:	b40e      	push	{r1, r2, r3}
 800b58e:	b503      	push	{r0, r1, lr}
 800b590:	4601      	mov	r1, r0
 800b592:	ab03      	add	r3, sp, #12
 800b594:	4805      	ldr	r0, [pc, #20]	; (800b5ac <fiprintf+0x20>)
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f000 fe21 	bl	800c1e4 <_vfiprintf_r>
 800b5a2:	b002      	add	sp, #8
 800b5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a8:	b003      	add	sp, #12
 800b5aa:	4770      	bx	lr
 800b5ac:	20000208 	.word	0x20000208

0800b5b0 <_localeconv_r>:
 800b5b0:	4800      	ldr	r0, [pc, #0]	; (800b5b4 <_localeconv_r+0x4>)
 800b5b2:	4770      	bx	lr
 800b5b4:	2000035c 	.word	0x2000035c

0800b5b8 <malloc>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <malloc+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f000 bc17 	b.w	800bdf0 <_malloc_r>
 800b5c2:	bf00      	nop
 800b5c4:	20000208 	.word	0x20000208

0800b5c8 <memcpy>:
 800b5c8:	440a      	add	r2, r1
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5d0:	d100      	bne.n	800b5d4 <memcpy+0xc>
 800b5d2:	4770      	bx	lr
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5de:	4291      	cmp	r1, r2
 800b5e0:	d1f9      	bne.n	800b5d6 <memcpy+0xe>
 800b5e2:	bd10      	pop	{r4, pc}

0800b5e4 <_Balloc>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	b976      	cbnz	r6, 800b60c <_Balloc+0x28>
 800b5ee:	2010      	movs	r0, #16
 800b5f0:	f7ff ffe2 	bl	800b5b8 <malloc>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5f8:	b920      	cbnz	r0, 800b604 <_Balloc+0x20>
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <_Balloc+0x78>)
 800b5fc:	4818      	ldr	r0, [pc, #96]	; (800b660 <_Balloc+0x7c>)
 800b5fe:	2166      	movs	r1, #102	; 0x66
 800b600:	f7ff f92a 	bl	800a858 <__assert_func>
 800b604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b608:	6006      	str	r6, [r0, #0]
 800b60a:	60c6      	str	r6, [r0, #12]
 800b60c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b60e:	68f3      	ldr	r3, [r6, #12]
 800b610:	b183      	cbz	r3, 800b634 <_Balloc+0x50>
 800b612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b61a:	b9b8      	cbnz	r0, 800b64c <_Balloc+0x68>
 800b61c:	2101      	movs	r1, #1
 800b61e:	fa01 f605 	lsl.w	r6, r1, r5
 800b622:	1d72      	adds	r2, r6, #5
 800b624:	0092      	lsls	r2, r2, #2
 800b626:	4620      	mov	r0, r4
 800b628:	f000 fb60 	bl	800bcec <_calloc_r>
 800b62c:	b160      	cbz	r0, 800b648 <_Balloc+0x64>
 800b62e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b632:	e00e      	b.n	800b652 <_Balloc+0x6e>
 800b634:	2221      	movs	r2, #33	; 0x21
 800b636:	2104      	movs	r1, #4
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fb57 	bl	800bcec <_calloc_r>
 800b63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b640:	60f0      	str	r0, [r6, #12]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1e4      	bne.n	800b612 <_Balloc+0x2e>
 800b648:	2000      	movs	r0, #0
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	6802      	ldr	r2, [r0, #0]
 800b64e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b652:	2300      	movs	r3, #0
 800b654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b658:	e7f7      	b.n	800b64a <_Balloc+0x66>
 800b65a:	bf00      	nop
 800b65c:	0800ce4c 	.word	0x0800ce4c
 800b660:	0800d076 	.word	0x0800d076

0800b664 <_Bfree>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b976      	cbnz	r6, 800b68c <_Bfree+0x28>
 800b66e:	2010      	movs	r0, #16
 800b670:	f7ff ffa2 	bl	800b5b8 <malloc>
 800b674:	4602      	mov	r2, r0
 800b676:	6268      	str	r0, [r5, #36]	; 0x24
 800b678:	b920      	cbnz	r0, 800b684 <_Bfree+0x20>
 800b67a:	4b09      	ldr	r3, [pc, #36]	; (800b6a0 <_Bfree+0x3c>)
 800b67c:	4809      	ldr	r0, [pc, #36]	; (800b6a4 <_Bfree+0x40>)
 800b67e:	218a      	movs	r1, #138	; 0x8a
 800b680:	f7ff f8ea 	bl	800a858 <__assert_func>
 800b684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b688:	6006      	str	r6, [r0, #0]
 800b68a:	60c6      	str	r6, [r0, #12]
 800b68c:	b13c      	cbz	r4, 800b69e <_Bfree+0x3a>
 800b68e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b690:	6862      	ldr	r2, [r4, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b698:	6021      	str	r1, [r4, #0]
 800b69a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	0800ce4c 	.word	0x0800ce4c
 800b6a4:	0800d076 	.word	0x0800d076

0800b6a8 <__multadd>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	690d      	ldr	r5, [r1, #16]
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	461e      	mov	r6, r3
 800b6b4:	f101 0c14 	add.w	ip, r1, #20
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b6be:	b299      	uxth	r1, r3
 800b6c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b6c4:	0c1e      	lsrs	r6, r3, #16
 800b6c6:	0c0b      	lsrs	r3, r1, #16
 800b6c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b6cc:	b289      	uxth	r1, r1
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6d4:	4285      	cmp	r5, r0
 800b6d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b6da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6de:	dcec      	bgt.n	800b6ba <__multadd+0x12>
 800b6e0:	b30e      	cbz	r6, 800b726 <__multadd+0x7e>
 800b6e2:	68a3      	ldr	r3, [r4, #8]
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc19      	bgt.n	800b71c <__multadd+0x74>
 800b6e8:	6861      	ldr	r1, [r4, #4]
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	3101      	adds	r1, #1
 800b6ee:	f7ff ff79 	bl	800b5e4 <_Balloc>
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	b928      	cbnz	r0, 800b702 <__multadd+0x5a>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <__multadd+0x84>)
 800b6fa:	480d      	ldr	r0, [pc, #52]	; (800b730 <__multadd+0x88>)
 800b6fc:	21b5      	movs	r1, #181	; 0xb5
 800b6fe:	f7ff f8ab 	bl	800a858 <__assert_func>
 800b702:	6922      	ldr	r2, [r4, #16]
 800b704:	3202      	adds	r2, #2
 800b706:	f104 010c 	add.w	r1, r4, #12
 800b70a:	0092      	lsls	r2, r2, #2
 800b70c:	300c      	adds	r0, #12
 800b70e:	f7ff ff5b 	bl	800b5c8 <memcpy>
 800b712:	4621      	mov	r1, r4
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff ffa5 	bl	800b664 <_Bfree>
 800b71a:	4644      	mov	r4, r8
 800b71c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b720:	3501      	adds	r5, #1
 800b722:	615e      	str	r6, [r3, #20]
 800b724:	6125      	str	r5, [r4, #16]
 800b726:	4620      	mov	r0, r4
 800b728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b72c:	0800d065 	.word	0x0800d065
 800b730:	0800d076 	.word	0x0800d076

0800b734 <__hi0bits>:
 800b734:	0c03      	lsrs	r3, r0, #16
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	b9d3      	cbnz	r3, 800b770 <__hi0bits+0x3c>
 800b73a:	0400      	lsls	r0, r0, #16
 800b73c:	2310      	movs	r3, #16
 800b73e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b742:	bf04      	itt	eq
 800b744:	0200      	lsleq	r0, r0, #8
 800b746:	3308      	addeq	r3, #8
 800b748:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b74c:	bf04      	itt	eq
 800b74e:	0100      	lsleq	r0, r0, #4
 800b750:	3304      	addeq	r3, #4
 800b752:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b756:	bf04      	itt	eq
 800b758:	0080      	lsleq	r0, r0, #2
 800b75a:	3302      	addeq	r3, #2
 800b75c:	2800      	cmp	r0, #0
 800b75e:	db05      	blt.n	800b76c <__hi0bits+0x38>
 800b760:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b764:	f103 0301 	add.w	r3, r3, #1
 800b768:	bf08      	it	eq
 800b76a:	2320      	moveq	r3, #32
 800b76c:	4618      	mov	r0, r3
 800b76e:	4770      	bx	lr
 800b770:	2300      	movs	r3, #0
 800b772:	e7e4      	b.n	800b73e <__hi0bits+0xa>

0800b774 <__lo0bits>:
 800b774:	6803      	ldr	r3, [r0, #0]
 800b776:	f013 0207 	ands.w	r2, r3, #7
 800b77a:	4601      	mov	r1, r0
 800b77c:	d00b      	beq.n	800b796 <__lo0bits+0x22>
 800b77e:	07da      	lsls	r2, r3, #31
 800b780:	d423      	bmi.n	800b7ca <__lo0bits+0x56>
 800b782:	0798      	lsls	r0, r3, #30
 800b784:	bf49      	itett	mi
 800b786:	085b      	lsrmi	r3, r3, #1
 800b788:	089b      	lsrpl	r3, r3, #2
 800b78a:	2001      	movmi	r0, #1
 800b78c:	600b      	strmi	r3, [r1, #0]
 800b78e:	bf5c      	itt	pl
 800b790:	600b      	strpl	r3, [r1, #0]
 800b792:	2002      	movpl	r0, #2
 800b794:	4770      	bx	lr
 800b796:	b298      	uxth	r0, r3
 800b798:	b9a8      	cbnz	r0, 800b7c6 <__lo0bits+0x52>
 800b79a:	0c1b      	lsrs	r3, r3, #16
 800b79c:	2010      	movs	r0, #16
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	b90a      	cbnz	r2, 800b7a6 <__lo0bits+0x32>
 800b7a2:	3008      	adds	r0, #8
 800b7a4:	0a1b      	lsrs	r3, r3, #8
 800b7a6:	071a      	lsls	r2, r3, #28
 800b7a8:	bf04      	itt	eq
 800b7aa:	091b      	lsreq	r3, r3, #4
 800b7ac:	3004      	addeq	r0, #4
 800b7ae:	079a      	lsls	r2, r3, #30
 800b7b0:	bf04      	itt	eq
 800b7b2:	089b      	lsreq	r3, r3, #2
 800b7b4:	3002      	addeq	r0, #2
 800b7b6:	07da      	lsls	r2, r3, #31
 800b7b8:	d403      	bmi.n	800b7c2 <__lo0bits+0x4e>
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	f100 0001 	add.w	r0, r0, #1
 800b7c0:	d005      	beq.n	800b7ce <__lo0bits+0x5a>
 800b7c2:	600b      	str	r3, [r1, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	e7e9      	b.n	800b79e <__lo0bits+0x2a>
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	4770      	bx	lr
 800b7ce:	2020      	movs	r0, #32
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <__i2b>:
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	2101      	movs	r1, #1
 800b7da:	f7ff ff03 	bl	800b5e4 <_Balloc>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	b928      	cbnz	r0, 800b7ee <__i2b+0x1a>
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <__i2b+0x24>)
 800b7e4:	4805      	ldr	r0, [pc, #20]	; (800b7fc <__i2b+0x28>)
 800b7e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ea:	f7ff f835 	bl	800a858 <__assert_func>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	6144      	str	r4, [r0, #20]
 800b7f2:	6103      	str	r3, [r0, #16]
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800d065 	.word	0x0800d065
 800b7fc:	0800d076 	.word	0x0800d076

0800b800 <__multiply>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	4691      	mov	r9, r2
 800b806:	690a      	ldr	r2, [r1, #16]
 800b808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bfb8      	it	lt
 800b810:	460b      	movlt	r3, r1
 800b812:	460c      	mov	r4, r1
 800b814:	bfbc      	itt	lt
 800b816:	464c      	movlt	r4, r9
 800b818:	4699      	movlt	r9, r3
 800b81a:	6927      	ldr	r7, [r4, #16]
 800b81c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	6861      	ldr	r1, [r4, #4]
 800b824:	eb07 060a 	add.w	r6, r7, sl
 800b828:	42b3      	cmp	r3, r6
 800b82a:	b085      	sub	sp, #20
 800b82c:	bfb8      	it	lt
 800b82e:	3101      	addlt	r1, #1
 800b830:	f7ff fed8 	bl	800b5e4 <_Balloc>
 800b834:	b930      	cbnz	r0, 800b844 <__multiply+0x44>
 800b836:	4602      	mov	r2, r0
 800b838:	4b44      	ldr	r3, [pc, #272]	; (800b94c <__multiply+0x14c>)
 800b83a:	4845      	ldr	r0, [pc, #276]	; (800b950 <__multiply+0x150>)
 800b83c:	f240 115d 	movw	r1, #349	; 0x15d
 800b840:	f7ff f80a 	bl	800a858 <__assert_func>
 800b844:	f100 0514 	add.w	r5, r0, #20
 800b848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b84c:	462b      	mov	r3, r5
 800b84e:	2200      	movs	r2, #0
 800b850:	4543      	cmp	r3, r8
 800b852:	d321      	bcc.n	800b898 <__multiply+0x98>
 800b854:	f104 0314 	add.w	r3, r4, #20
 800b858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b85c:	f109 0314 	add.w	r3, r9, #20
 800b860:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b864:	9202      	str	r2, [sp, #8]
 800b866:	1b3a      	subs	r2, r7, r4
 800b868:	3a15      	subs	r2, #21
 800b86a:	f022 0203 	bic.w	r2, r2, #3
 800b86e:	3204      	adds	r2, #4
 800b870:	f104 0115 	add.w	r1, r4, #21
 800b874:	428f      	cmp	r7, r1
 800b876:	bf38      	it	cc
 800b878:	2204      	movcc	r2, #4
 800b87a:	9201      	str	r2, [sp, #4]
 800b87c:	9a02      	ldr	r2, [sp, #8]
 800b87e:	9303      	str	r3, [sp, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d80c      	bhi.n	800b89e <__multiply+0x9e>
 800b884:	2e00      	cmp	r6, #0
 800b886:	dd03      	ble.n	800b890 <__multiply+0x90>
 800b888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d05a      	beq.n	800b946 <__multiply+0x146>
 800b890:	6106      	str	r6, [r0, #16]
 800b892:	b005      	add	sp, #20
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	f843 2b04 	str.w	r2, [r3], #4
 800b89c:	e7d8      	b.n	800b850 <__multiply+0x50>
 800b89e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8a2:	f1ba 0f00 	cmp.w	sl, #0
 800b8a6:	d024      	beq.n	800b8f2 <__multiply+0xf2>
 800b8a8:	f104 0e14 	add.w	lr, r4, #20
 800b8ac:	46a9      	mov	r9, r5
 800b8ae:	f04f 0c00 	mov.w	ip, #0
 800b8b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b8ba:	fa1f fb82 	uxth.w	fp, r2
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b8cc:	4461      	add	r1, ip
 800b8ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8da:	b289      	uxth	r1, r1
 800b8dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e0:	4577      	cmp	r7, lr
 800b8e2:	f849 1b04 	str.w	r1, [r9], #4
 800b8e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8ea:	d8e2      	bhi.n	800b8b2 <__multiply+0xb2>
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	f845 c002 	str.w	ip, [r5, r2]
 800b8f2:	9a03      	ldr	r2, [sp, #12]
 800b8f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	f1b9 0f00 	cmp.w	r9, #0
 800b8fe:	d020      	beq.n	800b942 <__multiply+0x142>
 800b900:	6829      	ldr	r1, [r5, #0]
 800b902:	f104 0c14 	add.w	ip, r4, #20
 800b906:	46ae      	mov	lr, r5
 800b908:	f04f 0a00 	mov.w	sl, #0
 800b90c:	f8bc b000 	ldrh.w	fp, [ip]
 800b910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b914:	fb09 220b 	mla	r2, r9, fp, r2
 800b918:	4492      	add	sl, r2
 800b91a:	b289      	uxth	r1, r1
 800b91c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b920:	f84e 1b04 	str.w	r1, [lr], #4
 800b924:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b928:	f8be 1000 	ldrh.w	r1, [lr]
 800b92c:	0c12      	lsrs	r2, r2, #16
 800b92e:	fb09 1102 	mla	r1, r9, r2, r1
 800b932:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b936:	4567      	cmp	r7, ip
 800b938:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b93c:	d8e6      	bhi.n	800b90c <__multiply+0x10c>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	50a9      	str	r1, [r5, r2]
 800b942:	3504      	adds	r5, #4
 800b944:	e79a      	b.n	800b87c <__multiply+0x7c>
 800b946:	3e01      	subs	r6, #1
 800b948:	e79c      	b.n	800b884 <__multiply+0x84>
 800b94a:	bf00      	nop
 800b94c:	0800d065 	.word	0x0800d065
 800b950:	0800d076 	.word	0x0800d076

0800b954 <__pow5mult>:
 800b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b958:	4615      	mov	r5, r2
 800b95a:	f012 0203 	ands.w	r2, r2, #3
 800b95e:	4606      	mov	r6, r0
 800b960:	460f      	mov	r7, r1
 800b962:	d007      	beq.n	800b974 <__pow5mult+0x20>
 800b964:	4c25      	ldr	r4, [pc, #148]	; (800b9fc <__pow5mult+0xa8>)
 800b966:	3a01      	subs	r2, #1
 800b968:	2300      	movs	r3, #0
 800b96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b96e:	f7ff fe9b 	bl	800b6a8 <__multadd>
 800b972:	4607      	mov	r7, r0
 800b974:	10ad      	asrs	r5, r5, #2
 800b976:	d03d      	beq.n	800b9f4 <__pow5mult+0xa0>
 800b978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b97a:	b97c      	cbnz	r4, 800b99c <__pow5mult+0x48>
 800b97c:	2010      	movs	r0, #16
 800b97e:	f7ff fe1b 	bl	800b5b8 <malloc>
 800b982:	4602      	mov	r2, r0
 800b984:	6270      	str	r0, [r6, #36]	; 0x24
 800b986:	b928      	cbnz	r0, 800b994 <__pow5mult+0x40>
 800b988:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <__pow5mult+0xac>)
 800b98a:	481e      	ldr	r0, [pc, #120]	; (800ba04 <__pow5mult+0xb0>)
 800b98c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b990:	f7fe ff62 	bl	800a858 <__assert_func>
 800b994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b998:	6004      	str	r4, [r0, #0]
 800b99a:	60c4      	str	r4, [r0, #12]
 800b99c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9a4:	b94c      	cbnz	r4, 800b9ba <__pow5mult+0x66>
 800b9a6:	f240 2171 	movw	r1, #625	; 0x271
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff12 	bl	800b7d4 <__i2b>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	07eb      	lsls	r3, r5, #31
 800b9c0:	d50a      	bpl.n	800b9d8 <__pow5mult+0x84>
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff ff1a 	bl	800b800 <__multiply>
 800b9cc:	4639      	mov	r1, r7
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff fe47 	bl	800b664 <_Bfree>
 800b9d6:	4647      	mov	r7, r8
 800b9d8:	106d      	asrs	r5, r5, #1
 800b9da:	d00b      	beq.n	800b9f4 <__pow5mult+0xa0>
 800b9dc:	6820      	ldr	r0, [r4, #0]
 800b9de:	b938      	cbnz	r0, 800b9f0 <__pow5mult+0x9c>
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ff0b 	bl	800b800 <__multiply>
 800b9ea:	6020      	str	r0, [r4, #0]
 800b9ec:	f8c0 9000 	str.w	r9, [r0]
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	e7e4      	b.n	800b9be <__pow5mult+0x6a>
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0800d1c8 	.word	0x0800d1c8
 800ba00:	0800ce4c 	.word	0x0800ce4c
 800ba04:	0800d076 	.word	0x0800d076

0800ba08 <__lshift>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6849      	ldr	r1, [r1, #4]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	4607      	mov	r7, r0
 800ba1a:	4691      	mov	r9, r2
 800ba1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba20:	f108 0601 	add.w	r6, r8, #1
 800ba24:	42b3      	cmp	r3, r6
 800ba26:	db0b      	blt.n	800ba40 <__lshift+0x38>
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff fddb 	bl	800b5e4 <_Balloc>
 800ba2e:	4605      	mov	r5, r0
 800ba30:	b948      	cbnz	r0, 800ba46 <__lshift+0x3e>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <__lshift+0xd8>)
 800ba36:	482b      	ldr	r0, [pc, #172]	; (800bae4 <__lshift+0xdc>)
 800ba38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba3c:	f7fe ff0c 	bl	800a858 <__assert_func>
 800ba40:	3101      	adds	r1, #1
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	e7ee      	b.n	800ba24 <__lshift+0x1c>
 800ba46:	2300      	movs	r3, #0
 800ba48:	f100 0114 	add.w	r1, r0, #20
 800ba4c:	f100 0210 	add.w	r2, r0, #16
 800ba50:	4618      	mov	r0, r3
 800ba52:	4553      	cmp	r3, sl
 800ba54:	db37      	blt.n	800bac6 <__lshift+0xbe>
 800ba56:	6920      	ldr	r0, [r4, #16]
 800ba58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba5c:	f104 0314 	add.w	r3, r4, #20
 800ba60:	f019 091f 	ands.w	r9, r9, #31
 800ba64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba6c:	d02f      	beq.n	800bace <__lshift+0xc6>
 800ba6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba72:	468a      	mov	sl, r1
 800ba74:	f04f 0c00 	mov.w	ip, #0
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	fa02 f209 	lsl.w	r2, r2, r9
 800ba7e:	ea42 020c 	orr.w	r2, r2, ip
 800ba82:	f84a 2b04 	str.w	r2, [sl], #4
 800ba86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8a:	4298      	cmp	r0, r3
 800ba8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba90:	d8f2      	bhi.n	800ba78 <__lshift+0x70>
 800ba92:	1b03      	subs	r3, r0, r4
 800ba94:	3b15      	subs	r3, #21
 800ba96:	f023 0303 	bic.w	r3, r3, #3
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	f104 0215 	add.w	r2, r4, #21
 800baa0:	4290      	cmp	r0, r2
 800baa2:	bf38      	it	cc
 800baa4:	2304      	movcc	r3, #4
 800baa6:	f841 c003 	str.w	ip, [r1, r3]
 800baaa:	f1bc 0f00 	cmp.w	ip, #0
 800baae:	d001      	beq.n	800bab4 <__lshift+0xac>
 800bab0:	f108 0602 	add.w	r6, r8, #2
 800bab4:	3e01      	subs	r6, #1
 800bab6:	4638      	mov	r0, r7
 800bab8:	612e      	str	r6, [r5, #16]
 800baba:	4621      	mov	r1, r4
 800babc:	f7ff fdd2 	bl	800b664 <_Bfree>
 800bac0:	4628      	mov	r0, r5
 800bac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800baca:	3301      	adds	r3, #1
 800bacc:	e7c1      	b.n	800ba52 <__lshift+0x4a>
 800bace:	3904      	subs	r1, #4
 800bad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bad8:	4298      	cmp	r0, r3
 800bada:	d8f9      	bhi.n	800bad0 <__lshift+0xc8>
 800badc:	e7ea      	b.n	800bab4 <__lshift+0xac>
 800bade:	bf00      	nop
 800bae0:	0800d065 	.word	0x0800d065
 800bae4:	0800d076 	.word	0x0800d076

0800bae8 <__mcmp>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6902      	ldr	r2, [r0, #16]
 800baec:	690c      	ldr	r4, [r1, #16]
 800baee:	1b12      	subs	r2, r2, r4
 800baf0:	d10e      	bne.n	800bb10 <__mcmp+0x28>
 800baf2:	f100 0314 	add.w	r3, r0, #20
 800baf6:	3114      	adds	r1, #20
 800baf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb08:	42a5      	cmp	r5, r4
 800bb0a:	d003      	beq.n	800bb14 <__mcmp+0x2c>
 800bb0c:	d305      	bcc.n	800bb1a <__mcmp+0x32>
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4610      	mov	r0, r2
 800bb12:	bd30      	pop	{r4, r5, pc}
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d3f3      	bcc.n	800bb00 <__mcmp+0x18>
 800bb18:	e7fa      	b.n	800bb10 <__mcmp+0x28>
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	e7f7      	b.n	800bb10 <__mcmp+0x28>

0800bb20 <__mdiff>:
 800bb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	460c      	mov	r4, r1
 800bb26:	4606      	mov	r6, r0
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4690      	mov	r8, r2
 800bb2e:	f7ff ffdb 	bl	800bae8 <__mcmp>
 800bb32:	1e05      	subs	r5, r0, #0
 800bb34:	d110      	bne.n	800bb58 <__mdiff+0x38>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff fd53 	bl	800b5e4 <_Balloc>
 800bb3e:	b930      	cbnz	r0, 800bb4e <__mdiff+0x2e>
 800bb40:	4b3a      	ldr	r3, [pc, #232]	; (800bc2c <__mdiff+0x10c>)
 800bb42:	4602      	mov	r2, r0
 800bb44:	f240 2132 	movw	r1, #562	; 0x232
 800bb48:	4839      	ldr	r0, [pc, #228]	; (800bc30 <__mdiff+0x110>)
 800bb4a:	f7fe fe85 	bl	800a858 <__assert_func>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	bfa4      	itt	ge
 800bb5a:	4643      	movge	r3, r8
 800bb5c:	46a0      	movge	r8, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb64:	bfa6      	itte	ge
 800bb66:	461c      	movge	r4, r3
 800bb68:	2500      	movge	r5, #0
 800bb6a:	2501      	movlt	r5, #1
 800bb6c:	f7ff fd3a 	bl	800b5e4 <_Balloc>
 800bb70:	b920      	cbnz	r0, 800bb7c <__mdiff+0x5c>
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <__mdiff+0x10c>)
 800bb74:	4602      	mov	r2, r0
 800bb76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb7a:	e7e5      	b.n	800bb48 <__mdiff+0x28>
 800bb7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb80:	6926      	ldr	r6, [r4, #16]
 800bb82:	60c5      	str	r5, [r0, #12]
 800bb84:	f104 0914 	add.w	r9, r4, #20
 800bb88:	f108 0514 	add.w	r5, r8, #20
 800bb8c:	f100 0e14 	add.w	lr, r0, #20
 800bb90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb98:	f108 0210 	add.w	r2, r8, #16
 800bb9c:	46f2      	mov	sl, lr
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bba4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bba8:	fa1f f883 	uxth.w	r8, r3
 800bbac:	fa11 f18b 	uxtah	r1, r1, fp
 800bbb0:	0c1b      	lsrs	r3, r3, #16
 800bbb2:	eba1 0808 	sub.w	r8, r1, r8
 800bbb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbbe:	fa1f f888 	uxth.w	r8, r8
 800bbc2:	1419      	asrs	r1, r3, #16
 800bbc4:	454e      	cmp	r6, r9
 800bbc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbca:	f84a 3b04 	str.w	r3, [sl], #4
 800bbce:	d8e7      	bhi.n	800bba0 <__mdiff+0x80>
 800bbd0:	1b33      	subs	r3, r6, r4
 800bbd2:	3b15      	subs	r3, #21
 800bbd4:	f023 0303 	bic.w	r3, r3, #3
 800bbd8:	3304      	adds	r3, #4
 800bbda:	3415      	adds	r4, #21
 800bbdc:	42a6      	cmp	r6, r4
 800bbde:	bf38      	it	cc
 800bbe0:	2304      	movcc	r3, #4
 800bbe2:	441d      	add	r5, r3
 800bbe4:	4473      	add	r3, lr
 800bbe6:	469e      	mov	lr, r3
 800bbe8:	462e      	mov	r6, r5
 800bbea:	4566      	cmp	r6, ip
 800bbec:	d30e      	bcc.n	800bc0c <__mdiff+0xec>
 800bbee:	f10c 0203 	add.w	r2, ip, #3
 800bbf2:	1b52      	subs	r2, r2, r5
 800bbf4:	f022 0203 	bic.w	r2, r2, #3
 800bbf8:	3d03      	subs	r5, #3
 800bbfa:	45ac      	cmp	ip, r5
 800bbfc:	bf38      	it	cc
 800bbfe:	2200      	movcc	r2, #0
 800bc00:	441a      	add	r2, r3
 800bc02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc06:	b17b      	cbz	r3, 800bc28 <__mdiff+0x108>
 800bc08:	6107      	str	r7, [r0, #16]
 800bc0a:	e7a3      	b.n	800bb54 <__mdiff+0x34>
 800bc0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc10:	fa11 f288 	uxtah	r2, r1, r8
 800bc14:	1414      	asrs	r4, r2, #16
 800bc16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc20:	f84e 2b04 	str.w	r2, [lr], #4
 800bc24:	1421      	asrs	r1, r4, #16
 800bc26:	e7e0      	b.n	800bbea <__mdiff+0xca>
 800bc28:	3f01      	subs	r7, #1
 800bc2a:	e7ea      	b.n	800bc02 <__mdiff+0xe2>
 800bc2c:	0800d065 	.word	0x0800d065
 800bc30:	0800d076 	.word	0x0800d076

0800bc34 <__d2b>:
 800bc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	4689      	mov	r9, r1
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	ec57 6b10 	vmov	r6, r7, d0
 800bc40:	4690      	mov	r8, r2
 800bc42:	f7ff fccf 	bl	800b5e4 <_Balloc>
 800bc46:	4604      	mov	r4, r0
 800bc48:	b930      	cbnz	r0, 800bc58 <__d2b+0x24>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	4b25      	ldr	r3, [pc, #148]	; (800bce4 <__d2b+0xb0>)
 800bc4e:	4826      	ldr	r0, [pc, #152]	; (800bce8 <__d2b+0xb4>)
 800bc50:	f240 310a 	movw	r1, #778	; 0x30a
 800bc54:	f7fe fe00 	bl	800a858 <__assert_func>
 800bc58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc60:	bb35      	cbnz	r5, 800bcb0 <__d2b+0x7c>
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	d028      	beq.n	800bcba <__d2b+0x86>
 800bc68:	4668      	mov	r0, sp
 800bc6a:	9600      	str	r6, [sp, #0]
 800bc6c:	f7ff fd82 	bl	800b774 <__lo0bits>
 800bc70:	9900      	ldr	r1, [sp, #0]
 800bc72:	b300      	cbz	r0, 800bcb6 <__d2b+0x82>
 800bc74:	9a01      	ldr	r2, [sp, #4]
 800bc76:	f1c0 0320 	rsb	r3, r0, #32
 800bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7e:	430b      	orrs	r3, r1
 800bc80:	40c2      	lsrs	r2, r0
 800bc82:	6163      	str	r3, [r4, #20]
 800bc84:	9201      	str	r2, [sp, #4]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	61a3      	str	r3, [r4, #24]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bf14      	ite	ne
 800bc8e:	2202      	movne	r2, #2
 800bc90:	2201      	moveq	r2, #1
 800bc92:	6122      	str	r2, [r4, #16]
 800bc94:	b1d5      	cbz	r5, 800bccc <__d2b+0x98>
 800bc96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc9a:	4405      	add	r5, r0
 800bc9c:	f8c9 5000 	str.w	r5, [r9]
 800bca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bca4:	f8c8 0000 	str.w	r0, [r8]
 800bca8:	4620      	mov	r0, r4
 800bcaa:	b003      	add	sp, #12
 800bcac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcb4:	e7d5      	b.n	800bc62 <__d2b+0x2e>
 800bcb6:	6161      	str	r1, [r4, #20]
 800bcb8:	e7e5      	b.n	800bc86 <__d2b+0x52>
 800bcba:	a801      	add	r0, sp, #4
 800bcbc:	f7ff fd5a 	bl	800b774 <__lo0bits>
 800bcc0:	9b01      	ldr	r3, [sp, #4]
 800bcc2:	6163      	str	r3, [r4, #20]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	6122      	str	r2, [r4, #16]
 800bcc8:	3020      	adds	r0, #32
 800bcca:	e7e3      	b.n	800bc94 <__d2b+0x60>
 800bccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcd4:	f8c9 0000 	str.w	r0, [r9]
 800bcd8:	6918      	ldr	r0, [r3, #16]
 800bcda:	f7ff fd2b 	bl	800b734 <__hi0bits>
 800bcde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bce2:	e7df      	b.n	800bca4 <__d2b+0x70>
 800bce4:	0800d065 	.word	0x0800d065
 800bce8:	0800d076 	.word	0x0800d076

0800bcec <_calloc_r>:
 800bcec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcee:	fba1 2402 	umull	r2, r4, r1, r2
 800bcf2:	b94c      	cbnz	r4, 800bd08 <_calloc_r+0x1c>
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	9201      	str	r2, [sp, #4]
 800bcf8:	f000 f87a 	bl	800bdf0 <_malloc_r>
 800bcfc:	9a01      	ldr	r2, [sp, #4]
 800bcfe:	4605      	mov	r5, r0
 800bd00:	b930      	cbnz	r0, 800bd10 <_calloc_r+0x24>
 800bd02:	4628      	mov	r0, r5
 800bd04:	b003      	add	sp, #12
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	220c      	movs	r2, #12
 800bd0a:	6002      	str	r2, [r0, #0]
 800bd0c:	2500      	movs	r5, #0
 800bd0e:	e7f8      	b.n	800bd02 <_calloc_r+0x16>
 800bd10:	4621      	mov	r1, r4
 800bd12:	f7fe f827 	bl	8009d64 <memset>
 800bd16:	e7f4      	b.n	800bd02 <_calloc_r+0x16>

0800bd18 <_free_r>:
 800bd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	d044      	beq.n	800bda8 <_free_r+0x90>
 800bd1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd22:	9001      	str	r0, [sp, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f1a1 0404 	sub.w	r4, r1, #4
 800bd2a:	bfb8      	it	lt
 800bd2c:	18e4      	addlt	r4, r4, r3
 800bd2e:	f000 fead 	bl	800ca8c <__malloc_lock>
 800bd32:	4a1e      	ldr	r2, [pc, #120]	; (800bdac <_free_r+0x94>)
 800bd34:	9801      	ldr	r0, [sp, #4]
 800bd36:	6813      	ldr	r3, [r2, #0]
 800bd38:	b933      	cbnz	r3, 800bd48 <_free_r+0x30>
 800bd3a:	6063      	str	r3, [r4, #4]
 800bd3c:	6014      	str	r4, [r2, #0]
 800bd3e:	b003      	add	sp, #12
 800bd40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd44:	f000 bea8 	b.w	800ca98 <__malloc_unlock>
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	d908      	bls.n	800bd5e <_free_r+0x46>
 800bd4c:	6825      	ldr	r5, [r4, #0]
 800bd4e:	1961      	adds	r1, r4, r5
 800bd50:	428b      	cmp	r3, r1
 800bd52:	bf01      	itttt	eq
 800bd54:	6819      	ldreq	r1, [r3, #0]
 800bd56:	685b      	ldreq	r3, [r3, #4]
 800bd58:	1949      	addeq	r1, r1, r5
 800bd5a:	6021      	streq	r1, [r4, #0]
 800bd5c:	e7ed      	b.n	800bd3a <_free_r+0x22>
 800bd5e:	461a      	mov	r2, r3
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	b10b      	cbz	r3, 800bd68 <_free_r+0x50>
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	d9fa      	bls.n	800bd5e <_free_r+0x46>
 800bd68:	6811      	ldr	r1, [r2, #0]
 800bd6a:	1855      	adds	r5, r2, r1
 800bd6c:	42a5      	cmp	r5, r4
 800bd6e:	d10b      	bne.n	800bd88 <_free_r+0x70>
 800bd70:	6824      	ldr	r4, [r4, #0]
 800bd72:	4421      	add	r1, r4
 800bd74:	1854      	adds	r4, r2, r1
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	6011      	str	r1, [r2, #0]
 800bd7a:	d1e0      	bne.n	800bd3e <_free_r+0x26>
 800bd7c:	681c      	ldr	r4, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	6053      	str	r3, [r2, #4]
 800bd82:	4421      	add	r1, r4
 800bd84:	6011      	str	r1, [r2, #0]
 800bd86:	e7da      	b.n	800bd3e <_free_r+0x26>
 800bd88:	d902      	bls.n	800bd90 <_free_r+0x78>
 800bd8a:	230c      	movs	r3, #12
 800bd8c:	6003      	str	r3, [r0, #0]
 800bd8e:	e7d6      	b.n	800bd3e <_free_r+0x26>
 800bd90:	6825      	ldr	r5, [r4, #0]
 800bd92:	1961      	adds	r1, r4, r5
 800bd94:	428b      	cmp	r3, r1
 800bd96:	bf04      	itt	eq
 800bd98:	6819      	ldreq	r1, [r3, #0]
 800bd9a:	685b      	ldreq	r3, [r3, #4]
 800bd9c:	6063      	str	r3, [r4, #4]
 800bd9e:	bf04      	itt	eq
 800bda0:	1949      	addeq	r1, r1, r5
 800bda2:	6021      	streq	r1, [r4, #0]
 800bda4:	6054      	str	r4, [r2, #4]
 800bda6:	e7ca      	b.n	800bd3e <_free_r+0x26>
 800bda8:	b003      	add	sp, #12
 800bdaa:	bd30      	pop	{r4, r5, pc}
 800bdac:	200006c4 	.word	0x200006c4

0800bdb0 <sbrk_aligned>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	4e0e      	ldr	r6, [pc, #56]	; (800bdec <sbrk_aligned+0x3c>)
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	6831      	ldr	r1, [r6, #0]
 800bdb8:	4605      	mov	r5, r0
 800bdba:	b911      	cbnz	r1, 800bdc2 <sbrk_aligned+0x12>
 800bdbc:	f000 fb42 	bl	800c444 <_sbrk_r>
 800bdc0:	6030      	str	r0, [r6, #0]
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f000 fb3d 	bl	800c444 <_sbrk_r>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	d00a      	beq.n	800bde4 <sbrk_aligned+0x34>
 800bdce:	1cc4      	adds	r4, r0, #3
 800bdd0:	f024 0403 	bic.w	r4, r4, #3
 800bdd4:	42a0      	cmp	r0, r4
 800bdd6:	d007      	beq.n	800bde8 <sbrk_aligned+0x38>
 800bdd8:	1a21      	subs	r1, r4, r0
 800bdda:	4628      	mov	r0, r5
 800bddc:	f000 fb32 	bl	800c444 <_sbrk_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	d101      	bne.n	800bde8 <sbrk_aligned+0x38>
 800bde4:	f04f 34ff 	mov.w	r4, #4294967295
 800bde8:	4620      	mov	r0, r4
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
 800bdec:	200006c8 	.word	0x200006c8

0800bdf0 <_malloc_r>:
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	1ccd      	adds	r5, r1, #3
 800bdf6:	f025 0503 	bic.w	r5, r5, #3
 800bdfa:	3508      	adds	r5, #8
 800bdfc:	2d0c      	cmp	r5, #12
 800bdfe:	bf38      	it	cc
 800be00:	250c      	movcc	r5, #12
 800be02:	2d00      	cmp	r5, #0
 800be04:	4607      	mov	r7, r0
 800be06:	db01      	blt.n	800be0c <_malloc_r+0x1c>
 800be08:	42a9      	cmp	r1, r5
 800be0a:	d905      	bls.n	800be18 <_malloc_r+0x28>
 800be0c:	230c      	movs	r3, #12
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	2600      	movs	r6, #0
 800be12:	4630      	mov	r0, r6
 800be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be18:	4e2e      	ldr	r6, [pc, #184]	; (800bed4 <_malloc_r+0xe4>)
 800be1a:	f000 fe37 	bl	800ca8c <__malloc_lock>
 800be1e:	6833      	ldr	r3, [r6, #0]
 800be20:	461c      	mov	r4, r3
 800be22:	bb34      	cbnz	r4, 800be72 <_malloc_r+0x82>
 800be24:	4629      	mov	r1, r5
 800be26:	4638      	mov	r0, r7
 800be28:	f7ff ffc2 	bl	800bdb0 <sbrk_aligned>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	4604      	mov	r4, r0
 800be30:	d14d      	bne.n	800bece <_malloc_r+0xde>
 800be32:	6834      	ldr	r4, [r6, #0]
 800be34:	4626      	mov	r6, r4
 800be36:	2e00      	cmp	r6, #0
 800be38:	d140      	bne.n	800bebc <_malloc_r+0xcc>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	4631      	mov	r1, r6
 800be3e:	4638      	mov	r0, r7
 800be40:	eb04 0803 	add.w	r8, r4, r3
 800be44:	f000 fafe 	bl	800c444 <_sbrk_r>
 800be48:	4580      	cmp	r8, r0
 800be4a:	d13a      	bne.n	800bec2 <_malloc_r+0xd2>
 800be4c:	6821      	ldr	r1, [r4, #0]
 800be4e:	3503      	adds	r5, #3
 800be50:	1a6d      	subs	r5, r5, r1
 800be52:	f025 0503 	bic.w	r5, r5, #3
 800be56:	3508      	adds	r5, #8
 800be58:	2d0c      	cmp	r5, #12
 800be5a:	bf38      	it	cc
 800be5c:	250c      	movcc	r5, #12
 800be5e:	4629      	mov	r1, r5
 800be60:	4638      	mov	r0, r7
 800be62:	f7ff ffa5 	bl	800bdb0 <sbrk_aligned>
 800be66:	3001      	adds	r0, #1
 800be68:	d02b      	beq.n	800bec2 <_malloc_r+0xd2>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	442b      	add	r3, r5
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	e00e      	b.n	800be90 <_malloc_r+0xa0>
 800be72:	6822      	ldr	r2, [r4, #0]
 800be74:	1b52      	subs	r2, r2, r5
 800be76:	d41e      	bmi.n	800beb6 <_malloc_r+0xc6>
 800be78:	2a0b      	cmp	r2, #11
 800be7a:	d916      	bls.n	800beaa <_malloc_r+0xba>
 800be7c:	1961      	adds	r1, r4, r5
 800be7e:	42a3      	cmp	r3, r4
 800be80:	6025      	str	r5, [r4, #0]
 800be82:	bf18      	it	ne
 800be84:	6059      	strne	r1, [r3, #4]
 800be86:	6863      	ldr	r3, [r4, #4]
 800be88:	bf08      	it	eq
 800be8a:	6031      	streq	r1, [r6, #0]
 800be8c:	5162      	str	r2, [r4, r5]
 800be8e:	604b      	str	r3, [r1, #4]
 800be90:	4638      	mov	r0, r7
 800be92:	f104 060b 	add.w	r6, r4, #11
 800be96:	f000 fdff 	bl	800ca98 <__malloc_unlock>
 800be9a:	f026 0607 	bic.w	r6, r6, #7
 800be9e:	1d23      	adds	r3, r4, #4
 800bea0:	1af2      	subs	r2, r6, r3
 800bea2:	d0b6      	beq.n	800be12 <_malloc_r+0x22>
 800bea4:	1b9b      	subs	r3, r3, r6
 800bea6:	50a3      	str	r3, [r4, r2]
 800bea8:	e7b3      	b.n	800be12 <_malloc_r+0x22>
 800beaa:	6862      	ldr	r2, [r4, #4]
 800beac:	42a3      	cmp	r3, r4
 800beae:	bf0c      	ite	eq
 800beb0:	6032      	streq	r2, [r6, #0]
 800beb2:	605a      	strne	r2, [r3, #4]
 800beb4:	e7ec      	b.n	800be90 <_malloc_r+0xa0>
 800beb6:	4623      	mov	r3, r4
 800beb8:	6864      	ldr	r4, [r4, #4]
 800beba:	e7b2      	b.n	800be22 <_malloc_r+0x32>
 800bebc:	4634      	mov	r4, r6
 800bebe:	6876      	ldr	r6, [r6, #4]
 800bec0:	e7b9      	b.n	800be36 <_malloc_r+0x46>
 800bec2:	230c      	movs	r3, #12
 800bec4:	603b      	str	r3, [r7, #0]
 800bec6:	4638      	mov	r0, r7
 800bec8:	f000 fde6 	bl	800ca98 <__malloc_unlock>
 800becc:	e7a1      	b.n	800be12 <_malloc_r+0x22>
 800bece:	6025      	str	r5, [r4, #0]
 800bed0:	e7de      	b.n	800be90 <_malloc_r+0xa0>
 800bed2:	bf00      	nop
 800bed4:	200006c4 	.word	0x200006c4

0800bed8 <__ssputs_r>:
 800bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bedc:	688e      	ldr	r6, [r1, #8]
 800bede:	429e      	cmp	r6, r3
 800bee0:	4682      	mov	sl, r0
 800bee2:	460c      	mov	r4, r1
 800bee4:	4690      	mov	r8, r2
 800bee6:	461f      	mov	r7, r3
 800bee8:	d838      	bhi.n	800bf5c <__ssputs_r+0x84>
 800beea:	898a      	ldrh	r2, [r1, #12]
 800beec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bef0:	d032      	beq.n	800bf58 <__ssputs_r+0x80>
 800bef2:	6825      	ldr	r5, [r4, #0]
 800bef4:	6909      	ldr	r1, [r1, #16]
 800bef6:	eba5 0901 	sub.w	r9, r5, r1
 800befa:	6965      	ldr	r5, [r4, #20]
 800befc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf04:	3301      	adds	r3, #1
 800bf06:	444b      	add	r3, r9
 800bf08:	106d      	asrs	r5, r5, #1
 800bf0a:	429d      	cmp	r5, r3
 800bf0c:	bf38      	it	cc
 800bf0e:	461d      	movcc	r5, r3
 800bf10:	0553      	lsls	r3, r2, #21
 800bf12:	d531      	bpl.n	800bf78 <__ssputs_r+0xa0>
 800bf14:	4629      	mov	r1, r5
 800bf16:	f7ff ff6b 	bl	800bdf0 <_malloc_r>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	b950      	cbnz	r0, 800bf34 <__ssputs_r+0x5c>
 800bf1e:	230c      	movs	r3, #12
 800bf20:	f8ca 3000 	str.w	r3, [sl]
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf34:	6921      	ldr	r1, [r4, #16]
 800bf36:	464a      	mov	r2, r9
 800bf38:	f7ff fb46 	bl	800b5c8 <memcpy>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	6126      	str	r6, [r4, #16]
 800bf4a:	6165      	str	r5, [r4, #20]
 800bf4c:	444e      	add	r6, r9
 800bf4e:	eba5 0509 	sub.w	r5, r5, r9
 800bf52:	6026      	str	r6, [r4, #0]
 800bf54:	60a5      	str	r5, [r4, #8]
 800bf56:	463e      	mov	r6, r7
 800bf58:	42be      	cmp	r6, r7
 800bf5a:	d900      	bls.n	800bf5e <__ssputs_r+0x86>
 800bf5c:	463e      	mov	r6, r7
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	4632      	mov	r2, r6
 800bf62:	4641      	mov	r1, r8
 800bf64:	f000 fd78 	bl	800ca58 <memmove>
 800bf68:	68a3      	ldr	r3, [r4, #8]
 800bf6a:	1b9b      	subs	r3, r3, r6
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	4433      	add	r3, r6
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	2000      	movs	r0, #0
 800bf76:	e7db      	b.n	800bf30 <__ssputs_r+0x58>
 800bf78:	462a      	mov	r2, r5
 800bf7a:	f000 fd93 	bl	800caa4 <_realloc_r>
 800bf7e:	4606      	mov	r6, r0
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d1e1      	bne.n	800bf48 <__ssputs_r+0x70>
 800bf84:	6921      	ldr	r1, [r4, #16]
 800bf86:	4650      	mov	r0, sl
 800bf88:	f7ff fec6 	bl	800bd18 <_free_r>
 800bf8c:	e7c7      	b.n	800bf1e <__ssputs_r+0x46>
	...

0800bf90 <_svfiprintf_r>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4698      	mov	r8, r3
 800bf96:	898b      	ldrh	r3, [r1, #12]
 800bf98:	061b      	lsls	r3, r3, #24
 800bf9a:	b09d      	sub	sp, #116	; 0x74
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	4614      	mov	r4, r2
 800bfa2:	d50e      	bpl.n	800bfc2 <_svfiprintf_r+0x32>
 800bfa4:	690b      	ldr	r3, [r1, #16]
 800bfa6:	b963      	cbnz	r3, 800bfc2 <_svfiprintf_r+0x32>
 800bfa8:	2140      	movs	r1, #64	; 0x40
 800bfaa:	f7ff ff21 	bl	800bdf0 <_malloc_r>
 800bfae:	6028      	str	r0, [r5, #0]
 800bfb0:	6128      	str	r0, [r5, #16]
 800bfb2:	b920      	cbnz	r0, 800bfbe <_svfiprintf_r+0x2e>
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbc:	e0d1      	b.n	800c162 <_svfiprintf_r+0x1d2>
 800bfbe:	2340      	movs	r3, #64	; 0x40
 800bfc0:	616b      	str	r3, [r5, #20]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc6:	2320      	movs	r3, #32
 800bfc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfd0:	2330      	movs	r3, #48	; 0x30
 800bfd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c17c <_svfiprintf_r+0x1ec>
 800bfd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfda:	f04f 0901 	mov.w	r9, #1
 800bfde:	4623      	mov	r3, r4
 800bfe0:	469a      	mov	sl, r3
 800bfe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfe6:	b10a      	cbz	r2, 800bfec <_svfiprintf_r+0x5c>
 800bfe8:	2a25      	cmp	r2, #37	; 0x25
 800bfea:	d1f9      	bne.n	800bfe0 <_svfiprintf_r+0x50>
 800bfec:	ebba 0b04 	subs.w	fp, sl, r4
 800bff0:	d00b      	beq.n	800c00a <_svfiprintf_r+0x7a>
 800bff2:	465b      	mov	r3, fp
 800bff4:	4622      	mov	r2, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7ff ff6d 	bl	800bed8 <__ssputs_r>
 800bffe:	3001      	adds	r0, #1
 800c000:	f000 80aa 	beq.w	800c158 <_svfiprintf_r+0x1c8>
 800c004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c006:	445a      	add	r2, fp
 800c008:	9209      	str	r2, [sp, #36]	; 0x24
 800c00a:	f89a 3000 	ldrb.w	r3, [sl]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f000 80a2 	beq.w	800c158 <_svfiprintf_r+0x1c8>
 800c014:	2300      	movs	r3, #0
 800c016:	f04f 32ff 	mov.w	r2, #4294967295
 800c01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c01e:	f10a 0a01 	add.w	sl, sl, #1
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	9307      	str	r3, [sp, #28]
 800c026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c02a:	931a      	str	r3, [sp, #104]	; 0x68
 800c02c:	4654      	mov	r4, sl
 800c02e:	2205      	movs	r2, #5
 800c030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c034:	4851      	ldr	r0, [pc, #324]	; (800c17c <_svfiprintf_r+0x1ec>)
 800c036:	f7f4 f90b 	bl	8000250 <memchr>
 800c03a:	9a04      	ldr	r2, [sp, #16]
 800c03c:	b9d8      	cbnz	r0, 800c076 <_svfiprintf_r+0xe6>
 800c03e:	06d0      	lsls	r0, r2, #27
 800c040:	bf44      	itt	mi
 800c042:	2320      	movmi	r3, #32
 800c044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c048:	0711      	lsls	r1, r2, #28
 800c04a:	bf44      	itt	mi
 800c04c:	232b      	movmi	r3, #43	; 0x2b
 800c04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c052:	f89a 3000 	ldrb.w	r3, [sl]
 800c056:	2b2a      	cmp	r3, #42	; 0x2a
 800c058:	d015      	beq.n	800c086 <_svfiprintf_r+0xf6>
 800c05a:	9a07      	ldr	r2, [sp, #28]
 800c05c:	4654      	mov	r4, sl
 800c05e:	2000      	movs	r0, #0
 800c060:	f04f 0c0a 	mov.w	ip, #10
 800c064:	4621      	mov	r1, r4
 800c066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c06a:	3b30      	subs	r3, #48	; 0x30
 800c06c:	2b09      	cmp	r3, #9
 800c06e:	d94e      	bls.n	800c10e <_svfiprintf_r+0x17e>
 800c070:	b1b0      	cbz	r0, 800c0a0 <_svfiprintf_r+0x110>
 800c072:	9207      	str	r2, [sp, #28]
 800c074:	e014      	b.n	800c0a0 <_svfiprintf_r+0x110>
 800c076:	eba0 0308 	sub.w	r3, r0, r8
 800c07a:	fa09 f303 	lsl.w	r3, r9, r3
 800c07e:	4313      	orrs	r3, r2
 800c080:	9304      	str	r3, [sp, #16]
 800c082:	46a2      	mov	sl, r4
 800c084:	e7d2      	b.n	800c02c <_svfiprintf_r+0x9c>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	1d19      	adds	r1, r3, #4
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	9103      	str	r1, [sp, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bfbb      	ittet	lt
 800c092:	425b      	neglt	r3, r3
 800c094:	f042 0202 	orrlt.w	r2, r2, #2
 800c098:	9307      	strge	r3, [sp, #28]
 800c09a:	9307      	strlt	r3, [sp, #28]
 800c09c:	bfb8      	it	lt
 800c09e:	9204      	strlt	r2, [sp, #16]
 800c0a0:	7823      	ldrb	r3, [r4, #0]
 800c0a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0a4:	d10c      	bne.n	800c0c0 <_svfiprintf_r+0x130>
 800c0a6:	7863      	ldrb	r3, [r4, #1]
 800c0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0aa:	d135      	bne.n	800c118 <_svfiprintf_r+0x188>
 800c0ac:	9b03      	ldr	r3, [sp, #12]
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	9203      	str	r2, [sp, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	bfb8      	it	lt
 800c0b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0bc:	3402      	adds	r4, #2
 800c0be:	9305      	str	r3, [sp, #20]
 800c0c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c18c <_svfiprintf_r+0x1fc>
 800c0c4:	7821      	ldrb	r1, [r4, #0]
 800c0c6:	2203      	movs	r2, #3
 800c0c8:	4650      	mov	r0, sl
 800c0ca:	f7f4 f8c1 	bl	8000250 <memchr>
 800c0ce:	b140      	cbz	r0, 800c0e2 <_svfiprintf_r+0x152>
 800c0d0:	2340      	movs	r3, #64	; 0x40
 800c0d2:	eba0 000a 	sub.w	r0, r0, sl
 800c0d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	4303      	orrs	r3, r0
 800c0de:	3401      	adds	r4, #1
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4826      	ldr	r0, [pc, #152]	; (800c180 <_svfiprintf_r+0x1f0>)
 800c0e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	f7f4 f8af 	bl	8000250 <memchr>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d038      	beq.n	800c168 <_svfiprintf_r+0x1d8>
 800c0f6:	4b23      	ldr	r3, [pc, #140]	; (800c184 <_svfiprintf_r+0x1f4>)
 800c0f8:	bb1b      	cbnz	r3, 800c142 <_svfiprintf_r+0x1b2>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	3307      	adds	r3, #7
 800c0fe:	f023 0307 	bic.w	r3, r3, #7
 800c102:	3308      	adds	r3, #8
 800c104:	9303      	str	r3, [sp, #12]
 800c106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c108:	4433      	add	r3, r6
 800c10a:	9309      	str	r3, [sp, #36]	; 0x24
 800c10c:	e767      	b.n	800bfde <_svfiprintf_r+0x4e>
 800c10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c112:	460c      	mov	r4, r1
 800c114:	2001      	movs	r0, #1
 800c116:	e7a5      	b.n	800c064 <_svfiprintf_r+0xd4>
 800c118:	2300      	movs	r3, #0
 800c11a:	3401      	adds	r4, #1
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	4619      	mov	r1, r3
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4620      	mov	r0, r4
 800c126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c12a:	3a30      	subs	r2, #48	; 0x30
 800c12c:	2a09      	cmp	r2, #9
 800c12e:	d903      	bls.n	800c138 <_svfiprintf_r+0x1a8>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0c5      	beq.n	800c0c0 <_svfiprintf_r+0x130>
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	e7c3      	b.n	800c0c0 <_svfiprintf_r+0x130>
 800c138:	fb0c 2101 	mla	r1, ip, r1, r2
 800c13c:	4604      	mov	r4, r0
 800c13e:	2301      	movs	r3, #1
 800c140:	e7f0      	b.n	800c124 <_svfiprintf_r+0x194>
 800c142:	ab03      	add	r3, sp, #12
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	462a      	mov	r2, r5
 800c148:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <_svfiprintf_r+0x1f8>)
 800c14a:	a904      	add	r1, sp, #16
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7fd feb1 	bl	8009eb4 <_printf_float>
 800c152:	1c42      	adds	r2, r0, #1
 800c154:	4606      	mov	r6, r0
 800c156:	d1d6      	bne.n	800c106 <_svfiprintf_r+0x176>
 800c158:	89ab      	ldrh	r3, [r5, #12]
 800c15a:	065b      	lsls	r3, r3, #25
 800c15c:	f53f af2c 	bmi.w	800bfb8 <_svfiprintf_r+0x28>
 800c160:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c162:	b01d      	add	sp, #116	; 0x74
 800c164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c168:	ab03      	add	r3, sp, #12
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	462a      	mov	r2, r5
 800c16e:	4b06      	ldr	r3, [pc, #24]	; (800c188 <_svfiprintf_r+0x1f8>)
 800c170:	a904      	add	r1, sp, #16
 800c172:	4638      	mov	r0, r7
 800c174:	f7fe f942 	bl	800a3fc <_printf_i>
 800c178:	e7eb      	b.n	800c152 <_svfiprintf_r+0x1c2>
 800c17a:	bf00      	nop
 800c17c:	0800d1d4 	.word	0x0800d1d4
 800c180:	0800d1de 	.word	0x0800d1de
 800c184:	08009eb5 	.word	0x08009eb5
 800c188:	0800bed9 	.word	0x0800bed9
 800c18c:	0800d1da 	.word	0x0800d1da

0800c190 <__sfputc_r>:
 800c190:	6893      	ldr	r3, [r2, #8]
 800c192:	3b01      	subs	r3, #1
 800c194:	2b00      	cmp	r3, #0
 800c196:	b410      	push	{r4}
 800c198:	6093      	str	r3, [r2, #8]
 800c19a:	da08      	bge.n	800c1ae <__sfputc_r+0x1e>
 800c19c:	6994      	ldr	r4, [r2, #24]
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	db01      	blt.n	800c1a6 <__sfputc_r+0x16>
 800c1a2:	290a      	cmp	r1, #10
 800c1a4:	d103      	bne.n	800c1ae <__sfputc_r+0x1e>
 800c1a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1aa:	f000 b95b 	b.w	800c464 <__swbuf_r>
 800c1ae:	6813      	ldr	r3, [r2, #0]
 800c1b0:	1c58      	adds	r0, r3, #1
 800c1b2:	6010      	str	r0, [r2, #0]
 800c1b4:	7019      	strb	r1, [r3, #0]
 800c1b6:	4608      	mov	r0, r1
 800c1b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <__sfputs_r>:
 800c1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	460f      	mov	r7, r1
 800c1c4:	4614      	mov	r4, r2
 800c1c6:	18d5      	adds	r5, r2, r3
 800c1c8:	42ac      	cmp	r4, r5
 800c1ca:	d101      	bne.n	800c1d0 <__sfputs_r+0x12>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e007      	b.n	800c1e0 <__sfputs_r+0x22>
 800c1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d4:	463a      	mov	r2, r7
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7ff ffda 	bl	800c190 <__sfputc_r>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d1f3      	bne.n	800c1c8 <__sfputs_r+0xa>
 800c1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1e4 <_vfiprintf_r>:
 800c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	b09d      	sub	sp, #116	; 0x74
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	4698      	mov	r8, r3
 800c1f0:	4606      	mov	r6, r0
 800c1f2:	b118      	cbz	r0, 800c1fc <_vfiprintf_r+0x18>
 800c1f4:	6983      	ldr	r3, [r0, #24]
 800c1f6:	b90b      	cbnz	r3, 800c1fc <_vfiprintf_r+0x18>
 800c1f8:	f000 fb16 	bl	800c828 <__sinit>
 800c1fc:	4b89      	ldr	r3, [pc, #548]	; (800c424 <_vfiprintf_r+0x240>)
 800c1fe:	429d      	cmp	r5, r3
 800c200:	d11b      	bne.n	800c23a <_vfiprintf_r+0x56>
 800c202:	6875      	ldr	r5, [r6, #4]
 800c204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c206:	07d9      	lsls	r1, r3, #31
 800c208:	d405      	bmi.n	800c216 <_vfiprintf_r+0x32>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_vfiprintf_r+0x32>
 800c210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c212:	f000 fba7 	bl	800c964 <__retarget_lock_acquire_recursive>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	071b      	lsls	r3, r3, #28
 800c21a:	d501      	bpl.n	800c220 <_vfiprintf_r+0x3c>
 800c21c:	692b      	ldr	r3, [r5, #16]
 800c21e:	b9eb      	cbnz	r3, 800c25c <_vfiprintf_r+0x78>
 800c220:	4629      	mov	r1, r5
 800c222:	4630      	mov	r0, r6
 800c224:	f000 f970 	bl	800c508 <__swsetup_r>
 800c228:	b1c0      	cbz	r0, 800c25c <_vfiprintf_r+0x78>
 800c22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c22c:	07dc      	lsls	r4, r3, #31
 800c22e:	d50e      	bpl.n	800c24e <_vfiprintf_r+0x6a>
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	b01d      	add	sp, #116	; 0x74
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	4b7b      	ldr	r3, [pc, #492]	; (800c428 <_vfiprintf_r+0x244>)
 800c23c:	429d      	cmp	r5, r3
 800c23e:	d101      	bne.n	800c244 <_vfiprintf_r+0x60>
 800c240:	68b5      	ldr	r5, [r6, #8]
 800c242:	e7df      	b.n	800c204 <_vfiprintf_r+0x20>
 800c244:	4b79      	ldr	r3, [pc, #484]	; (800c42c <_vfiprintf_r+0x248>)
 800c246:	429d      	cmp	r5, r3
 800c248:	bf08      	it	eq
 800c24a:	68f5      	ldreq	r5, [r6, #12]
 800c24c:	e7da      	b.n	800c204 <_vfiprintf_r+0x20>
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	0598      	lsls	r0, r3, #22
 800c252:	d4ed      	bmi.n	800c230 <_vfiprintf_r+0x4c>
 800c254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c256:	f000 fb86 	bl	800c966 <__retarget_lock_release_recursive>
 800c25a:	e7e9      	b.n	800c230 <_vfiprintf_r+0x4c>
 800c25c:	2300      	movs	r3, #0
 800c25e:	9309      	str	r3, [sp, #36]	; 0x24
 800c260:	2320      	movs	r3, #32
 800c262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c266:	f8cd 800c 	str.w	r8, [sp, #12]
 800c26a:	2330      	movs	r3, #48	; 0x30
 800c26c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c430 <_vfiprintf_r+0x24c>
 800c270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c274:	f04f 0901 	mov.w	r9, #1
 800c278:	4623      	mov	r3, r4
 800c27a:	469a      	mov	sl, r3
 800c27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c280:	b10a      	cbz	r2, 800c286 <_vfiprintf_r+0xa2>
 800c282:	2a25      	cmp	r2, #37	; 0x25
 800c284:	d1f9      	bne.n	800c27a <_vfiprintf_r+0x96>
 800c286:	ebba 0b04 	subs.w	fp, sl, r4
 800c28a:	d00b      	beq.n	800c2a4 <_vfiprintf_r+0xc0>
 800c28c:	465b      	mov	r3, fp
 800c28e:	4622      	mov	r2, r4
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f7ff ff93 	bl	800c1be <__sfputs_r>
 800c298:	3001      	adds	r0, #1
 800c29a:	f000 80aa 	beq.w	800c3f2 <_vfiprintf_r+0x20e>
 800c29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2a0:	445a      	add	r2, fp
 800c2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 80a2 	beq.w	800c3f2 <_vfiprintf_r+0x20e>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b8:	f10a 0a01 	add.w	sl, sl, #1
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	9307      	str	r3, [sp, #28]
 800c2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c6:	4654      	mov	r4, sl
 800c2c8:	2205      	movs	r2, #5
 800c2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ce:	4858      	ldr	r0, [pc, #352]	; (800c430 <_vfiprintf_r+0x24c>)
 800c2d0:	f7f3 ffbe 	bl	8000250 <memchr>
 800c2d4:	9a04      	ldr	r2, [sp, #16]
 800c2d6:	b9d8      	cbnz	r0, 800c310 <_vfiprintf_r+0x12c>
 800c2d8:	06d1      	lsls	r1, r2, #27
 800c2da:	bf44      	itt	mi
 800c2dc:	2320      	movmi	r3, #32
 800c2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e2:	0713      	lsls	r3, r2, #28
 800c2e4:	bf44      	itt	mi
 800c2e6:	232b      	movmi	r3, #43	; 0x2b
 800c2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f2:	d015      	beq.n	800c320 <_vfiprintf_r+0x13c>
 800c2f4:	9a07      	ldr	r2, [sp, #28]
 800c2f6:	4654      	mov	r4, sl
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	f04f 0c0a 	mov.w	ip, #10
 800c2fe:	4621      	mov	r1, r4
 800c300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c304:	3b30      	subs	r3, #48	; 0x30
 800c306:	2b09      	cmp	r3, #9
 800c308:	d94e      	bls.n	800c3a8 <_vfiprintf_r+0x1c4>
 800c30a:	b1b0      	cbz	r0, 800c33a <_vfiprintf_r+0x156>
 800c30c:	9207      	str	r2, [sp, #28]
 800c30e:	e014      	b.n	800c33a <_vfiprintf_r+0x156>
 800c310:	eba0 0308 	sub.w	r3, r0, r8
 800c314:	fa09 f303 	lsl.w	r3, r9, r3
 800c318:	4313      	orrs	r3, r2
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	46a2      	mov	sl, r4
 800c31e:	e7d2      	b.n	800c2c6 <_vfiprintf_r+0xe2>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	1d19      	adds	r1, r3, #4
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	9103      	str	r1, [sp, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	bfbb      	ittet	lt
 800c32c:	425b      	neglt	r3, r3
 800c32e:	f042 0202 	orrlt.w	r2, r2, #2
 800c332:	9307      	strge	r3, [sp, #28]
 800c334:	9307      	strlt	r3, [sp, #28]
 800c336:	bfb8      	it	lt
 800c338:	9204      	strlt	r2, [sp, #16]
 800c33a:	7823      	ldrb	r3, [r4, #0]
 800c33c:	2b2e      	cmp	r3, #46	; 0x2e
 800c33e:	d10c      	bne.n	800c35a <_vfiprintf_r+0x176>
 800c340:	7863      	ldrb	r3, [r4, #1]
 800c342:	2b2a      	cmp	r3, #42	; 0x2a
 800c344:	d135      	bne.n	800c3b2 <_vfiprintf_r+0x1ce>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	1d1a      	adds	r2, r3, #4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	9203      	str	r2, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfb8      	it	lt
 800c352:	f04f 33ff 	movlt.w	r3, #4294967295
 800c356:	3402      	adds	r4, #2
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c440 <_vfiprintf_r+0x25c>
 800c35e:	7821      	ldrb	r1, [r4, #0]
 800c360:	2203      	movs	r2, #3
 800c362:	4650      	mov	r0, sl
 800c364:	f7f3 ff74 	bl	8000250 <memchr>
 800c368:	b140      	cbz	r0, 800c37c <_vfiprintf_r+0x198>
 800c36a:	2340      	movs	r3, #64	; 0x40
 800c36c:	eba0 000a 	sub.w	r0, r0, sl
 800c370:	fa03 f000 	lsl.w	r0, r3, r0
 800c374:	9b04      	ldr	r3, [sp, #16]
 800c376:	4303      	orrs	r3, r0
 800c378:	3401      	adds	r4, #1
 800c37a:	9304      	str	r3, [sp, #16]
 800c37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c380:	482c      	ldr	r0, [pc, #176]	; (800c434 <_vfiprintf_r+0x250>)
 800c382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c386:	2206      	movs	r2, #6
 800c388:	f7f3 ff62 	bl	8000250 <memchr>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d03f      	beq.n	800c410 <_vfiprintf_r+0x22c>
 800c390:	4b29      	ldr	r3, [pc, #164]	; (800c438 <_vfiprintf_r+0x254>)
 800c392:	bb1b      	cbnz	r3, 800c3dc <_vfiprintf_r+0x1f8>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	3307      	adds	r3, #7
 800c398:	f023 0307 	bic.w	r3, r3, #7
 800c39c:	3308      	adds	r3, #8
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a2:	443b      	add	r3, r7
 800c3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a6:	e767      	b.n	800c278 <_vfiprintf_r+0x94>
 800c3a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	e7a5      	b.n	800c2fe <_vfiprintf_r+0x11a>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	3401      	adds	r4, #1
 800c3b6:	9305      	str	r3, [sp, #20]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f04f 0c0a 	mov.w	ip, #10
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c4:	3a30      	subs	r2, #48	; 0x30
 800c3c6:	2a09      	cmp	r2, #9
 800c3c8:	d903      	bls.n	800c3d2 <_vfiprintf_r+0x1ee>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0c5      	beq.n	800c35a <_vfiprintf_r+0x176>
 800c3ce:	9105      	str	r1, [sp, #20]
 800c3d0:	e7c3      	b.n	800c35a <_vfiprintf_r+0x176>
 800c3d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e7f0      	b.n	800c3be <_vfiprintf_r+0x1da>
 800c3dc:	ab03      	add	r3, sp, #12
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	4b16      	ldr	r3, [pc, #88]	; (800c43c <_vfiprintf_r+0x258>)
 800c3e4:	a904      	add	r1, sp, #16
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7fd fd64 	bl	8009eb4 <_printf_float>
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	1c78      	adds	r0, r7, #1
 800c3f0:	d1d6      	bne.n	800c3a0 <_vfiprintf_r+0x1bc>
 800c3f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f4:	07d9      	lsls	r1, r3, #31
 800c3f6:	d405      	bmi.n	800c404 <_vfiprintf_r+0x220>
 800c3f8:	89ab      	ldrh	r3, [r5, #12]
 800c3fa:	059a      	lsls	r2, r3, #22
 800c3fc:	d402      	bmi.n	800c404 <_vfiprintf_r+0x220>
 800c3fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c400:	f000 fab1 	bl	800c966 <__retarget_lock_release_recursive>
 800c404:	89ab      	ldrh	r3, [r5, #12]
 800c406:	065b      	lsls	r3, r3, #25
 800c408:	f53f af12 	bmi.w	800c230 <_vfiprintf_r+0x4c>
 800c40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c40e:	e711      	b.n	800c234 <_vfiprintf_r+0x50>
 800c410:	ab03      	add	r3, sp, #12
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	462a      	mov	r2, r5
 800c416:	4b09      	ldr	r3, [pc, #36]	; (800c43c <_vfiprintf_r+0x258>)
 800c418:	a904      	add	r1, sp, #16
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7fd ffee 	bl	800a3fc <_printf_i>
 800c420:	e7e4      	b.n	800c3ec <_vfiprintf_r+0x208>
 800c422:	bf00      	nop
 800c424:	0800d208 	.word	0x0800d208
 800c428:	0800d228 	.word	0x0800d228
 800c42c:	0800d1e8 	.word	0x0800d1e8
 800c430:	0800d1d4 	.word	0x0800d1d4
 800c434:	0800d1de 	.word	0x0800d1de
 800c438:	08009eb5 	.word	0x08009eb5
 800c43c:	0800c1bf 	.word	0x0800c1bf
 800c440:	0800d1da 	.word	0x0800d1da

0800c444 <_sbrk_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d06      	ldr	r5, [pc, #24]	; (800c460 <_sbrk_r+0x1c>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	602b      	str	r3, [r5, #0]
 800c450:	f7f5 fb34 	bl	8001abc <_sbrk>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_sbrk_r+0x1a>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_sbrk_r+0x1a>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	200006d0 	.word	0x200006d0

0800c464 <__swbuf_r>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	460e      	mov	r6, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	4605      	mov	r5, r0
 800c46c:	b118      	cbz	r0, 800c476 <__swbuf_r+0x12>
 800c46e:	6983      	ldr	r3, [r0, #24]
 800c470:	b90b      	cbnz	r3, 800c476 <__swbuf_r+0x12>
 800c472:	f000 f9d9 	bl	800c828 <__sinit>
 800c476:	4b21      	ldr	r3, [pc, #132]	; (800c4fc <__swbuf_r+0x98>)
 800c478:	429c      	cmp	r4, r3
 800c47a:	d12b      	bne.n	800c4d4 <__swbuf_r+0x70>
 800c47c:	686c      	ldr	r4, [r5, #4]
 800c47e:	69a3      	ldr	r3, [r4, #24]
 800c480:	60a3      	str	r3, [r4, #8]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	071a      	lsls	r2, r3, #28
 800c486:	d52f      	bpl.n	800c4e8 <__swbuf_r+0x84>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	b36b      	cbz	r3, 800c4e8 <__swbuf_r+0x84>
 800c48c:	6923      	ldr	r3, [r4, #16]
 800c48e:	6820      	ldr	r0, [r4, #0]
 800c490:	1ac0      	subs	r0, r0, r3
 800c492:	6963      	ldr	r3, [r4, #20]
 800c494:	b2f6      	uxtb	r6, r6
 800c496:	4283      	cmp	r3, r0
 800c498:	4637      	mov	r7, r6
 800c49a:	dc04      	bgt.n	800c4a6 <__swbuf_r+0x42>
 800c49c:	4621      	mov	r1, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f92e 	bl	800c700 <_fflush_r>
 800c4a4:	bb30      	cbnz	r0, 800c4f4 <__swbuf_r+0x90>
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	60a3      	str	r3, [r4, #8]
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	6022      	str	r2, [r4, #0]
 800c4b2:	701e      	strb	r6, [r3, #0]
 800c4b4:	6963      	ldr	r3, [r4, #20]
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	d004      	beq.n	800c4c6 <__swbuf_r+0x62>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	07db      	lsls	r3, r3, #31
 800c4c0:	d506      	bpl.n	800c4d0 <__swbuf_r+0x6c>
 800c4c2:	2e0a      	cmp	r6, #10
 800c4c4:	d104      	bne.n	800c4d0 <__swbuf_r+0x6c>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 f919 	bl	800c700 <_fflush_r>
 800c4ce:	b988      	cbnz	r0, 800c4f4 <__swbuf_r+0x90>
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d4:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <__swbuf_r+0x9c>)
 800c4d6:	429c      	cmp	r4, r3
 800c4d8:	d101      	bne.n	800c4de <__swbuf_r+0x7a>
 800c4da:	68ac      	ldr	r4, [r5, #8]
 800c4dc:	e7cf      	b.n	800c47e <__swbuf_r+0x1a>
 800c4de:	4b09      	ldr	r3, [pc, #36]	; (800c504 <__swbuf_r+0xa0>)
 800c4e0:	429c      	cmp	r4, r3
 800c4e2:	bf08      	it	eq
 800c4e4:	68ec      	ldreq	r4, [r5, #12]
 800c4e6:	e7ca      	b.n	800c47e <__swbuf_r+0x1a>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f000 f80c 	bl	800c508 <__swsetup_r>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d0cb      	beq.n	800c48c <__swbuf_r+0x28>
 800c4f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c4f8:	e7ea      	b.n	800c4d0 <__swbuf_r+0x6c>
 800c4fa:	bf00      	nop
 800c4fc:	0800d208 	.word	0x0800d208
 800c500:	0800d228 	.word	0x0800d228
 800c504:	0800d1e8 	.word	0x0800d1e8

0800c508 <__swsetup_r>:
 800c508:	4b32      	ldr	r3, [pc, #200]	; (800c5d4 <__swsetup_r+0xcc>)
 800c50a:	b570      	push	{r4, r5, r6, lr}
 800c50c:	681d      	ldr	r5, [r3, #0]
 800c50e:	4606      	mov	r6, r0
 800c510:	460c      	mov	r4, r1
 800c512:	b125      	cbz	r5, 800c51e <__swsetup_r+0x16>
 800c514:	69ab      	ldr	r3, [r5, #24]
 800c516:	b913      	cbnz	r3, 800c51e <__swsetup_r+0x16>
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 f985 	bl	800c828 <__sinit>
 800c51e:	4b2e      	ldr	r3, [pc, #184]	; (800c5d8 <__swsetup_r+0xd0>)
 800c520:	429c      	cmp	r4, r3
 800c522:	d10f      	bne.n	800c544 <__swsetup_r+0x3c>
 800c524:	686c      	ldr	r4, [r5, #4]
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c52c:	0719      	lsls	r1, r3, #28
 800c52e:	d42c      	bmi.n	800c58a <__swsetup_r+0x82>
 800c530:	06dd      	lsls	r5, r3, #27
 800c532:	d411      	bmi.n	800c558 <__swsetup_r+0x50>
 800c534:	2309      	movs	r3, #9
 800c536:	6033      	str	r3, [r6, #0]
 800c538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295
 800c542:	e03e      	b.n	800c5c2 <__swsetup_r+0xba>
 800c544:	4b25      	ldr	r3, [pc, #148]	; (800c5dc <__swsetup_r+0xd4>)
 800c546:	429c      	cmp	r4, r3
 800c548:	d101      	bne.n	800c54e <__swsetup_r+0x46>
 800c54a:	68ac      	ldr	r4, [r5, #8]
 800c54c:	e7eb      	b.n	800c526 <__swsetup_r+0x1e>
 800c54e:	4b24      	ldr	r3, [pc, #144]	; (800c5e0 <__swsetup_r+0xd8>)
 800c550:	429c      	cmp	r4, r3
 800c552:	bf08      	it	eq
 800c554:	68ec      	ldreq	r4, [r5, #12]
 800c556:	e7e6      	b.n	800c526 <__swsetup_r+0x1e>
 800c558:	0758      	lsls	r0, r3, #29
 800c55a:	d512      	bpl.n	800c582 <__swsetup_r+0x7a>
 800c55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c55e:	b141      	cbz	r1, 800c572 <__swsetup_r+0x6a>
 800c560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c564:	4299      	cmp	r1, r3
 800c566:	d002      	beq.n	800c56e <__swsetup_r+0x66>
 800c568:	4630      	mov	r0, r6
 800c56a:	f7ff fbd5 	bl	800bd18 <_free_r>
 800c56e:	2300      	movs	r3, #0
 800c570:	6363      	str	r3, [r4, #52]	; 0x34
 800c572:	89a3      	ldrh	r3, [r4, #12]
 800c574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	2300      	movs	r3, #0
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	6923      	ldr	r3, [r4, #16]
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f043 0308 	orr.w	r3, r3, #8
 800c588:	81a3      	strh	r3, [r4, #12]
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	b94b      	cbnz	r3, 800c5a2 <__swsetup_r+0x9a>
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c598:	d003      	beq.n	800c5a2 <__swsetup_r+0x9a>
 800c59a:	4621      	mov	r1, r4
 800c59c:	4630      	mov	r0, r6
 800c59e:	f000 fa09 	bl	800c9b4 <__smakebuf_r>
 800c5a2:	89a0      	ldrh	r0, [r4, #12]
 800c5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5a8:	f010 0301 	ands.w	r3, r0, #1
 800c5ac:	d00a      	beq.n	800c5c4 <__swsetup_r+0xbc>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60a3      	str	r3, [r4, #8]
 800c5b2:	6963      	ldr	r3, [r4, #20]
 800c5b4:	425b      	negs	r3, r3
 800c5b6:	61a3      	str	r3, [r4, #24]
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	b943      	cbnz	r3, 800c5ce <__swsetup_r+0xc6>
 800c5bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5c0:	d1ba      	bne.n	800c538 <__swsetup_r+0x30>
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}
 800c5c4:	0781      	lsls	r1, r0, #30
 800c5c6:	bf58      	it	pl
 800c5c8:	6963      	ldrpl	r3, [r4, #20]
 800c5ca:	60a3      	str	r3, [r4, #8]
 800c5cc:	e7f4      	b.n	800c5b8 <__swsetup_r+0xb0>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e7f7      	b.n	800c5c2 <__swsetup_r+0xba>
 800c5d2:	bf00      	nop
 800c5d4:	20000208 	.word	0x20000208
 800c5d8:	0800d208 	.word	0x0800d208
 800c5dc:	0800d228 	.word	0x0800d228
 800c5e0:	0800d1e8 	.word	0x0800d1e8

0800c5e4 <abort>:
 800c5e4:	b508      	push	{r3, lr}
 800c5e6:	2006      	movs	r0, #6
 800c5e8:	f000 fab4 	bl	800cb54 <raise>
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	f7f5 f9ed 	bl	80019cc <_exit>
	...

0800c5f4 <__sflush_r>:
 800c5f4:	898a      	ldrh	r2, [r1, #12]
 800c5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	0710      	lsls	r0, r2, #28
 800c5fe:	460c      	mov	r4, r1
 800c600:	d458      	bmi.n	800c6b4 <__sflush_r+0xc0>
 800c602:	684b      	ldr	r3, [r1, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	dc05      	bgt.n	800c614 <__sflush_r+0x20>
 800c608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	dc02      	bgt.n	800c614 <__sflush_r+0x20>
 800c60e:	2000      	movs	r0, #0
 800c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c616:	2e00      	cmp	r6, #0
 800c618:	d0f9      	beq.n	800c60e <__sflush_r+0x1a>
 800c61a:	2300      	movs	r3, #0
 800c61c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c620:	682f      	ldr	r7, [r5, #0]
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	d032      	beq.n	800c68c <__sflush_r+0x98>
 800c626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	075a      	lsls	r2, r3, #29
 800c62c:	d505      	bpl.n	800c63a <__sflush_r+0x46>
 800c62e:	6863      	ldr	r3, [r4, #4]
 800c630:	1ac0      	subs	r0, r0, r3
 800c632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c634:	b10b      	cbz	r3, 800c63a <__sflush_r+0x46>
 800c636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c638:	1ac0      	subs	r0, r0, r3
 800c63a:	2300      	movs	r3, #0
 800c63c:	4602      	mov	r2, r0
 800c63e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c640:	6a21      	ldr	r1, [r4, #32]
 800c642:	4628      	mov	r0, r5
 800c644:	47b0      	blx	r6
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	d106      	bne.n	800c65a <__sflush_r+0x66>
 800c64c:	6829      	ldr	r1, [r5, #0]
 800c64e:	291d      	cmp	r1, #29
 800c650:	d82c      	bhi.n	800c6ac <__sflush_r+0xb8>
 800c652:	4a2a      	ldr	r2, [pc, #168]	; (800c6fc <__sflush_r+0x108>)
 800c654:	40ca      	lsrs	r2, r1
 800c656:	07d6      	lsls	r6, r2, #31
 800c658:	d528      	bpl.n	800c6ac <__sflush_r+0xb8>
 800c65a:	2200      	movs	r2, #0
 800c65c:	6062      	str	r2, [r4, #4]
 800c65e:	04d9      	lsls	r1, r3, #19
 800c660:	6922      	ldr	r2, [r4, #16]
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	d504      	bpl.n	800c670 <__sflush_r+0x7c>
 800c666:	1c42      	adds	r2, r0, #1
 800c668:	d101      	bne.n	800c66e <__sflush_r+0x7a>
 800c66a:	682b      	ldr	r3, [r5, #0]
 800c66c:	b903      	cbnz	r3, 800c670 <__sflush_r+0x7c>
 800c66e:	6560      	str	r0, [r4, #84]	; 0x54
 800c670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c672:	602f      	str	r7, [r5, #0]
 800c674:	2900      	cmp	r1, #0
 800c676:	d0ca      	beq.n	800c60e <__sflush_r+0x1a>
 800c678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c67c:	4299      	cmp	r1, r3
 800c67e:	d002      	beq.n	800c686 <__sflush_r+0x92>
 800c680:	4628      	mov	r0, r5
 800c682:	f7ff fb49 	bl	800bd18 <_free_r>
 800c686:	2000      	movs	r0, #0
 800c688:	6360      	str	r0, [r4, #52]	; 0x34
 800c68a:	e7c1      	b.n	800c610 <__sflush_r+0x1c>
 800c68c:	6a21      	ldr	r1, [r4, #32]
 800c68e:	2301      	movs	r3, #1
 800c690:	4628      	mov	r0, r5
 800c692:	47b0      	blx	r6
 800c694:	1c41      	adds	r1, r0, #1
 800c696:	d1c7      	bne.n	800c628 <__sflush_r+0x34>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0c4      	beq.n	800c628 <__sflush_r+0x34>
 800c69e:	2b1d      	cmp	r3, #29
 800c6a0:	d001      	beq.n	800c6a6 <__sflush_r+0xb2>
 800c6a2:	2b16      	cmp	r3, #22
 800c6a4:	d101      	bne.n	800c6aa <__sflush_r+0xb6>
 800c6a6:	602f      	str	r7, [r5, #0]
 800c6a8:	e7b1      	b.n	800c60e <__sflush_r+0x1a>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	e7ad      	b.n	800c610 <__sflush_r+0x1c>
 800c6b4:	690f      	ldr	r7, [r1, #16]
 800c6b6:	2f00      	cmp	r7, #0
 800c6b8:	d0a9      	beq.n	800c60e <__sflush_r+0x1a>
 800c6ba:	0793      	lsls	r3, r2, #30
 800c6bc:	680e      	ldr	r6, [r1, #0]
 800c6be:	bf08      	it	eq
 800c6c0:	694b      	ldreq	r3, [r1, #20]
 800c6c2:	600f      	str	r7, [r1, #0]
 800c6c4:	bf18      	it	ne
 800c6c6:	2300      	movne	r3, #0
 800c6c8:	eba6 0807 	sub.w	r8, r6, r7
 800c6cc:	608b      	str	r3, [r1, #8]
 800c6ce:	f1b8 0f00 	cmp.w	r8, #0
 800c6d2:	dd9c      	ble.n	800c60e <__sflush_r+0x1a>
 800c6d4:	6a21      	ldr	r1, [r4, #32]
 800c6d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6d8:	4643      	mov	r3, r8
 800c6da:	463a      	mov	r2, r7
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b0      	blx	r6
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	dc06      	bgt.n	800c6f2 <__sflush_r+0xfe>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	e78e      	b.n	800c610 <__sflush_r+0x1c>
 800c6f2:	4407      	add	r7, r0
 800c6f4:	eba8 0800 	sub.w	r8, r8, r0
 800c6f8:	e7e9      	b.n	800c6ce <__sflush_r+0xda>
 800c6fa:	bf00      	nop
 800c6fc:	20400001 	.word	0x20400001

0800c700 <_fflush_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	690b      	ldr	r3, [r1, #16]
 800c704:	4605      	mov	r5, r0
 800c706:	460c      	mov	r4, r1
 800c708:	b913      	cbnz	r3, 800c710 <_fflush_r+0x10>
 800c70a:	2500      	movs	r5, #0
 800c70c:	4628      	mov	r0, r5
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	b118      	cbz	r0, 800c71a <_fflush_r+0x1a>
 800c712:	6983      	ldr	r3, [r0, #24]
 800c714:	b90b      	cbnz	r3, 800c71a <_fflush_r+0x1a>
 800c716:	f000 f887 	bl	800c828 <__sinit>
 800c71a:	4b14      	ldr	r3, [pc, #80]	; (800c76c <_fflush_r+0x6c>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	d11b      	bne.n	800c758 <_fflush_r+0x58>
 800c720:	686c      	ldr	r4, [r5, #4]
 800c722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d0ef      	beq.n	800c70a <_fflush_r+0xa>
 800c72a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c72c:	07d0      	lsls	r0, r2, #31
 800c72e:	d404      	bmi.n	800c73a <_fflush_r+0x3a>
 800c730:	0599      	lsls	r1, r3, #22
 800c732:	d402      	bmi.n	800c73a <_fflush_r+0x3a>
 800c734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c736:	f000 f915 	bl	800c964 <__retarget_lock_acquire_recursive>
 800c73a:	4628      	mov	r0, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7ff ff59 	bl	800c5f4 <__sflush_r>
 800c742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c744:	07da      	lsls	r2, r3, #31
 800c746:	4605      	mov	r5, r0
 800c748:	d4e0      	bmi.n	800c70c <_fflush_r+0xc>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	059b      	lsls	r3, r3, #22
 800c74e:	d4dd      	bmi.n	800c70c <_fflush_r+0xc>
 800c750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c752:	f000 f908 	bl	800c966 <__retarget_lock_release_recursive>
 800c756:	e7d9      	b.n	800c70c <_fflush_r+0xc>
 800c758:	4b05      	ldr	r3, [pc, #20]	; (800c770 <_fflush_r+0x70>)
 800c75a:	429c      	cmp	r4, r3
 800c75c:	d101      	bne.n	800c762 <_fflush_r+0x62>
 800c75e:	68ac      	ldr	r4, [r5, #8]
 800c760:	e7df      	b.n	800c722 <_fflush_r+0x22>
 800c762:	4b04      	ldr	r3, [pc, #16]	; (800c774 <_fflush_r+0x74>)
 800c764:	429c      	cmp	r4, r3
 800c766:	bf08      	it	eq
 800c768:	68ec      	ldreq	r4, [r5, #12]
 800c76a:	e7da      	b.n	800c722 <_fflush_r+0x22>
 800c76c:	0800d208 	.word	0x0800d208
 800c770:	0800d228 	.word	0x0800d228
 800c774:	0800d1e8 	.word	0x0800d1e8

0800c778 <std>:
 800c778:	2300      	movs	r3, #0
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	e9c0 3300 	strd	r3, r3, [r0]
 800c782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c786:	6083      	str	r3, [r0, #8]
 800c788:	8181      	strh	r1, [r0, #12]
 800c78a:	6643      	str	r3, [r0, #100]	; 0x64
 800c78c:	81c2      	strh	r2, [r0, #14]
 800c78e:	6183      	str	r3, [r0, #24]
 800c790:	4619      	mov	r1, r3
 800c792:	2208      	movs	r2, #8
 800c794:	305c      	adds	r0, #92	; 0x5c
 800c796:	f7fd fae5 	bl	8009d64 <memset>
 800c79a:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <std+0x38>)
 800c79c:	6263      	str	r3, [r4, #36]	; 0x24
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <std+0x3c>)
 800c7a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <std+0x40>)
 800c7a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7a6:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <std+0x44>)
 800c7a8:	6224      	str	r4, [r4, #32]
 800c7aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	bf00      	nop
 800c7b0:	0800cb8d 	.word	0x0800cb8d
 800c7b4:	0800cbaf 	.word	0x0800cbaf
 800c7b8:	0800cbe7 	.word	0x0800cbe7
 800c7bc:	0800cc0b 	.word	0x0800cc0b

0800c7c0 <_cleanup_r>:
 800c7c0:	4901      	ldr	r1, [pc, #4]	; (800c7c8 <_cleanup_r+0x8>)
 800c7c2:	f000 b8af 	b.w	800c924 <_fwalk_reent>
 800c7c6:	bf00      	nop
 800c7c8:	0800c701 	.word	0x0800c701

0800c7cc <__sfmoreglue>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	2268      	movs	r2, #104	; 0x68
 800c7d0:	1e4d      	subs	r5, r1, #1
 800c7d2:	4355      	muls	r5, r2
 800c7d4:	460e      	mov	r6, r1
 800c7d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7da:	f7ff fb09 	bl	800bdf0 <_malloc_r>
 800c7de:	4604      	mov	r4, r0
 800c7e0:	b140      	cbz	r0, 800c7f4 <__sfmoreglue+0x28>
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c7e8:	300c      	adds	r0, #12
 800c7ea:	60a0      	str	r0, [r4, #8]
 800c7ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7f0:	f7fd fab8 	bl	8009d64 <memset>
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}

0800c7f8 <__sfp_lock_acquire>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	; (800c800 <__sfp_lock_acquire+0x8>)
 800c7fa:	f000 b8b3 	b.w	800c964 <__retarget_lock_acquire_recursive>
 800c7fe:	bf00      	nop
 800c800:	200006cd 	.word	0x200006cd

0800c804 <__sfp_lock_release>:
 800c804:	4801      	ldr	r0, [pc, #4]	; (800c80c <__sfp_lock_release+0x8>)
 800c806:	f000 b8ae 	b.w	800c966 <__retarget_lock_release_recursive>
 800c80a:	bf00      	nop
 800c80c:	200006cd 	.word	0x200006cd

0800c810 <__sinit_lock_acquire>:
 800c810:	4801      	ldr	r0, [pc, #4]	; (800c818 <__sinit_lock_acquire+0x8>)
 800c812:	f000 b8a7 	b.w	800c964 <__retarget_lock_acquire_recursive>
 800c816:	bf00      	nop
 800c818:	200006ce 	.word	0x200006ce

0800c81c <__sinit_lock_release>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__sinit_lock_release+0x8>)
 800c81e:	f000 b8a2 	b.w	800c966 <__retarget_lock_release_recursive>
 800c822:	bf00      	nop
 800c824:	200006ce 	.word	0x200006ce

0800c828 <__sinit>:
 800c828:	b510      	push	{r4, lr}
 800c82a:	4604      	mov	r4, r0
 800c82c:	f7ff fff0 	bl	800c810 <__sinit_lock_acquire>
 800c830:	69a3      	ldr	r3, [r4, #24]
 800c832:	b11b      	cbz	r3, 800c83c <__sinit+0x14>
 800c834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c838:	f7ff bff0 	b.w	800c81c <__sinit_lock_release>
 800c83c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c840:	6523      	str	r3, [r4, #80]	; 0x50
 800c842:	4b13      	ldr	r3, [pc, #76]	; (800c890 <__sinit+0x68>)
 800c844:	4a13      	ldr	r2, [pc, #76]	; (800c894 <__sinit+0x6c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	62a2      	str	r2, [r4, #40]	; 0x28
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	bf04      	itt	eq
 800c84e:	2301      	moveq	r3, #1
 800c850:	61a3      	streq	r3, [r4, #24]
 800c852:	4620      	mov	r0, r4
 800c854:	f000 f820 	bl	800c898 <__sfp>
 800c858:	6060      	str	r0, [r4, #4]
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f81c 	bl	800c898 <__sfp>
 800c860:	60a0      	str	r0, [r4, #8]
 800c862:	4620      	mov	r0, r4
 800c864:	f000 f818 	bl	800c898 <__sfp>
 800c868:	2200      	movs	r2, #0
 800c86a:	60e0      	str	r0, [r4, #12]
 800c86c:	2104      	movs	r1, #4
 800c86e:	6860      	ldr	r0, [r4, #4]
 800c870:	f7ff ff82 	bl	800c778 <std>
 800c874:	68a0      	ldr	r0, [r4, #8]
 800c876:	2201      	movs	r2, #1
 800c878:	2109      	movs	r1, #9
 800c87a:	f7ff ff7d 	bl	800c778 <std>
 800c87e:	68e0      	ldr	r0, [r4, #12]
 800c880:	2202      	movs	r2, #2
 800c882:	2112      	movs	r1, #18
 800c884:	f7ff ff78 	bl	800c778 <std>
 800c888:	2301      	movs	r3, #1
 800c88a:	61a3      	str	r3, [r4, #24]
 800c88c:	e7d2      	b.n	800c834 <__sinit+0xc>
 800c88e:	bf00      	nop
 800c890:	0800ce14 	.word	0x0800ce14
 800c894:	0800c7c1 	.word	0x0800c7c1

0800c898 <__sfp>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	4607      	mov	r7, r0
 800c89c:	f7ff ffac 	bl	800c7f8 <__sfp_lock_acquire>
 800c8a0:	4b1e      	ldr	r3, [pc, #120]	; (800c91c <__sfp+0x84>)
 800c8a2:	681e      	ldr	r6, [r3, #0]
 800c8a4:	69b3      	ldr	r3, [r6, #24]
 800c8a6:	b913      	cbnz	r3, 800c8ae <__sfp+0x16>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7ff ffbd 	bl	800c828 <__sinit>
 800c8ae:	3648      	adds	r6, #72	; 0x48
 800c8b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	d503      	bpl.n	800c8c0 <__sfp+0x28>
 800c8b8:	6833      	ldr	r3, [r6, #0]
 800c8ba:	b30b      	cbz	r3, 800c900 <__sfp+0x68>
 800c8bc:	6836      	ldr	r6, [r6, #0]
 800c8be:	e7f7      	b.n	800c8b0 <__sfp+0x18>
 800c8c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8c4:	b9d5      	cbnz	r5, 800c8fc <__sfp+0x64>
 800c8c6:	4b16      	ldr	r3, [pc, #88]	; (800c920 <__sfp+0x88>)
 800c8c8:	60e3      	str	r3, [r4, #12]
 800c8ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c8d0:	f000 f847 	bl	800c962 <__retarget_lock_init_recursive>
 800c8d4:	f7ff ff96 	bl	800c804 <__sfp_lock_release>
 800c8d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8e0:	6025      	str	r5, [r4, #0]
 800c8e2:	61a5      	str	r5, [r4, #24]
 800c8e4:	2208      	movs	r2, #8
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8ec:	f7fd fa3a 	bl	8009d64 <memset>
 800c8f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8fc:	3468      	adds	r4, #104	; 0x68
 800c8fe:	e7d9      	b.n	800c8b4 <__sfp+0x1c>
 800c900:	2104      	movs	r1, #4
 800c902:	4638      	mov	r0, r7
 800c904:	f7ff ff62 	bl	800c7cc <__sfmoreglue>
 800c908:	4604      	mov	r4, r0
 800c90a:	6030      	str	r0, [r6, #0]
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d1d5      	bne.n	800c8bc <__sfp+0x24>
 800c910:	f7ff ff78 	bl	800c804 <__sfp_lock_release>
 800c914:	230c      	movs	r3, #12
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	e7ee      	b.n	800c8f8 <__sfp+0x60>
 800c91a:	bf00      	nop
 800c91c:	0800ce14 	.word	0x0800ce14
 800c920:	ffff0001 	.word	0xffff0001

0800c924 <_fwalk_reent>:
 800c924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c928:	4606      	mov	r6, r0
 800c92a:	4688      	mov	r8, r1
 800c92c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c930:	2700      	movs	r7, #0
 800c932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c936:	f1b9 0901 	subs.w	r9, r9, #1
 800c93a:	d505      	bpl.n	800c948 <_fwalk_reent+0x24>
 800c93c:	6824      	ldr	r4, [r4, #0]
 800c93e:	2c00      	cmp	r4, #0
 800c940:	d1f7      	bne.n	800c932 <_fwalk_reent+0xe>
 800c942:	4638      	mov	r0, r7
 800c944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c948:	89ab      	ldrh	r3, [r5, #12]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d907      	bls.n	800c95e <_fwalk_reent+0x3a>
 800c94e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c952:	3301      	adds	r3, #1
 800c954:	d003      	beq.n	800c95e <_fwalk_reent+0x3a>
 800c956:	4629      	mov	r1, r5
 800c958:	4630      	mov	r0, r6
 800c95a:	47c0      	blx	r8
 800c95c:	4307      	orrs	r7, r0
 800c95e:	3568      	adds	r5, #104	; 0x68
 800c960:	e7e9      	b.n	800c936 <_fwalk_reent+0x12>

0800c962 <__retarget_lock_init_recursive>:
 800c962:	4770      	bx	lr

0800c964 <__retarget_lock_acquire_recursive>:
 800c964:	4770      	bx	lr

0800c966 <__retarget_lock_release_recursive>:
 800c966:	4770      	bx	lr

0800c968 <__swhatbuf_r>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	460e      	mov	r6, r1
 800c96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c970:	2900      	cmp	r1, #0
 800c972:	b096      	sub	sp, #88	; 0x58
 800c974:	4614      	mov	r4, r2
 800c976:	461d      	mov	r5, r3
 800c978:	da08      	bge.n	800c98c <__swhatbuf_r+0x24>
 800c97a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	602a      	str	r2, [r5, #0]
 800c982:	061a      	lsls	r2, r3, #24
 800c984:	d410      	bmi.n	800c9a8 <__swhatbuf_r+0x40>
 800c986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98a:	e00e      	b.n	800c9aa <__swhatbuf_r+0x42>
 800c98c:	466a      	mov	r2, sp
 800c98e:	f000 f96f 	bl	800cc70 <_fstat_r>
 800c992:	2800      	cmp	r0, #0
 800c994:	dbf1      	blt.n	800c97a <__swhatbuf_r+0x12>
 800c996:	9a01      	ldr	r2, [sp, #4]
 800c998:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c99c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9a0:	425a      	negs	r2, r3
 800c9a2:	415a      	adcs	r2, r3
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	e7ee      	b.n	800c986 <__swhatbuf_r+0x1e>
 800c9a8:	2340      	movs	r3, #64	; 0x40
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	b016      	add	sp, #88	; 0x58
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9b4 <__smakebuf_r>:
 800c9b4:	898b      	ldrh	r3, [r1, #12]
 800c9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b8:	079d      	lsls	r5, r3, #30
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460c      	mov	r4, r1
 800c9be:	d507      	bpl.n	800c9d0 <__smakebuf_r+0x1c>
 800c9c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	6123      	str	r3, [r4, #16]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	6163      	str	r3, [r4, #20]
 800c9cc:	b002      	add	sp, #8
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}
 800c9d0:	ab01      	add	r3, sp, #4
 800c9d2:	466a      	mov	r2, sp
 800c9d4:	f7ff ffc8 	bl	800c968 <__swhatbuf_r>
 800c9d8:	9900      	ldr	r1, [sp, #0]
 800c9da:	4605      	mov	r5, r0
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7ff fa07 	bl	800bdf0 <_malloc_r>
 800c9e2:	b948      	cbnz	r0, 800c9f8 <__smakebuf_r+0x44>
 800c9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d4ef      	bmi.n	800c9cc <__smakebuf_r+0x18>
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	f043 0302 	orr.w	r3, r3, #2
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	e7e3      	b.n	800c9c0 <__smakebuf_r+0xc>
 800c9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <__smakebuf_r+0x7c>)
 800c9fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	6020      	str	r0, [r4, #0]
 800ca00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca04:	81a3      	strh	r3, [r4, #12]
 800ca06:	9b00      	ldr	r3, [sp, #0]
 800ca08:	6163      	str	r3, [r4, #20]
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	6120      	str	r0, [r4, #16]
 800ca0e:	b15b      	cbz	r3, 800ca28 <__smakebuf_r+0x74>
 800ca10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca14:	4630      	mov	r0, r6
 800ca16:	f000 f93d 	bl	800cc94 <_isatty_r>
 800ca1a:	b128      	cbz	r0, 800ca28 <__smakebuf_r+0x74>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f023 0303 	bic.w	r3, r3, #3
 800ca22:	f043 0301 	orr.w	r3, r3, #1
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	89a0      	ldrh	r0, [r4, #12]
 800ca2a:	4305      	orrs	r5, r0
 800ca2c:	81a5      	strh	r5, [r4, #12]
 800ca2e:	e7cd      	b.n	800c9cc <__smakebuf_r+0x18>
 800ca30:	0800c7c1 	.word	0x0800c7c1

0800ca34 <__ascii_mbtowc>:
 800ca34:	b082      	sub	sp, #8
 800ca36:	b901      	cbnz	r1, 800ca3a <__ascii_mbtowc+0x6>
 800ca38:	a901      	add	r1, sp, #4
 800ca3a:	b142      	cbz	r2, 800ca4e <__ascii_mbtowc+0x1a>
 800ca3c:	b14b      	cbz	r3, 800ca52 <__ascii_mbtowc+0x1e>
 800ca3e:	7813      	ldrb	r3, [r2, #0]
 800ca40:	600b      	str	r3, [r1, #0]
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	1e10      	subs	r0, r2, #0
 800ca46:	bf18      	it	ne
 800ca48:	2001      	movne	r0, #1
 800ca4a:	b002      	add	sp, #8
 800ca4c:	4770      	bx	lr
 800ca4e:	4610      	mov	r0, r2
 800ca50:	e7fb      	b.n	800ca4a <__ascii_mbtowc+0x16>
 800ca52:	f06f 0001 	mvn.w	r0, #1
 800ca56:	e7f8      	b.n	800ca4a <__ascii_mbtowc+0x16>

0800ca58 <memmove>:
 800ca58:	4288      	cmp	r0, r1
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	eb01 0402 	add.w	r4, r1, r2
 800ca60:	d902      	bls.n	800ca68 <memmove+0x10>
 800ca62:	4284      	cmp	r4, r0
 800ca64:	4623      	mov	r3, r4
 800ca66:	d807      	bhi.n	800ca78 <memmove+0x20>
 800ca68:	1e43      	subs	r3, r0, #1
 800ca6a:	42a1      	cmp	r1, r4
 800ca6c:	d008      	beq.n	800ca80 <memmove+0x28>
 800ca6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca76:	e7f8      	b.n	800ca6a <memmove+0x12>
 800ca78:	4402      	add	r2, r0
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	428a      	cmp	r2, r1
 800ca7e:	d100      	bne.n	800ca82 <memmove+0x2a>
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca8a:	e7f7      	b.n	800ca7c <memmove+0x24>

0800ca8c <__malloc_lock>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	; (800ca94 <__malloc_lock+0x8>)
 800ca8e:	f7ff bf69 	b.w	800c964 <__retarget_lock_acquire_recursive>
 800ca92:	bf00      	nop
 800ca94:	200006cc 	.word	0x200006cc

0800ca98 <__malloc_unlock>:
 800ca98:	4801      	ldr	r0, [pc, #4]	; (800caa0 <__malloc_unlock+0x8>)
 800ca9a:	f7ff bf64 	b.w	800c966 <__retarget_lock_release_recursive>
 800ca9e:	bf00      	nop
 800caa0:	200006cc 	.word	0x200006cc

0800caa4 <_realloc_r>:
 800caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	4680      	mov	r8, r0
 800caaa:	4614      	mov	r4, r2
 800caac:	460e      	mov	r6, r1
 800caae:	b921      	cbnz	r1, 800caba <_realloc_r+0x16>
 800cab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab4:	4611      	mov	r1, r2
 800cab6:	f7ff b99b 	b.w	800bdf0 <_malloc_r>
 800caba:	b92a      	cbnz	r2, 800cac8 <_realloc_r+0x24>
 800cabc:	f7ff f92c 	bl	800bd18 <_free_r>
 800cac0:	4625      	mov	r5, r4
 800cac2:	4628      	mov	r0, r5
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	f000 f906 	bl	800ccd8 <_malloc_usable_size_r>
 800cacc:	4284      	cmp	r4, r0
 800cace:	4607      	mov	r7, r0
 800cad0:	d802      	bhi.n	800cad8 <_realloc_r+0x34>
 800cad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cad6:	d812      	bhi.n	800cafe <_realloc_r+0x5a>
 800cad8:	4621      	mov	r1, r4
 800cada:	4640      	mov	r0, r8
 800cadc:	f7ff f988 	bl	800bdf0 <_malloc_r>
 800cae0:	4605      	mov	r5, r0
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d0ed      	beq.n	800cac2 <_realloc_r+0x1e>
 800cae6:	42bc      	cmp	r4, r7
 800cae8:	4622      	mov	r2, r4
 800caea:	4631      	mov	r1, r6
 800caec:	bf28      	it	cs
 800caee:	463a      	movcs	r2, r7
 800caf0:	f7fe fd6a 	bl	800b5c8 <memcpy>
 800caf4:	4631      	mov	r1, r6
 800caf6:	4640      	mov	r0, r8
 800caf8:	f7ff f90e 	bl	800bd18 <_free_r>
 800cafc:	e7e1      	b.n	800cac2 <_realloc_r+0x1e>
 800cafe:	4635      	mov	r5, r6
 800cb00:	e7df      	b.n	800cac2 <_realloc_r+0x1e>

0800cb02 <_raise_r>:
 800cb02:	291f      	cmp	r1, #31
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4604      	mov	r4, r0
 800cb08:	460d      	mov	r5, r1
 800cb0a:	d904      	bls.n	800cb16 <_raise_r+0x14>
 800cb0c:	2316      	movs	r3, #22
 800cb0e:	6003      	str	r3, [r0, #0]
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb18:	b112      	cbz	r2, 800cb20 <_raise_r+0x1e>
 800cb1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb1e:	b94b      	cbnz	r3, 800cb34 <_raise_r+0x32>
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 f831 	bl	800cb88 <_getpid_r>
 800cb26:	462a      	mov	r2, r5
 800cb28:	4601      	mov	r1, r0
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb30:	f000 b818 	b.w	800cb64 <_kill_r>
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d00a      	beq.n	800cb4e <_raise_r+0x4c>
 800cb38:	1c59      	adds	r1, r3, #1
 800cb3a:	d103      	bne.n	800cb44 <_raise_r+0x42>
 800cb3c:	2316      	movs	r3, #22
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	2001      	movs	r0, #1
 800cb42:	e7e7      	b.n	800cb14 <_raise_r+0x12>
 800cb44:	2400      	movs	r4, #0
 800cb46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	4798      	blx	r3
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e7e0      	b.n	800cb14 <_raise_r+0x12>
	...

0800cb54 <raise>:
 800cb54:	4b02      	ldr	r3, [pc, #8]	; (800cb60 <raise+0xc>)
 800cb56:	4601      	mov	r1, r0
 800cb58:	6818      	ldr	r0, [r3, #0]
 800cb5a:	f7ff bfd2 	b.w	800cb02 <_raise_r>
 800cb5e:	bf00      	nop
 800cb60:	20000208 	.word	0x20000208

0800cb64 <_kill_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d07      	ldr	r5, [pc, #28]	; (800cb84 <_kill_r+0x20>)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	4608      	mov	r0, r1
 800cb6e:	4611      	mov	r1, r2
 800cb70:	602b      	str	r3, [r5, #0]
 800cb72:	f7f4 ff1b 	bl	80019ac <_kill>
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	d102      	bne.n	800cb80 <_kill_r+0x1c>
 800cb7a:	682b      	ldr	r3, [r5, #0]
 800cb7c:	b103      	cbz	r3, 800cb80 <_kill_r+0x1c>
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	bd38      	pop	{r3, r4, r5, pc}
 800cb82:	bf00      	nop
 800cb84:	200006d0 	.word	0x200006d0

0800cb88 <_getpid_r>:
 800cb88:	f7f4 bf08 	b.w	800199c <_getpid>

0800cb8c <__sread>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	460c      	mov	r4, r1
 800cb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb94:	f000 f8a8 	bl	800cce8 <_read_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	bfab      	itete	ge
 800cb9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb9e:	89a3      	ldrhlt	r3, [r4, #12]
 800cba0:	181b      	addge	r3, r3, r0
 800cba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cba6:	bfac      	ite	ge
 800cba8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbaa:	81a3      	strhlt	r3, [r4, #12]
 800cbac:	bd10      	pop	{r4, pc}

0800cbae <__swrite>:
 800cbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb2:	461f      	mov	r7, r3
 800cbb4:	898b      	ldrh	r3, [r1, #12]
 800cbb6:	05db      	lsls	r3, r3, #23
 800cbb8:	4605      	mov	r5, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	d505      	bpl.n	800cbcc <__swrite+0x1e>
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f000 f874 	bl	800ccb4 <_lseek_r>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	4628      	mov	r0, r5
 800cbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe2:	f000 b823 	b.w	800cc2c <_write_r>

0800cbe6 <__sseek>:
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	460c      	mov	r4, r1
 800cbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbee:	f000 f861 	bl	800ccb4 <_lseek_r>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	bf15      	itete	ne
 800cbf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc02:	81a3      	strheq	r3, [r4, #12]
 800cc04:	bf18      	it	ne
 800cc06:	81a3      	strhne	r3, [r4, #12]
 800cc08:	bd10      	pop	{r4, pc}

0800cc0a <__sclose>:
 800cc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0e:	f000 b81f 	b.w	800cc50 <_close_r>

0800cc12 <__ascii_wctomb>:
 800cc12:	b149      	cbz	r1, 800cc28 <__ascii_wctomb+0x16>
 800cc14:	2aff      	cmp	r2, #255	; 0xff
 800cc16:	bf85      	ittet	hi
 800cc18:	238a      	movhi	r3, #138	; 0x8a
 800cc1a:	6003      	strhi	r3, [r0, #0]
 800cc1c:	700a      	strbls	r2, [r1, #0]
 800cc1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc22:	bf98      	it	ls
 800cc24:	2001      	movls	r0, #1
 800cc26:	4770      	bx	lr
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4770      	bx	lr

0800cc2c <_write_r>:
 800cc2c:	b538      	push	{r3, r4, r5, lr}
 800cc2e:	4d07      	ldr	r5, [pc, #28]	; (800cc4c <_write_r+0x20>)
 800cc30:	4604      	mov	r4, r0
 800cc32:	4608      	mov	r0, r1
 800cc34:	4611      	mov	r1, r2
 800cc36:	2200      	movs	r2, #0
 800cc38:	602a      	str	r2, [r5, #0]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	f7f4 feed 	bl	8001a1a <_write>
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	d102      	bne.n	800cc4a <_write_r+0x1e>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	b103      	cbz	r3, 800cc4a <_write_r+0x1e>
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	200006d0 	.word	0x200006d0

0800cc50 <_close_r>:
 800cc50:	b538      	push	{r3, r4, r5, lr}
 800cc52:	4d06      	ldr	r5, [pc, #24]	; (800cc6c <_close_r+0x1c>)
 800cc54:	2300      	movs	r3, #0
 800cc56:	4604      	mov	r4, r0
 800cc58:	4608      	mov	r0, r1
 800cc5a:	602b      	str	r3, [r5, #0]
 800cc5c:	f7f4 fef9 	bl	8001a52 <_close>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d102      	bne.n	800cc6a <_close_r+0x1a>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <_close_r+0x1a>
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
 800cc6c:	200006d0 	.word	0x200006d0

0800cc70 <_fstat_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d07      	ldr	r5, [pc, #28]	; (800cc90 <_fstat_r+0x20>)
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	f7f4 fef4 	bl	8001a6a <_fstat>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d102      	bne.n	800cc8c <_fstat_r+0x1c>
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	b103      	cbz	r3, 800cc8c <_fstat_r+0x1c>
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	bd38      	pop	{r3, r4, r5, pc}
 800cc8e:	bf00      	nop
 800cc90:	200006d0 	.word	0x200006d0

0800cc94 <_isatty_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4d06      	ldr	r5, [pc, #24]	; (800ccb0 <_isatty_r+0x1c>)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	4608      	mov	r0, r1
 800cc9e:	602b      	str	r3, [r5, #0]
 800cca0:	f7f4 fef3 	bl	8001a8a <_isatty>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d102      	bne.n	800ccae <_isatty_r+0x1a>
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	b103      	cbz	r3, 800ccae <_isatty_r+0x1a>
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	200006d0 	.word	0x200006d0

0800ccb4 <_lseek_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d07      	ldr	r5, [pc, #28]	; (800ccd4 <_lseek_r+0x20>)
 800ccb8:	4604      	mov	r4, r0
 800ccba:	4608      	mov	r0, r1
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	602a      	str	r2, [r5, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	f7f4 feec 	bl	8001aa0 <_lseek>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_lseek_r+0x1e>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_lseek_r+0x1e>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	200006d0 	.word	0x200006d0

0800ccd8 <_malloc_usable_size_r>:
 800ccd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccdc:	1f18      	subs	r0, r3, #4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbc      	itt	lt
 800cce2:	580b      	ldrlt	r3, [r1, r0]
 800cce4:	18c0      	addlt	r0, r0, r3
 800cce6:	4770      	bx	lr

0800cce8 <_read_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d07      	ldr	r5, [pc, #28]	; (800cd08 <_read_r+0x20>)
 800ccec:	4604      	mov	r4, r0
 800ccee:	4608      	mov	r0, r1
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f7f4 fe72 	bl	80019e0 <_read>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_read_r+0x1e>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_read_r+0x1e>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	200006d0 	.word	0x200006d0

0800cd0c <_init>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	bf00      	nop
 800cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd12:	bc08      	pop	{r3}
 800cd14:	469e      	mov	lr, r3
 800cd16:	4770      	bx	lr

0800cd18 <_fini>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr
