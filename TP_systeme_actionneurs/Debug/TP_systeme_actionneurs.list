
TP_systeme_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c28  08007c28  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c30  08007c30  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08007c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000240  08007e78  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08007e78  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bac  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002991  00000000  00000000  00034e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000388d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002760c  00000000  00000000  000398e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b54  00000000  00000000  00060ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd42a  00000000  00000000  00075a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  00172ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007900 	.word	0x08007900

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	08007900 	.word	0x08007900

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f9cc 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f9c6 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f001 f836 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f001 f828 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f819 	bl	80016e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 ff1f 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 ff36 	bl	800152a <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09e      	sub	sp, #120	; 0x78
 80006d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
	int			speedValue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006e2:	f000 fd9a 	bl	800121a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e6:	f000 f9f7 	bl	8000ad8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ea:	f7ff ff7b 	bl	80005e4 <MX_GPIO_Init>
	MX_TIM1_Init();
 80006ee:	f000 fba9 	bl	8000e44 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80006f2:	f000 fcbd 	bl	8001070 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	48a7      	ldr	r0, [pc, #668]	; (8000998 <main+0x2c8>)
 80006fc:	f001 f972 	bl	80019e4 <HAL_GPIO_WritePin>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000700:	463b      	mov	r3, r7
 8000702:	2224      	movs	r2, #36	; 0x24
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fe34 	bl	8006374 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	2240      	movs	r2, #64	; 0x40
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f005 fe2d 	bl	8006374 <memset>
 800071a:	4ba0      	ldr	r3, [pc, #640]	; (800099c <main+0x2cc>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000720:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000724:	2100      	movs	r1, #0
 8000726:	489e      	ldr	r0, [pc, #632]	; (80009a0 <main+0x2d0>)
 8000728:	f005 fe24 	bl	8006374 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800072c:	2201      	movs	r2, #1
 800072e:	499b      	ldr	r1, [pc, #620]	; (800099c <main+0x2cc>)
 8000730:	489c      	ldr	r0, [pc, #624]	; (80009a4 <main+0x2d4>)
 8000732:	f003 fe61 	bl	80043f8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fde0 	bl	80012fc <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	2266      	movs	r2, #102	; 0x66
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <main+0x2d8>)
 8000744:	4897      	ldr	r0, [pc, #604]	; (80009a4 <main+0x2d4>)
 8000746:	f003 fdc0 	bl	80042ca <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2218      	movs	r2, #24
 8000750:	4996      	ldr	r1, [pc, #600]	; (80009ac <main+0x2dc>)
 8000752:	4894      	ldr	r0, [pc, #592]	; (80009a4 <main+0x2d4>)
 8000754:	f003 fdb9 	bl	80042ca <HAL_UART_Transmit>
		HAL_Delay(1000);
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
		// uartRxReceived is set to 1 when a new character is received on uart 1


		if(uartRxReceived){
 8000758:	4b95      	ldr	r3, [pc, #596]	; (80009b0 <main+0x2e0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d058      	beq.n	8000812 <main+0x142>
			switch(uartRxBuffer[0]){
 8000760:	4b8e      	ldr	r3, [pc, #568]	; (800099c <main+0x2cc>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b0d      	cmp	r3, #13
 8000766:	d002      	beq.n	800076e <main+0x9e>
 8000768:	2b7f      	cmp	r3, #127	; 0x7f
 800076a:	d02f      	beq.n	80007cc <main+0xfc>
 800076c:	e03e      	b.n	80007ec <main+0x11c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2203      	movs	r2, #3
 8000774:	498f      	ldr	r1, [pc, #572]	; (80009b4 <main+0x2e4>)
 8000776:	488b      	ldr	r0, [pc, #556]	; (80009a4 <main+0x2d4>)
 8000778:	f003 fda7 	bl	80042ca <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800077c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000782:	4413      	add	r3, r2
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4989      	ldr	r1, [pc, #548]	; (80009b8 <main+0x2e8>)
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fe16 	bl	80063c4 <strtok>
 8000798:	4603      	mov	r3, r0
 800079a:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 800079c:	e00e      	b.n	80007bc <main+0xec>
					argv[argc++] = token;
 800079e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	673a      	str	r2, [r7, #112]	; 0x70
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	3378      	adds	r3, #120	; 0x78
 80007a8:	443b      	add	r3, r7
 80007aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007ac:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80007b0:	4981      	ldr	r1, [pc, #516]	; (80009b8 <main+0x2e8>)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f005 fe06 	bl	80063c4 <strtok>
 80007b8:	4603      	mov	r3, r0
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1ed      	bne.n	800079e <main+0xce>





				idx_cmd = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80007ca:	e01f      	b.n	800080c <main+0x13c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80007cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	677a      	str	r2, [r7, #116]	; 0x74
 80007d2:	3378      	adds	r3, #120	; 0x78
 80007d4:	443b      	add	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	2201      	movs	r2, #1
 80007e2:	496e      	ldr	r1, [pc, #440]	; (800099c <main+0x2cc>)
 80007e4:	486f      	ldr	r0, [pc, #444]	; (80009a4 <main+0x2d4>)
 80007e6:	f003 fd70 	bl	80042ca <HAL_UART_Transmit>
				break;
 80007ea:	e00f      	b.n	800080c <main+0x13c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80007ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	677a      	str	r2, [r7, #116]	; 0x74
 80007f2:	4a6a      	ldr	r2, [pc, #424]	; (800099c <main+0x2cc>)
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	3378      	adds	r3, #120	; 0x78
 80007f8:	443b      	add	r3, r7
 80007fa:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	2201      	movs	r2, #1
 8000804:	4965      	ldr	r1, [pc, #404]	; (800099c <main+0x2cc>)
 8000806:	4867      	ldr	r0, [pc, #412]	; (80009a4 <main+0x2d4>)
 8000808:	f003 fd5f 	bl	80042ca <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 800080c:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <main+0x2e0>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000814:	2b00      	cmp	r3, #0
 8000816:	d09f      	beq.n	8000758 <main+0x88>

			// Showing commands
			if(strcmp(argv[0],"help")==0){
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	4968      	ldr	r1, [pc, #416]	; (80009bc <main+0x2ec>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcff 	bl	8000220 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10b      	bne.n	8000840 <main+0x170>
				sprintf(uartTxBuffer,commandList);
 8000828:	4965      	ldr	r1, [pc, #404]	; (80009c0 <main+0x2f0>)
 800082a:	485d      	ldr	r0, [pc, #372]	; (80009a0 <main+0x2d0>)
 800082c:	f005 fdaa 	bl	8006384 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(commandList), HAL_MAX_DELAY);
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	22ac      	movs	r2, #172	; 0xac
 8000836:	495a      	ldr	r1, [pc, #360]	; (80009a0 <main+0x2d0>)
 8000838:	485a      	ldr	r0, [pc, #360]	; (80009a4 <main+0x2d4>)
 800083a:	f003 fd46 	bl	80042ca <HAL_UART_Transmit>
 800083e:	e131      	b.n	8000aa4 <main+0x3d4>
			}
			// Showing pinouts
			else if(strcmp(argv[0],"pinout")==0){
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	4960      	ldr	r1, [pc, #384]	; (80009c4 <main+0x2f4>)
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fceb 	bl	8000220 <strcmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10b      	bne.n	8000868 <main+0x198>
				sprintf(uartTxBuffer,pinList);
 8000850:	495d      	ldr	r1, [pc, #372]	; (80009c8 <main+0x2f8>)
 8000852:	4853      	ldr	r0, [pc, #332]	; (80009a0 <main+0x2d0>)
 8000854:	f005 fd96 	bl	8006384 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(pinList), HAL_MAX_DELAY);
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	228a      	movs	r2, #138	; 0x8a
 800085e:	4950      	ldr	r1, [pc, #320]	; (80009a0 <main+0x2d0>)
 8000860:	4850      	ldr	r0, [pc, #320]	; (80009a4 <main+0x2d4>)
 8000862:	f003 fd32 	bl	80042ca <HAL_UART_Transmit>
 8000866:	e11d      	b.n	8000aa4 <main+0x3d4>
			}

			// Switching the LED on or off
			else if(strcmp(argv[0],"set")==0){
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	4958      	ldr	r1, [pc, #352]	; (80009cc <main+0x2fc>)
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fcd7 	bl	8000220 <strcmp>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d12d      	bne.n	80008d4 <main+0x204>
				if(strcmp(argv[1],"PA5")==0){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4955      	ldr	r1, [pc, #340]	; (80009d0 <main+0x300>)
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fccf 	bl	8000220 <strcmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11d      	bne.n	80008c4 <main+0x1f4>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fd44 	bl	8006318 <atoi>
 8000890:	4603      	mov	r3, r0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	2120      	movs	r1, #32
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 f8a2 	bl	80019e4 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fd38 	bl	8006318 <atoi>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4949      	ldr	r1, [pc, #292]	; (80009d4 <main+0x304>)
 80008ae:	483c      	ldr	r0, [pc, #240]	; (80009a0 <main+0x2d0>)
 80008b0:	f005 fd68 	bl	8006384 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	2220      	movs	r2, #32
 80008ba:	4939      	ldr	r1, [pc, #228]	; (80009a0 <main+0x2d0>)
 80008bc:	4839      	ldr	r0, [pc, #228]	; (80009a4 <main+0x2d4>)
 80008be:	f003 fd04 	bl	80042ca <HAL_UART_Transmit>
 80008c2:	e0ef      	b.n	8000aa4 <main+0x3d4>
				}

				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	2214      	movs	r2, #20
 80008ca:	4943      	ldr	r1, [pc, #268]	; (80009d8 <main+0x308>)
 80008cc:	4835      	ldr	r0, [pc, #212]	; (80009a4 <main+0x2d4>)
 80008ce:	f003 fcfc 	bl	80042ca <HAL_UART_Transmit>
 80008d2:	e0e7      	b.n	8000aa4 <main+0x3d4>
				}
			}

			// Starting the motor
			else if(strcmp(argv[0],"start")==0)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4941      	ldr	r1, [pc, #260]	; (80009dc <main+0x30c>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fca1 	bl	8000220 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d12e      	bne.n	8000942 <main+0x272>
			{
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	482b      	ldr	r0, [pc, #172]	; (8000998 <main+0x2c8>)
 80008ea:	f001 f87b 	bl	80019e4 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fd04 	bl	80012fc <HAL_Delay>
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2108      	movs	r1, #8
 80008f8:	4827      	ldr	r0, [pc, #156]	; (8000998 <main+0x2c8>)
 80008fa:	f001 f873 	bl	80019e4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2120      	movs	r1, #32
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 f86d 	bl	80019e4 <HAL_GPIO_WritePin>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <main+0x310>)
 800090e:	f002 f993 	bl	8002c38 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4832      	ldr	r0, [pc, #200]	; (80009e0 <main+0x310>)
 8000916:	f003 f9fb 	bl	8003d10 <HAL_TIMEx_PWMN_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800091a:	2104      	movs	r1, #4
 800091c:	4830      	ldr	r0, [pc, #192]	; (80009e0 <main+0x310>)
 800091e:	f002 f98b 	bl	8002c38 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000922:	2104      	movs	r1, #4
 8000924:	482e      	ldr	r0, [pc, #184]	; (80009e0 <main+0x310>)
 8000926:	f003 f9f3 	bl	8003d10 <HAL_TIMEx_PWMN_Start>

				sprintf(uartTxBuffer,"Power ON\r\n");
 800092a:	492e      	ldr	r1, [pc, #184]	; (80009e4 <main+0x314>)
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <main+0x2d0>)
 800092e:	f005 fd29 	bl	8006384 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	2220      	movs	r2, #32
 8000938:	4919      	ldr	r1, [pc, #100]	; (80009a0 <main+0x2d0>)
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <main+0x2d4>)
 800093c:	f003 fcc5 	bl	80042ca <HAL_UART_Transmit>
 8000940:	e0b0      	b.n	8000aa4 <main+0x3d4>
			}


			// Stopping the motor
			else if(strcmp(argv[0],"stop")==0)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	4928      	ldr	r1, [pc, #160]	; (80009e8 <main+0x318>)
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fc6a 	bl	8000220 <strcmp>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d14e      	bne.n	80009f0 <main+0x320>
			{

				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000952:	2100      	movs	r1, #0
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <main+0x310>)
 8000956:	f002 fa81 	bl	8002e5c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <main+0x310>)
 800095e:	f003 fa99 	bl	8003e94 <HAL_TIMEx_PWMN_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000962:	2104      	movs	r1, #4
 8000964:	481e      	ldr	r0, [pc, #120]	; (80009e0 <main+0x310>)
 8000966:	f002 fa79 	bl	8002e5c <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800096a:	2104      	movs	r1, #4
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <main+0x310>)
 800096e:	f003 fa91 	bl	8003e94 <HAL_TIMEx_PWMN_Stop>

				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f001 f833 	bl	80019e4 <HAL_GPIO_WritePin>

				sprintf(uartTxBuffer,"Power OFF\r\n");
 800097e:	491b      	ldr	r1, [pc, #108]	; (80009ec <main+0x31c>)
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <main+0x2d0>)
 8000982:	f005 fcff 	bl	8006384 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	2220      	movs	r2, #32
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <main+0x2d0>)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <main+0x2d4>)
 8000990:	f003 fc9b 	bl	80042ca <HAL_UART_Transmit>
 8000994:	e086      	b.n	8000aa4 <main+0x3d4>
 8000996:	bf00      	nop
 8000998:	48000800 	.word	0x48000800
 800099c:	20000260 	.word	0x20000260
 80009a0:	20000264 	.word	0x20000264
 80009a4:	200003e0 	.word	0x200003e0
 80009a8:	20000018 	.word	0x20000018
 80009ac:	20000000 	.word	0x20000000
 80009b0:	2000025c 	.word	0x2000025c
 80009b4:	20000080 	.word	0x20000080
 80009b8:	08007918 	.word	0x08007918
 80009bc:	0800791c 	.word	0x0800791c
 80009c0:	20000098 	.word	0x20000098
 80009c4:	08007924 	.word	0x08007924
 80009c8:	20000144 	.word	0x20000144
 80009cc:	0800792c 	.word	0x0800792c
 80009d0:	08007930 	.word	0x08007930
 80009d4:	08007934 	.word	0x08007934
 80009d8:	20000084 	.word	0x20000084
 80009dc:	08007950 	.word	0x08007950
 80009e0:	20000394 	.word	0x20000394
 80009e4:	08007958 	.word	0x08007958
 80009e8:	08007964 	.word	0x08007964
 80009ec:	0800796c 	.word	0x0800796c


			}

			// Setting the speed of the motor
			else if (strcmp(argv[0],"speed=")==0)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	4931      	ldr	r1, [pc, #196]	; (8000ab8 <main+0x3e8>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc13 	bl	8000220 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d13a      	bne.n	8000a76 <main+0x3a6>
			{
				speedValue = 1000*(argv[1][0]-'0')+100*(argv[1][1]-'0')+10*(argv[1][2]-'0')+(argv[1][3]-'0');
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	; 0x30
 8000a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0a:	fb03 f202 	mul.w	r2, r3, r2
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b30      	subs	r3, #48	; 0x30
 8000a16:	2164      	movs	r1, #100	; 0x64
 8000a18:	fb01 f303 	mul.w	r3, r1, r3
 8000a1c:	18d1      	adds	r1, r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3302      	adds	r3, #2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	18ca      	adds	r2, r1, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3303      	adds	r3, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3b30      	subs	r3, #48	; 0x30
 8000a3a:	4413      	add	r3, r2
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64

				if (speedValue > MAX_SPEED_VALUE)
 8000a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a40:	f5b3 5fa6 	cmp.w	r3, #5312	; 0x14c0
 8000a44:	dd02      	ble.n	8000a4c <main+0x37c>
				{
					speedValue = MAX_SPEED_VALUE;
 8000a46:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000a4a:	667b      	str	r3, [r7, #100]	; 0x64
				}

				TIM1->CCR1 = speedValue;
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <main+0x3ec>)
 8000a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a50:	6353      	str	r3, [r2, #52]	; 0x34

				TIM1->CCR2 = MAX_PULSE - speedValue;
 8000a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a54:	f5c3 52a6 	rsb	r2, r3, #5312	; 0x14c0
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <main+0x3ec>)
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38

				sprintf(uartTxBuffer,"Setting the speed to %d\r\n",speedValue);
 8000a5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a5e:	4918      	ldr	r1, [pc, #96]	; (8000ac0 <main+0x3f0>)
 8000a60:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <main+0x3f4>)
 8000a62:	f005 fc8f 	bl	8006384 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	4915      	ldr	r1, [pc, #84]	; (8000ac4 <main+0x3f4>)
 8000a6e:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <main+0x3f8>)
 8000a70:	f003 fc2b 	bl	80042ca <HAL_UART_Transmit>
 8000a74:	e016      	b.n	8000aa4 <main+0x3d4>


			}


			else if(strcmp(argv[0],"get")==0)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	4914      	ldr	r1, [pc, #80]	; (8000acc <main+0x3fc>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbd0 	bl	8000220 <strcmp>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d107      	bne.n	8000a96 <main+0x3c6>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2214      	movs	r2, #20
 8000a8c:	4910      	ldr	r1, [pc, #64]	; (8000ad0 <main+0x400>)
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <main+0x3f8>)
 8000a90:	f003 fc1b 	bl	80042ca <HAL_UART_Transmit>
 8000a94:	e006      	b.n	8000aa4 <main+0x3d4>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <main+0x400>)
 8000a9e:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <main+0x3f8>)
 8000aa0:	f003 fc13 	bl	80042ca <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2218      	movs	r2, #24
 8000aaa:	490a      	ldr	r1, [pc, #40]	; (8000ad4 <main+0x404>)
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <main+0x3f8>)
 8000aae:	f003 fc0c 	bl	80042ca <HAL_UART_Transmit>
			newCmdReady = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8000ab6:	e64f      	b.n	8000758 <main+0x88>
 8000ab8:	08007978 	.word	0x08007978
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	08007980 	.word	0x08007980
 8000ac4:	20000264 	.word	0x20000264
 8000ac8:	200003e0 	.word	0x200003e0
 8000acc:	0800799c 	.word	0x0800799c
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	2238      	movs	r2, #56	; 0x38
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fc44 	bl	8006374 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 ffae 	bl	8001a5c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b1a:	2355      	movs	r3, #85	; 0x55
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f848 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000b3a:	f000 f82f 	bl	8000b9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2303      	movs	r3, #3
 8000b44:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2104      	movs	r1, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fb4c 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000b62:	f000 f81b 	bl	8000b9c <Error_Handler>
	}
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_UART_RxCpltCallback+0x20>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4904      	ldr	r1, [pc, #16]	; (8000b94 <HAL_UART_RxCpltCallback+0x24>)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_RxCpltCallback+0x28>)
 8000b84:	f003 fc38 	bl	80043f8 <HAL_UART_Receive_IT>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000025c 	.word	0x2000025c
 8000b94:	20000260 	.word	0x20000260
 8000b98:	200003e0 	.word	0x200003e0

08000b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bde:	f000 ffe1 	bl	8001ba4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000c3c:	f000 fb40 	bl	80012c0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART2_IRQHandler+0x10>)
 8000c4a:	f003 fc2b 	bl	80044a4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200003e0 	.word	0x200003e0

08000c58 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2108      	movs	r1, #8
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <EXTI15_10_IRQHandler+0x38>)
 8000c62:	f000 febf 	bl	80019e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fb48 	bl	80012fc <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <EXTI15_10_IRQHandler+0x38>)
 8000c72:	f000 feb7 	bl	80019e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 feb1 	bl	80019e4 <HAL_GPIO_WritePin>

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c86:	f000 fec5 	bl	8001a14 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	48000800 	.word	0x48000800

08000c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cae:	f005 fb37 	bl	8006320 <__errno>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2216      	movs	r2, #22
 8000cb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe7 	bl	8000ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd6:	e7fe      	b.n	8000cd6 <_exit+0x12>

08000cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
	}

return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f005 fa9c 	bl	8006320 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20020000 	.word	0x20020000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000390 	.word	0x20000390
 8000e1c:	20000488 	.word	0x20000488

08000e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09c      	sub	sp, #112	; 0x70
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 fa78 	bl	8006374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e84:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000e86:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <MX_TIM1_Init+0x178>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000e92:	2220      	movs	r2, #32
 8000e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8000e96:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000e98:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000e9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea4:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb0:	4841      	ldr	r0, [pc, #260]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000eb2:	f001 fe09 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ebc:	f7ff fe6e 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ec6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eca:	4619      	mov	r1, r3
 8000ecc:	483a      	ldr	r0, [pc, #232]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000ece:	f002 f975 	bl	80031bc <HAL_TIM_ConfigClockSource>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ed8:	f7ff fe60 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000edc:	4836      	ldr	r0, [pc, #216]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000ede:	f001 fe4a 	bl	8002b76 <HAL_TIM_PWM_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ee8:	f7ff fe58 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000efc:	4619      	mov	r1, r3
 8000efe:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000f00:	f003 f826 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f0a:	f7ff fe47 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8000f12:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000f36:	f002 f82d 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000f40:	f7ff fe2c 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000f4e:	f002 f821 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000f58:	f7ff fe20 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8000f68:	23cb      	movs	r3, #203	; 0xcb
 8000f6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000f90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000f9c:	f003 f86e 	bl	800407c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8000fa6:	f7ff fdf9 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM1_Init+0x174>)
 8000fac:	f000 f828 	bl	8001000 <HAL_TIM_MspPostInit>

}
 8000fb0:	bf00      	nop
 8000fb2:	3770      	adds	r7, #112	; 0x70
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000394 	.word	0x20000394
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40012c00 	.word	0x40012c00
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_TIM_MspPostInit+0x68>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d11d      	bne.n	800105e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_TIM_MspPostInit+0x6c>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_TIM_MspPostInit+0x6c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_TIM_MspPostInit+0x6c>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800103a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800103e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800104c:	2306      	movs	r3, #6
 800104e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 fb41 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012c00 	.word	0x40012c00
 800106c:	40021000 	.word	0x40021000

08001070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_USART2_UART_Init+0x90>)
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <MX_USART2_UART_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_USART2_UART_Init+0x90>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_USART2_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_USART2_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_USART2_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_USART2_UART_Init+0x90>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_USART2_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010ba:	f003 f8b6 	bl	800422a <HAL_UART_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010c4:	f7ff fd6a 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010cc:	f005 f859 	bl	8006182 <HAL_UARTEx_SetTxFifoThreshold>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010d6:	f7ff fd61 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010de:	f005 f88e 	bl	80061fe <HAL_UARTEx_SetRxFifoThreshold>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f7ff fd58 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_USART2_UART_Init+0x90>)
 80010ee:	f005 f80f 	bl	8006110 <HAL_UARTEx_DisableFifoMode>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f7ff fd50 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200003e0 	.word	0x200003e0
 8001104:	40004400 	.word	0x40004400

08001108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09e      	sub	sp, #120	; 0x78
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2254      	movs	r2, #84	; 0x54
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 f923 	bl	8006374 <memset>
  if(uartHandle->Instance==USART2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_UART_MspInit+0xb8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d13e      	bne.n	80011b6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001138:	2302      	movs	r3, #2
 800113a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fa71 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001150:	f7ff fd24 	bl	8000b9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	6593      	str	r3, [r2, #88]	; 0x58
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_UART_MspInit+0xbc>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001184:	230c      	movs	r3, #12
 8001186:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001194:	2307      	movs	r3, #7
 8001196:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f000 fa9d 	bl	80016e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f000 f9a3 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b0:	2026      	movs	r0, #38	; 0x26
 80011b2:	f000 f9ba 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	3778      	adds	r7, #120	; 0x78
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40021000 	.word	0x40021000

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011f2:	f7ff fe15 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f005 f899 	bl	800632c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff fa69 	bl	80006d0 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   r0, =_estack
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800120c:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 8001210:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001214:	20000484 	.word	0x20000484

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>

0800121a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f95b 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f80e 	bl	800124c <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e001      	b.n	8001240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123c:	f7ff fcb4 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001240:	79fb      	ldrb	r3, [r7, #7]

}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d022      	beq.n	80012a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_InitTick+0x6c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_InitTick+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f966 	bl	8001546 <HAL_SYSTICK_Config>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d809      	bhi.n	800129a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001286:	2200      	movs	r2, #0
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	f000 f932 	bl	80014f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_InitTick+0x70>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e007      	b.n	80012aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e004      	b.n	80012aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001d8 	.word	0x200001d8
 80012b8:	200001d0 	.word	0x200001d0
 80012bc:	200001d4 	.word	0x200001d4

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_IncTick+0x1c>)
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000470 	.word	0x20000470
 80012e0:	200001d8 	.word	0x200001d8

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000470 	.word	0x20000470

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d004      	beq.n	8001320 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_Delay+0x40>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001320:	bf00      	nop
 8001322:	f7ff ffdf 	bl	80012e4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	429a      	cmp	r2, r3
 8001330:	d8f7      	bhi.n	8001322 <HAL_Delay+0x26>
  {
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001d8 	.word	0x200001d8

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff40 	bl	8001388 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff33 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa4 	bl	800149c <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d005      	beq.n	8001582 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e037      	b.n	80015f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 021f 	and.w	r2, r3, #31
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d00d      	beq.n	8001644 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2204      	movs	r2, #4
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e047      	b.n	80016d4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001690:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
    }
  }
  return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ee:	e15a      	b.n	80019a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 814c 	beq.w	80019a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80a6 	beq.w	80019a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6613      	str	r3, [r2, #96]	; 0x60
 8001860:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186c:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d01f      	beq.n	80018d8 <HAL_GPIO_Init+0x1f8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4c      	ldr	r2, [pc, #304]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d019      	beq.n	80018d4 <HAL_GPIO_Init+0x1f4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4b      	ldr	r2, [pc, #300]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_Init+0x1f0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a49      	ldr	r2, [pc, #292]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a48      	ldr	r2, [pc, #288]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018c0:	2305      	movs	r3, #5
 80018c2:	e00a      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018c4:	2306      	movs	r3, #6
 80018c6:	e008      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1fa>
 80018d8:	2300      	movs	r3, #0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ea:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f ae9d 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	48001400 	.word	0x48001400
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f806 	bl	8001a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d141      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d131      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a78:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7e:	4a46      	ldr	r2, [pc, #280]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a90:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2232      	movs	r2, #50	; 0x32
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a3f      	ldr	r2, [pc, #252]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	0c9b      	lsrs	r3, r3, #18
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aae:	e002      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d102      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f2      	bne.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d158      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e057      	b.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aec:	e04d      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d141      	bne.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d131      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0a:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2232      	movs	r2, #50	; 0x32
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3a:	e002      	b.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d102      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f2      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d112      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e011      	b.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b78:	e007      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	200001d0 	.word	0x200001d0
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb2:	6093      	str	r3, [r2, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e306      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be2:	4b97      	ldr	r3, [pc, #604]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bec:	4b94      	ldr	r3, [pc, #592]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3e>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e2e1      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a84      	ldr	r2, [pc, #528]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7e      	ldr	r2, [pc, #504]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7b      	ldr	r2, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a74      	ldr	r2, [pc, #464]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb32 	bl	80012e4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb2e 	bl	80012e4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e2a6      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb1e 	bl	80012e4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb1a 	bl	80012e4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e292      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d075      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_OscConfig+0x136>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_OscConfig+0x13c>
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d11f      	bne.n	8001d40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_OscConfig+0x154>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e265      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	4946      	ldr	r1, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d2c:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fa8b 	bl	800124c <HAL_InitTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d043      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e251      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fac6 	bl	80012e4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fac2 	bl	80012e4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e23a      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	061b      	lsls	r3, r3, #24
 8001d88:	492d      	ldr	r1, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e01a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff faa2 	bl	80012e4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa9e 	bl	80012e4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e216      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1e0>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d041      	beq.n	8001e56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa7b 	bl	80012e4 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fa77 	bl	80012e4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1ef      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ef      	beq.n	8001df2 <HAL_RCC_OscConfig+0x22e>
 8001e12:	e020      	b.n	8001e56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa5e 	bl	80012e4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2a:	e00d      	b.n	8001e48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fa5a 	bl	80012e4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d906      	bls.n	8001e48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1d2      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	200001d4 	.word	0x200001d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ea      	bne.n	8001e2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80a6 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e68:	4b84      	ldr	r3, [pc, #528]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2b4>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x2b6>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9a:	4b79      	ldr	r3, [pc, #484]	; (8002080 <HAL_RCC_OscConfig+0x4bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x4bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x4bc>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fa17 	bl	80012e4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fa13 	bl	80012e4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e18b      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x4bc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x32e>
 8001ee0:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	4a65      	ldr	r2, [pc, #404]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef0:	e024      	b.n	8001f3c <HAL_RCC_OscConfig+0x378>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d110      	bne.n	8001f1c <HAL_RCC_OscConfig+0x358>
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a5e      	ldr	r2, [pc, #376]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x378>
 8001f1c:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a56      	ldr	r2, [pc, #344]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d016      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f9ce 	bl	80012e4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f9ca 	bl	80012e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e140      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ed      	beq.n	8001f4c <HAL_RCC_OscConfig+0x388>
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f9b7 	bl	80012e4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff f9b3 	bl	80012e4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e129      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ed      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d03c      	beq.n	8002036 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f986 	bl	80012e4 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fdc:	f7ff f982 	bl	80012e4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0fa      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ef      	beq.n	8001fdc <HAL_RCC_OscConfig+0x418>
 8001ffc:	e01b      	b.n	8002036 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8002000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7ff f969 	bl	80012e4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002016:	f7ff f965 	bl	80012e4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0dd      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ef      	bne.n	8002016 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80d1 	beq.w	80021e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b0c      	cmp	r3, #12
 800204a:	f000 808b 	beq.w	8002164 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d15e      	bne.n	8002114 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff f93f 	bl	80012e4 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	e00c      	b.n	8002084 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff f93b 	bl	80012e4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d905      	bls.n	8002084 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0b3      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ec      	bne.n	800206a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x62c>)
 8002096:	4013      	ands	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6a11      	ldr	r1, [r2, #32]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a0:	3a01      	subs	r2, #1
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020aa:	0212      	lsls	r2, r2, #8
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020b2:	0852      	lsrs	r2, r2, #1
 80020b4:	3a01      	subs	r2, #1
 80020b6:	0552      	lsls	r2, r2, #21
 80020b8:	4311      	orrs	r1, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020be:	0852      	lsrs	r2, r2, #1
 80020c0:	3a01      	subs	r2, #1
 80020c2:	0652      	lsls	r2, r2, #25
 80020c4:	4311      	orrs	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020ca:	06d2      	lsls	r2, r2, #27
 80020cc:	430a      	orrs	r2, r1
 80020ce:	4947      	ldr	r1, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b45      	ldr	r3, [pc, #276]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a41      	ldr	r2, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f8fa 	bl	80012e4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff f8f6 	bl	80012e4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e06e      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x530>
 8002112:	e066      	b.n	80021e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a2e      	ldr	r2, [pc, #184]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002132:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f8d2 	bl	80012e4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f8ce 	bl	80012e4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e046      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x580>
 8002162:	e03e      	b.n	80021e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e039      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_OscConfig+0x628>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d12c      	bne.n	80021de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	3b01      	subs	r3, #1
 8002190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d123      	bne.n	80021de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11b      	bne.n	80021de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d113      	bne.n	80021de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d109      	bne.n	80021de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	019f800c 	.word	0x019f800c

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e11e      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b91      	ldr	r3, [pc, #580]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	498c      	ldr	r1, [pc, #560]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e106      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d073      	beq.n	8002330 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d129      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002250:	4b81      	ldr	r3, [pc, #516]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0f4      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002260:	f000 f99e 	bl	80025a0 <RCC_GetSysClockFreqFromPLLSource>
 8002264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a7c      	ldr	r2, [pc, #496]	; (800245c <HAL_RCC_ClockConfig+0x268>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d93f      	bls.n	80022ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d033      	beq.n	80022ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d12f      	bne.n	80022ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002296:	4a70      	ldr	r2, [pc, #448]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e024      	b.n	80022ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0c6      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0be      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022cc:	f000 f8ce 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4a61      	ldr	r2, [pc, #388]	; (800245c <HAL_RCC_ClockConfig+0x268>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d909      	bls.n	80022ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e2:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4957      	ldr	r1, [pc, #348]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002300:	f7fe fff0 	bl	80012e4 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe ffec 	bl	80012e4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e095      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a42      	ldr	r2, [pc, #264]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800234e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002352:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002368:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800236a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800236e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4936      	ldr	r1, [pc, #216]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
 8002382:	e008      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d105      	bne.n	8002396 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002394:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d21d      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a4:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 020f 	bic.w	r2, r3, #15
 80023ac:	4929      	ldr	r1, [pc, #164]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023b4:	f7fe ff96 	bl	80012e4 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe ff92 	bl	80012e4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e03b      	b.n	800244a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1ed      	bne.n	80023bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4917      	ldr	r1, [pc, #92]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490f      	ldr	r1, [pc, #60]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800241e:	f000 f825 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490c      	ldr	r1, [pc, #48]	; (8002460 <HAL_RCC_ClockConfig+0x26c>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe ff02 	bl	800124c <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000
 8002458:	40021000 	.word	0x40021000
 800245c:	04c4b400 	.word	0x04c4b400
 8002460:	080079a0 	.word	0x080079a0
 8002464:	200001d0 	.word	0x200001d0
 8002468:	200001d4 	.word	0x200001d4

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d102      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e047      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e03e      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d136      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3301      	adds	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d10c      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024c0:	4a1a      	ldr	r2, [pc, #104]	; (800252c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ca:	68d2      	ldr	r2, [r2, #12]
 80024cc:	0a12      	lsrs	r2, r2, #8
 80024ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
      break;
 80024d8:	e00c      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	0a12      	lsrs	r2, r2, #8
 80024e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0e5b      	lsrs	r3, r3, #25
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e001      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002514:	693b      	ldr	r3, [r7, #16]
}
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	00f42400 	.word	0x00f42400
 800252c:	016e3600 	.word	0x016e3600

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_RCC_GetHCLKFreq+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	200001d0 	.word	0x200001d0

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800254c:	f7ff fff0 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	080079b0 	.word	0x080079b0

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002578:	f7ff ffda 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	080079b0 	.word	0x080079b0

080025a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d10c      	bne.n	80025de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ce:	68d2      	ldr	r2, [r2, #12]
 80025d0:	0a12      	lsrs	r2, r2, #8
 80025d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
    break;
 80025dc:	e00c      	b.n	80025f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	0a12      	lsrs	r2, r2, #8
 80025ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    break;
 80025f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0e5b      	lsrs	r3, r3, #25
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002612:	687b      	ldr	r3, [r7, #4]
}
 8002614:	4618      	mov	r0, r3
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	016e3600 	.word	0x016e3600
 8002628:	00f42400 	.word	0x00f42400

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002634:	2300      	movs	r3, #0
 8002636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002638:	2300      	movs	r3, #0
 800263a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8098 	beq.w	800277a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002676:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002682:	f7fe fe2f 	bl	80012e4 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002688:	e009      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe fe2b 	bl	80012e4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d902      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	74fb      	strb	r3, [r7, #19]
        break;
 800269c:	e005      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ef      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d159      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01e      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d019      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fdeb 	bl	80012e4 <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002710:	e00b      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fde7 	bl	80012e4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d902      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	74fb      	strb	r3, [r7, #19]
            break;
 8002728:	e006      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ec      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002754:	e008      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	74bb      	strb	r3, [r7, #18]
 800275a:	e005      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800275c:	40021000 	.word	0x40021000
 8002760:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002768:	7c7b      	ldrb	r3, [r7, #17]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4ba7      	ldr	r3, [pc, #668]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	4aa6      	ldr	r2, [pc, #664]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002786:	4ba1      	ldr	r3, [pc, #644]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f023 0203 	bic.w	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	499d      	ldr	r1, [pc, #628]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f023 020c 	bic.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4995      	ldr	r1, [pc, #596]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ca:	4b90      	ldr	r3, [pc, #576]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	498c      	ldr	r1, [pc, #560]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ec:	4b87      	ldr	r3, [pc, #540]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4984      	ldr	r1, [pc, #528]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	497b      	ldr	r1, [pc, #492]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002830:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4973      	ldr	r1, [pc, #460]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4b6e      	ldr	r3, [pc, #440]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	496a      	ldr	r1, [pc, #424]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002874:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4962      	ldr	r1, [pc, #392]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	4959      	ldr	r1, [pc, #356]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b8:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	4951      	ldr	r1, [pc, #324]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	4948      	ldr	r1, [pc, #288]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4940      	ldr	r1, [pc, #256]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	4932      	ldr	r1, [pc, #200]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	4924      	ldr	r1, [pc, #144]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	4916      	ldr	r1, [pc, #88]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d019      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4926      	ldr	r1, [pc, #152]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	4918      	ldr	r1, [pc, #96]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ab8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e049      	b.n	8002b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fa66 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fc6e 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e049      	b.n	8002c1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f841 	bl	8002c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 fc17 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x24>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e03c      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d109      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x3e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e02f      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x58>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e022      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start+0x72>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e015      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0x8c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e008      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0a6      	b.n	8002e2c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0xb6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	e023      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIM_PWM_Start+0xc6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	e01b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0xe6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xf6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 ffc0 	bl	8003cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <HAL_TIM_PWM_Start+0x1fc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_TIM_PWM_Start+0x148>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a39      	ldr	r2, [pc, #228]	; (8002e38 <HAL_TIM_PWM_Start+0x200>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_TIM_PWM_Start+0x148>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_TIM_PWM_Start+0x204>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_PWM_Start+0x148>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a36      	ldr	r2, [pc, #216]	; (8002e40 <HAL_TIM_PWM_Start+0x208>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_PWM_Start+0x148>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a34      	ldr	r2, [pc, #208]	; (8002e44 <HAL_TIM_PWM_Start+0x20c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_PWM_Start+0x148>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a33      	ldr	r2, [pc, #204]	; (8002e48 <HAL_TIM_PWM_Start+0x210>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_PWM_Start+0x14c>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_TIM_PWM_Start+0x14e>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <HAL_TIM_PWM_Start+0x1fc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d01d      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_TIM_PWM_Start+0x214>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_TIM_PWM_Start+0x218>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_TIM_PWM_Start+0x21c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <HAL_TIM_PWM_Start+0x200>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_TIM_PWM_Start+0x204>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_TIM_PWM_Start+0x1b2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_TIM_PWM_Start+0x210>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d115      	bne.n	8002e16 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_TIM_PWM_Start+0x220>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d015      	beq.n	8002e28 <HAL_TIM_PWM_Start+0x1f0>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d011      	beq.n	8002e28 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	e008      	b.n	8002e28 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e000      	b.n	8002e2a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800
 8002e48:	40015000 	.word	0x40015000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	00010007 	.word	0x00010007

08002e5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 ff28 	bl	8003cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <HAL_TIM_PWM_Stop+0x120>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_TIM_PWM_Stop+0x54>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_TIM_PWM_Stop+0x124>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_TIM_PWM_Stop+0x54>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <HAL_TIM_PWM_Stop+0x128>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_TIM_PWM_Stop+0x54>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_TIM_PWM_Stop+0x12c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_TIM_PWM_Stop+0x54>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_TIM_PWM_Stop+0x130>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_PWM_Stop+0x54>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a39      	ldr	r2, [pc, #228]	; (8002f90 <HAL_TIM_PWM_Stop+0x134>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_PWM_Stop+0x58>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_TIM_PWM_Stop+0x5a>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d017      	beq.n	8002eea <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x8e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	f244 4344 	movw	r3, #17476	; 0x4444
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x8e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0xbe>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f244 4344 	movw	r3, #17476	; 0x4444
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0xbe>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0xce>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	e023      	b.n	8002f72 <HAL_TIM_PWM_Stop+0x116>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Stop+0xde>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	e01b      	b.n	8002f72 <HAL_TIM_PWM_Stop+0x116>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0xee>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f48:	e013      	b.n	8002f72 <HAL_TIM_PWM_Stop+0x116>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Stop+0xfe>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f58:	e00b      	b.n	8002f72 <HAL_TIM_PWM_Stop+0x116>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Stop+0x10e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f68:	e003      	b.n	8002f72 <HAL_TIM_PWM_Stop+0x116>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40013400 	.word	0x40013400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800
 8002f90:	40015000 	.word	0x40015000

08002f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0ff      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b14      	cmp	r3, #20
 8002fbe:	f200 80f0 	bhi.w	80031a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fc2:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	080031a3 	.word	0x080031a3
 8002fd0:	080031a3 	.word	0x080031a3
 8002fd4:	080031a3 	.word	0x080031a3
 8002fd8:	0800305d 	.word	0x0800305d
 8002fdc:	080031a3 	.word	0x080031a3
 8002fe0:	080031a3 	.word	0x080031a3
 8002fe4:	080031a3 	.word	0x080031a3
 8002fe8:	0800309f 	.word	0x0800309f
 8002fec:	080031a3 	.word	0x080031a3
 8002ff0:	080031a3 	.word	0x080031a3
 8002ff4:	080031a3 	.word	0x080031a3
 8002ff8:	080030df 	.word	0x080030df
 8002ffc:	080031a3 	.word	0x080031a3
 8003000:	080031a3 	.word	0x080031a3
 8003004:	080031a3 	.word	0x080031a3
 8003008:	08003121 	.word	0x08003121
 800300c:	080031a3 	.word	0x080031a3
 8003010:	080031a3 	.word	0x080031a3
 8003014:	080031a3 	.word	0x080031a3
 8003018:	08003161 	.word	0x08003161
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa88 	bl	8003538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e0a5      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fb02 	bl	800366c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e084      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fb75 	bl	8003794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      break;
 80030dc:	e064      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fbe7 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
      break;
 800311e:	e043      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fc5a 	bl	80039e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800315e:	e023      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fca4 	bl	8003ab4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031a0:	e002      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
      break;
 80031a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_ConfigClockSource+0x1c>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0f6      	b.n	80033c6 <HAL_TIM_ConfigClockSource+0x20a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80031f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6f      	ldr	r2, [pc, #444]	; (80033d0 <HAL_TIM_ConfigClockSource+0x214>)
 8003212:	4293      	cmp	r3, r2
 8003214:	f000 80c1 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003218:	4a6d      	ldr	r2, [pc, #436]	; (80033d0 <HAL_TIM_ConfigClockSource+0x214>)
 800321a:	4293      	cmp	r3, r2
 800321c:	f200 80c6 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003220:	4a6c      	ldr	r2, [pc, #432]	; (80033d4 <HAL_TIM_ConfigClockSource+0x218>)
 8003222:	4293      	cmp	r3, r2
 8003224:	f000 80b9 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003228:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <HAL_TIM_ConfigClockSource+0x218>)
 800322a:	4293      	cmp	r3, r2
 800322c:	f200 80be 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003230:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_TIM_ConfigClockSource+0x21c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	f000 80b1 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003238:	4a67      	ldr	r2, [pc, #412]	; (80033d8 <HAL_TIM_ConfigClockSource+0x21c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f200 80b6 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003240:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_TIM_ConfigClockSource+0x220>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f000 80a9 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003248:	4a64      	ldr	r2, [pc, #400]	; (80033dc <HAL_TIM_ConfigClockSource+0x220>)
 800324a:	4293      	cmp	r3, r2
 800324c:	f200 80ae 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003250:	4a63      	ldr	r2, [pc, #396]	; (80033e0 <HAL_TIM_ConfigClockSource+0x224>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f000 80a1 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_TIM_ConfigClockSource+0x224>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f200 80a6 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003260:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <HAL_TIM_ConfigClockSource+0x228>)
 8003262:	4293      	cmp	r3, r2
 8003264:	f000 8099 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003268:	4a5e      	ldr	r2, [pc, #376]	; (80033e4 <HAL_TIM_ConfigClockSource+0x228>)
 800326a:	4293      	cmp	r3, r2
 800326c:	f200 809e 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003270:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003274:	f000 8091 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003278:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800327c:	f200 8096 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003284:	f000 8089 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x1de>
 8003288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328c:	f200 808e 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	d03e      	beq.n	8003314 <HAL_TIM_ConfigClockSource+0x158>
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329a:	f200 8087 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	f000 8086 	beq.w	80033b2 <HAL_TIM_ConfigClockSource+0x1f6>
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032aa:	d87f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d01a      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x12a>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d87b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d050      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x19e>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d877      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d03c      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x17e>
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d873      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d058      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x1be>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d86f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d064      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x1de>
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d86b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d060      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x1de>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d867      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x1de>
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d05a      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x1de>
 80032e4:	e062      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f000 fcc5 	bl	8003c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	609a      	str	r2, [r3, #8]
      break;
 8003312:	e04f      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f000 fcae 	bl	8003c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003336:	609a      	str	r2, [r3, #8]
      break;
 8003338:	e03c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	461a      	mov	r2, r3
 8003348:	f000 fc20 	bl	8003b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2150      	movs	r1, #80	; 0x50
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fc79 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003358:	e02c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f000 fc3f 	bl	8003bea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2160      	movs	r1, #96	; 0x60
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fc69 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003378:	e01c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fc00 	bl	8003b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc59 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003398:	e00c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f000 fc50 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 80033aa:	e003      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80033b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	00100070 	.word	0x00100070
 80033d4:	00100060 	.word	0x00100060
 80033d8:	00100050 	.word	0x00100050
 80033dc:	00100040 	.word	0x00100040
 80033e0:	00100030 	.word	0x00100030
 80033e4:	00100020 	.word	0x00100020

080033e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a46      	ldr	r2, [pc, #280]	; (8003514 <TIM_Base_SetConfig+0x12c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d017      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d013      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a43      	ldr	r2, [pc, #268]	; (8003518 <TIM_Base_SetConfig+0x130>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a42      	ldr	r2, [pc, #264]	; (800351c <TIM_Base_SetConfig+0x134>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00b      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a41      	ldr	r2, [pc, #260]	; (8003520 <TIM_Base_SetConfig+0x138>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a40      	ldr	r2, [pc, #256]	; (8003524 <TIM_Base_SetConfig+0x13c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_Base_SetConfig+0x48>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3f      	ldr	r2, [pc, #252]	; (8003528 <TIM_Base_SetConfig+0x140>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d108      	bne.n	8003442 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a33      	ldr	r2, [pc, #204]	; (8003514 <TIM_Base_SetConfig+0x12c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d023      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d01f      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a30      	ldr	r2, [pc, #192]	; (8003518 <TIM_Base_SetConfig+0x130>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01b      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <TIM_Base_SetConfig+0x134>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d017      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <TIM_Base_SetConfig+0x138>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <TIM_Base_SetConfig+0x13c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <TIM_Base_SetConfig+0x144>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <TIM_Base_SetConfig+0x148>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <TIM_Base_SetConfig+0x14c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0xaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <TIM_Base_SetConfig+0x140>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <TIM_Base_SetConfig+0x12c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x110>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a14      	ldr	r2, [pc, #80]	; (8003524 <TIM_Base_SetConfig+0x13c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x110>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a14      	ldr	r2, [pc, #80]	; (800352c <TIM_Base_SetConfig+0x144>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x110>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <TIM_Base_SetConfig+0x148>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x110>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <TIM_Base_SetConfig+0x14c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x110>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <TIM_Base_SetConfig+0x140>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40013400 	.word	0x40013400
 8003528:	40015000 	.word	0x40015000
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800

08003538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a30      	ldr	r2, [pc, #192]	; (8003654 <TIM_OC1_SetConfig+0x11c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_OC1_SetConfig+0x88>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <TIM_OC1_SetConfig+0x120>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_OC1_SetConfig+0x88>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a2e      	ldr	r2, [pc, #184]	; (800365c <TIM_OC1_SetConfig+0x124>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_OC1_SetConfig+0x88>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a2d      	ldr	r2, [pc, #180]	; (8003660 <TIM_OC1_SetConfig+0x128>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_OC1_SetConfig+0x88>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <TIM_OC1_SetConfig+0x12c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_OC1_SetConfig+0x88>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <TIM_OC1_SetConfig+0x130>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10c      	bne.n	80035da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0308 	bic.w	r3, r3, #8
 80035c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <TIM_OC1_SetConfig+0x11c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_OC1_SetConfig+0xd2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <TIM_OC1_SetConfig+0x120>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_OC1_SetConfig+0xd2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <TIM_OC1_SetConfig+0x124>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_OC1_SetConfig+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <TIM_OC1_SetConfig+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_OC1_SetConfig+0xd2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <TIM_OC1_SetConfig+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_OC1_SetConfig+0xd2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <TIM_OC1_SetConfig+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d111      	bne.n	800362e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40013400 	.word	0x40013400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40015000 	.word	0x40015000

0800366c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0210 	bic.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0320 	bic.w	r3, r3, #32
 80036ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	; (800377c <TIM_OC2_SetConfig+0x110>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_OC2_SetConfig+0x74>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <TIM_OC2_SetConfig+0x114>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_OC2_SetConfig+0x74>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <TIM_OC2_SetConfig+0x118>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10d      	bne.n	80036fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <TIM_OC2_SetConfig+0x110>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_OC2_SetConfig+0xc0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <TIM_OC2_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <TIM_OC2_SetConfig+0xc0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <TIM_OC2_SetConfig+0x11c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_OC2_SetConfig+0xc0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <TIM_OC2_SetConfig+0x120>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_OC2_SetConfig+0xc0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <TIM_OC2_SetConfig+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC2_SetConfig+0xc0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <TIM_OC2_SetConfig+0x118>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d113      	bne.n	8003754 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40015000 	.word	0x40015000
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <TIM_OC3_SetConfig+0x10c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_OC3_SetConfig+0x72>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <TIM_OC3_SetConfig+0x110>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_OC3_SetConfig+0x72>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <TIM_OC3_SetConfig+0x114>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <TIM_OC3_SetConfig+0x10c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <TIM_OC3_SetConfig+0xbe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <TIM_OC3_SetConfig+0x110>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00f      	beq.n	8003852 <TIM_OC3_SetConfig+0xbe>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <TIM_OC3_SetConfig+0x118>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC3_SetConfig+0xbe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <TIM_OC3_SetConfig+0x11c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC3_SetConfig+0xbe>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <TIM_OC3_SetConfig+0x120>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC3_SetConfig+0xbe>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <TIM_OC3_SetConfig+0x114>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d113      	bne.n	800387a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	621a      	str	r2, [r3, #32]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	40013400 	.word	0x40013400
 80038a8:	40015000 	.word	0x40015000
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <TIM_OC4_SetConfig+0x110>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC4_SetConfig+0x74>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <TIM_OC4_SetConfig+0x114>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC4_SetConfig+0x74>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <TIM_OC4_SetConfig+0x118>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10d      	bne.n	8003948 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	031b      	lsls	r3, r3, #12
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <TIM_OC4_SetConfig+0x110>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <TIM_OC4_SetConfig+0xc0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <TIM_OC4_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <TIM_OC4_SetConfig+0xc0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <TIM_OC4_SetConfig+0x11c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_OC4_SetConfig+0xc0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <TIM_OC4_SetConfig+0x120>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_OC4_SetConfig+0xc0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <TIM_OC4_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_OC4_SetConfig+0xc0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <TIM_OC4_SetConfig+0x118>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d113      	bne.n	80039a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003986:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40015000 	.word	0x40015000
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_OC5_SetConfig+0xbc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <TIM_OC5_SetConfig+0x82>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <TIM_OC5_SetConfig+0xc0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_OC5_SetConfig+0x82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <TIM_OC5_SetConfig+0xc4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_OC5_SetConfig+0x82>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <TIM_OC5_SetConfig+0xc8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_OC5_SetConfig+0x82>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <TIM_OC5_SetConfig+0xcc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_OC5_SetConfig+0x82>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <TIM_OC5_SetConfig+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d109      	bne.n	8003a76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800
 8003ab0:	40015000 	.word	0x40015000

08003ab4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	051b      	lsls	r3, r3, #20
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <TIM_OC6_SetConfig+0xc0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <TIM_OC6_SetConfig+0x84>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_OC6_SetConfig+0xc4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00f      	beq.n	8003b38 <TIM_OC6_SetConfig+0x84>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_OC6_SetConfig+0xc8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_OC6_SetConfig+0x84>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <TIM_OC6_SetConfig+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_OC6_SetConfig+0x84>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <TIM_OC6_SetConfig+0xd0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC6_SetConfig+0x84>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <TIM_OC6_SetConfig+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d109      	bne.n	8003b4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	40015000 	.word	0x40015000

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 030a 	bic.w	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0210 	bic.w	r2, r3, #16
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIMEx_PWMN_Start+0x24>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e022      	b.n	8003d7a <HAL_TIMEx_PWMN_Start+0x6a>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d109      	bne.n	8003d4e <HAL_TIMEx_PWMN_Start+0x3e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e015      	b.n	8003d7a <HAL_TIMEx_PWMN_Start+0x6a>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d109      	bne.n	8003d68 <HAL_TIMEx_PWMN_Start+0x58>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e008      	b.n	8003d7a <HAL_TIMEx_PWMN_Start+0x6a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e073      	b.n	8003e6a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIMEx_PWMN_Start+0x82>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	e013      	b.n	8003dba <HAL_TIMEx_PWMN_Start+0xaa>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIMEx_PWMN_Start+0x92>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da0:	e00b      	b.n	8003dba <HAL_TIMEx_PWMN_Start+0xaa>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIMEx_PWMN_Start+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db0:	e003      	b.n	8003dba <HAL_TIMEx_PWMN_Start+0xaa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa0c 	bl	80041e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_TIMEx_PWMN_Start+0x164>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d01d      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <HAL_TIMEx_PWMN_Start+0x168>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <HAL_TIMEx_PWMN_Start+0x16c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_TIMEx_PWMN_Start+0x170>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_TIMEx_PWMN_Start+0x174>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_TIMEx_PWMN_Start+0x178>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIMEx_PWMN_Start+0x118>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_TIMEx_PWMN_Start+0x17c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d115      	bne.n	8003e54 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_TIMEx_PWMN_Start+0x180>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d015      	beq.n	8003e66 <HAL_TIMEx_PWMN_Start+0x156>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d011      	beq.n	8003e66 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	e008      	b.n	8003e66 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e000      	b.n	8003e68 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40015000 	.word	0x40015000
 8003e90:	00010007 	.word	0x00010007

08003e94 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f99a 	bl	80041e0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_TIMEx_PWMN_Stop+0x48>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	f244 4344 	movw	r3, #17476	; 0x4444
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_TIMEx_PWMN_Stop+0x48>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_TIMEx_PWMN_Stop+0x78>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	f244 4344 	movw	r3, #17476	; 0x4444
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_TIMEx_PWMN_Stop+0x78>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_TIMEx_PWMN_Stop+0x88>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1a:	e013      	b.n	8003f44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d104      	bne.n	8003f2c <HAL_TIMEx_PWMN_Stop+0x98>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2a:	e00b      	b.n	8003f44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d104      	bne.n	8003f3c <HAL_TIMEx_PWMN_Stop+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f3a:	e003      	b.n	8003f44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e074      	b.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a34      	ldr	r2, [pc, #208]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a21      	ldr	r2, [pc, #132]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01d      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10c      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40015000 	.word	0x40015000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000

0800407c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004094:	2302      	movs	r3, #2
 8004096:	e096      	b.n	80041c6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2f      	ldr	r2, [pc, #188]	; (80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2d      	ldr	r2, [pc, #180]	; (80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d106      	bne.n	800413e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d12b      	bne.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	051b      	lsls	r3, r3, #20
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d106      	bne.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40015000 	.word	0x40015000

080041e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2204      	movs	r2, #4
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e042      	b.n	80042c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc ff5a 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fc51 	bl	8004b14 <UART_SetConfig>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e022      	b.n	80042c2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 ff41 	bl	800510c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ffc8 	bl	8005250 <UART_CheckIdleState>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	f040 8083 	bne.w	80043ec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_UART_Transmit+0x28>
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07b      	b.n	80043ee <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_UART_Transmit+0x3a>
 8004300:	2302      	movs	r3, #2
 8004302:	e074      	b.n	80043ee <HAL_UART_Transmit+0x124>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	; 0x21
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431c:	f7fc ffe2 	bl	80012e4 <HAL_GetTick>
 8004320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d108      	bne.n	800434e <HAL_UART_Transmit+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e003      	b.n	8004356 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800435e:	e02c      	b.n	80043ba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2200      	movs	r2, #0
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 ffbb 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e039      	b.n	80043ee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	3302      	adds	r3, #2
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e007      	b.n	80043a8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1cc      	bne.n	8004360 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2140      	movs	r1, #64	; 0x40
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 ff88 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e006      	b.n	80043ee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	2b20      	cmp	r3, #32
 800440e:	d142      	bne.n	8004496 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Receive_IT+0x24>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e03b      	b.n	8004498 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_UART_Receive_IT+0x36>
 800442a:	2302      	movs	r3, #2
 800442c:	e034      	b.n	8004498 <HAL_UART_Receive_IT+0xa0>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_UART_Receive_IT+0xa8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d018      	beq.n	8004486 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	613b      	str	r3, [r7, #16]
   return(result);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	69f9      	ldr	r1, [r7, #28]
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	461a      	mov	r2, r3
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fff3 	bl	8005478 <UART_Start_Receive_IT>
 8004492:	4603      	mov	r3, r0
 8004494:	e000      	b.n	8004498 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40008000 	.word	0x40008000

080044a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0ba      	sub	sp, #232	; 0xe8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80044d2:	4013      	ands	r3, r2
 80044d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11b      	bne.n	8004518 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 82d6 	beq.w	8004aba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
      }
      return;
 8004516:	e2d0      	b.n	8004aba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 811f 	beq.w	8004760 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004522:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004526:	4b8b      	ldr	r3, [pc, #556]	; (8004754 <HAL_UART_IRQHandler+0x2b0>)
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800452e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004532:	4b89      	ldr	r3, [pc, #548]	; (8004758 <HAL_UART_IRQHandler+0x2b4>)
 8004534:	4013      	ands	r3, r2
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8112 	beq.w	8004760 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d011      	beq.n	800456c <HAL_UART_IRQHandler+0xc8>
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800456c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d011      	beq.n	800459c <HAL_UART_IRQHandler+0xf8>
 8004578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d011      	beq.n	80045cc <HAL_UART_IRQHandler+0x128>
 80045a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2204      	movs	r2, #4
 80045ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d017      	beq.n	8004608 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80045e8:	4b5a      	ldr	r3, [pc, #360]	; (8004754 <HAL_UART_IRQHandler+0x2b0>)
 80045ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2208      	movs	r2, #8
 80045f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fe:	f043 0208 	orr.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d012      	beq.n	800463a <HAL_UART_IRQHandler+0x196>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 823c 	beq.w	8004abe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d013      	beq.n	800467a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800465e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04f      	beq.n	800473e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 f814 	bl	80056cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d141      	bne.n	8004736 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1d9      	bne.n	80046b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_UART_IRQHandler+0x2b8>)
 800470c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc ff7c 	bl	8001610 <HAL_DMA_Abort_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00f      	b.n	800474e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9da 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e00b      	b.n	800474e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9d6 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e007      	b.n	800474e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9d2 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800474c:	e1b7      	b.n	8004abe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474e:	bf00      	nop
    return;
 8004750:	e1b5      	b.n	8004abe <HAL_UART_IRQHandler+0x61a>
 8004752:	bf00      	nop
 8004754:	10000001 	.word	0x10000001
 8004758:	04000120 	.word	0x04000120
 800475c:	08005799 	.word	0x08005799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004764:	2b01      	cmp	r3, #1
 8004766:	f040 814a 	bne.w	80049fe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8143 	beq.w	80049fe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 813c 	beq.w	80049fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2210      	movs	r2, #16
 800478c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	f040 80b5 	bne.w	8004908 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8187 	beq.w	8004ac2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	429a      	cmp	r2, r3
 80047c0:	f080 817f 	bcs.w	8004ac2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 8086 	bne.w	80048ec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800480a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800480e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1da      	bne.n	80047e0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800483a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800484e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e1      	bne.n	800482a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800488a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800488c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f023 0310 	bic.w	r3, r3, #16
 80048c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80048d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e4      	bne.n	80048ac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fe39 	bl	800155e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8fb 	bl	8004afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004906:	e0dc      	b.n	8004ac2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004914:	b29b      	uxth	r3, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80ce 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800492a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80c9 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004956:	647b      	str	r3, [r7, #68]	; 0x44
 8004958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800495c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e4      	bne.n	8004934 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	623b      	str	r3, [r7, #32]
   return(result);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004992:	633a      	str	r2, [r7, #48]	; 0x30
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e1      	bne.n	800496a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0310 	bic.w	r3, r3, #16
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e4      	bne.n	80049ba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f880 	bl	8004afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049fc:	e063      	b.n	8004ac6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00e      	beq.n	8004a28 <HAL_UART_IRQHandler+0x584>
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f001 fb57 	bl	80060d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a26:	e051      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03a      	beq.n	8004aca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
    }
    return;
 8004a5c:	e035      	b.n	8004aca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_UART_IRQHandler+0x5da>
 8004a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fea4 	bl	80057c4 <UART_EndTransmit_IT>
    return;
 8004a7c:	e026      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_UART_IRQHandler+0x5fa>
 8004a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fb30 	bl	80060fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a9c:	e016      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d010      	beq.n	8004acc <HAL_UART_IRQHandler+0x628>
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da0c      	bge.n	8004acc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fb18 	bl	80060e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ab8:	e008      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
      return;
 8004aba:	bf00      	nop
 8004abc:	e006      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
    return;
 8004abe:	bf00      	nop
 8004ac0:	e004      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
      return;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
      return;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <HAL_UART_IRQHandler+0x628>
    return;
 8004aca:	bf00      	nop
  }
}
 8004acc:	37e8      	adds	r7, #232	; 0xe8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop

08004ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b18:	b08c      	sub	sp, #48	; 0x30
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4baa      	ldr	r3, [pc, #680]	; (8004dec <UART_SetConfig+0x2d8>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a9f      	ldr	r2, [pc, #636]	; (8004df0 <UART_SetConfig+0x2dc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	f023 010f 	bic.w	r1, r3, #15
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a90      	ldr	r2, [pc, #576]	; (8004df4 <UART_SetConfig+0x2e0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d125      	bne.n	8004c04 <UART_SetConfig+0xf0>
 8004bb8:	4b8f      	ldr	r3, [pc, #572]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d81a      	bhi.n	8004bfc <UART_SetConfig+0xe8>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0xb8>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004bed 	.word	0x08004bed
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e116      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bea:	e112      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e10e      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e10a      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e106      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7c      	ldr	r2, [pc, #496]	; (8004dfc <UART_SetConfig+0x2e8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d138      	bne.n	8004c80 <UART_SetConfig+0x16c>
 8004c0e:	4b7a      	ldr	r3, [pc, #488]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d82d      	bhi.n	8004c78 <UART_SetConfig+0x164>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0x110>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004c79 	.word	0x08004c79
 8004c30:	08004c79 	.word	0x08004c79
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c79 	.word	0x08004c79
 8004c3c:	08004c79 	.word	0x08004c79
 8004c40:	08004c79 	.word	0x08004c79
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	08004c79 	.word	0x08004c79
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e0d8      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c60:	2302      	movs	r3, #2
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e0d4      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e0d0      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e0cc      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	e0c8      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a5e      	ldr	r2, [pc, #376]	; (8004e00 <UART_SetConfig+0x2ec>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d125      	bne.n	8004cd6 <UART_SetConfig+0x1c2>
 8004c8a:	4b5b      	ldr	r3, [pc, #364]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d016      	beq.n	8004cc6 <UART_SetConfig+0x1b2>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d818      	bhi.n	8004cce <UART_SetConfig+0x1ba>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d00a      	beq.n	8004cb6 <UART_SetConfig+0x1a2>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d814      	bhi.n	8004cce <UART_SetConfig+0x1ba>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <UART_SetConfig+0x19a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d008      	beq.n	8004cbe <UART_SetConfig+0x1aa>
 8004cac:	e00f      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb4:	e0ad      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbc:	e0a9      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc4:	e0a5      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ccc:	e0a1      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004cce:	2310      	movs	r3, #16
 8004cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd4:	e09d      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4a      	ldr	r2, [pc, #296]	; (8004e04 <UART_SetConfig+0x2f0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d125      	bne.n	8004d2c <UART_SetConfig+0x218>
 8004ce0:	4b45      	ldr	r3, [pc, #276]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cea:	2bc0      	cmp	r3, #192	; 0xc0
 8004cec:	d016      	beq.n	8004d1c <UART_SetConfig+0x208>
 8004cee:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf0:	d818      	bhi.n	8004d24 <UART_SetConfig+0x210>
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d00a      	beq.n	8004d0c <UART_SetConfig+0x1f8>
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d814      	bhi.n	8004d24 <UART_SetConfig+0x210>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x1f0>
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d008      	beq.n	8004d14 <UART_SetConfig+0x200>
 8004d02:	e00f      	b.n	8004d24 <UART_SetConfig+0x210>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	e082      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e07e      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e07a      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e076      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e072      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <UART_SetConfig+0x2f4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d12a      	bne.n	8004d8c <UART_SetConfig+0x278>
 8004d36:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d44:	d01a      	beq.n	8004d7c <UART_SetConfig+0x268>
 8004d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4a:	d81b      	bhi.n	8004d84 <UART_SetConfig+0x270>
 8004d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d50:	d00c      	beq.n	8004d6c <UART_SetConfig+0x258>
 8004d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d56:	d815      	bhi.n	8004d84 <UART_SetConfig+0x270>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <UART_SetConfig+0x250>
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d008      	beq.n	8004d74 <UART_SetConfig+0x260>
 8004d62:	e00f      	b.n	8004d84 <UART_SetConfig+0x270>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	e052      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d72:	e04e      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	e04a      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e046      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e042      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <UART_SetConfig+0x2dc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d13a      	bne.n	8004e0c <UART_SetConfig+0x2f8>
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <UART_SetConfig+0x2e4>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da4:	d01a      	beq.n	8004ddc <UART_SetConfig+0x2c8>
 8004da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004daa:	d81b      	bhi.n	8004de4 <UART_SetConfig+0x2d0>
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db0:	d00c      	beq.n	8004dcc <UART_SetConfig+0x2b8>
 8004db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db6:	d815      	bhi.n	8004de4 <UART_SetConfig+0x2d0>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <UART_SetConfig+0x2b0>
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc0:	d008      	beq.n	8004dd4 <UART_SetConfig+0x2c0>
 8004dc2:	e00f      	b.n	8004de4 <UART_SetConfig+0x2d0>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dca:	e022      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd2:	e01e      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dda:	e01a      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de2:	e016      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004de4:	2310      	movs	r3, #16
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dea:	e012      	b.n	8004e12 <UART_SetConfig+0x2fe>
 8004dec:	cfff69f3 	.word	0xcfff69f3
 8004df0:	40008000 	.word	0x40008000
 8004df4:	40013800 	.word	0x40013800
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	40004800 	.word	0x40004800
 8004e04:	40004c00 	.word	0x40004c00
 8004e08:	40005000 	.word	0x40005000
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4aae      	ldr	r2, [pc, #696]	; (80050d0 <UART_SetConfig+0x5bc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	f040 8097 	bne.w	8004f4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d823      	bhi.n	8004e6e <UART_SetConfig+0x35a>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0x318>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e6f 	.word	0x08004e6f
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e6f 	.word	0x08004e6f
 8004e3c:	08004e5f 	.word	0x08004e5f
 8004e40:	08004e6f 	.word	0x08004e6f
 8004e44:	08004e6f 	.word	0x08004e6f
 8004e48:	08004e6f 	.word	0x08004e6f
 8004e4c:	08004e67 	.word	0x08004e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7fd fb7a 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e56:	e010      	b.n	8004e7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e58:	4b9e      	ldr	r3, [pc, #632]	; (80050d4 <UART_SetConfig+0x5c0>)
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e5c:	e00d      	b.n	8004e7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5e:	f7fd fb05 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e64:	e009      	b.n	8004e7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e6c:	e005      	b.n	8004e7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8130 	beq.w	80050e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	4a94      	ldr	r2, [pc, #592]	; (80050d8 <UART_SetConfig+0x5c4>)
 8004e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d305      	bcc.n	8004eb2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d903      	bls.n	8004eba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eb8:	e113      	b.n	80050e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	60fa      	str	r2, [r7, #12]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	4a84      	ldr	r2, [pc, #528]	; (80050d8 <UART_SetConfig+0x5c4>)
 8004ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004edc:	f7fb fa00 	bl	80002e0 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	020b      	lsls	r3, r1, #8
 8004ef2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ef6:	0202      	lsls	r2, r0, #8
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	6849      	ldr	r1, [r1, #4]
 8004efc:	0849      	lsrs	r1, r1, #1
 8004efe:	2000      	movs	r0, #0
 8004f00:	460c      	mov	r4, r1
 8004f02:	4605      	mov	r5, r0
 8004f04:	eb12 0804 	adds.w	r8, r2, r4
 8004f08:	eb43 0905 	adc.w	r9, r3, r5
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	469a      	mov	sl, r3
 8004f14:	4693      	mov	fp, r2
 8004f16:	4652      	mov	r2, sl
 8004f18:	465b      	mov	r3, fp
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f7fb f9df 	bl	80002e0 <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4613      	mov	r3, r2
 8004f28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f30:	d308      	bcc.n	8004f44 <UART_SetConfig+0x430>
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f38:	d204      	bcs.n	8004f44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e0ce      	b.n	80050e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f4a:	e0ca      	b.n	80050e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f54:	d166      	bne.n	8005024 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d827      	bhi.n	8004fae <UART_SetConfig+0x49a>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <UART_SetConfig+0x450>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f91 	.word	0x08004f91
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	08004faf 	.word	0x08004faf
 8004f74:	08004f9f 	.word	0x08004f9f
 8004f78:	08004faf 	.word	0x08004faf
 8004f7c:	08004faf 	.word	0x08004faf
 8004f80:	08004faf 	.word	0x08004faf
 8004f84:	08004fa7 	.word	0x08004fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f88:	f7fd fade 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f8e:	e014      	b.n	8004fba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f90:	f7fd faf0 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f96:	e010      	b.n	8004fba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <UART_SetConfig+0x5c0>)
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f9c:	e00d      	b.n	8004fba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9e:	f7fd fa65 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fa4:	e009      	b.n	8004fba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fac:	e005      	b.n	8004fba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8090 	beq.w	80050e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	4a44      	ldr	r2, [pc, #272]	; (80050d8 <UART_SetConfig+0x5c4>)
 8004fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd4:	005a      	lsls	r2, r3, #1
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	441a      	add	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	2b0f      	cmp	r3, #15
 8004fec:	d916      	bls.n	800501c <UART_SetConfig+0x508>
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d212      	bcs.n	800501c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f023 030f 	bic.w	r3, r3, #15
 8004ffe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	b29b      	uxth	r3, r3
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	b29a      	uxth	r2, r3
 800500c:	8bfb      	ldrh	r3, [r7, #30]
 800500e:	4313      	orrs	r3, r2
 8005010:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	8bfa      	ldrh	r2, [r7, #30]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	e062      	b.n	80050e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005022:	e05e      	b.n	80050e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005028:	2b08      	cmp	r3, #8
 800502a:	d828      	bhi.n	800507e <UART_SetConfig+0x56a>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x520>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	0800507f 	.word	0x0800507f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800507f 	.word	0x0800507f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd fa76 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800505e:	e014      	b.n	800508a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fd fa88 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005066:	e010      	b.n	800508a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <UART_SetConfig+0x5c0>)
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800506c:	e00d      	b.n	800508a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fd f9fd 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8005072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005074:	e009      	b.n	800508a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800507c:	e005      	b.n	800508a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005088:	bf00      	nop
    }

    if (pclk != 0U)
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d028      	beq.n	80050e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <UART_SetConfig+0x5c4>)
 8005096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509a:	461a      	mov	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	fbb3 f2f2 	udiv	r2, r3, r2
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	441a      	add	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d910      	bls.n	80050dc <UART_SetConfig+0x5c8>
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d20c      	bcs.n	80050dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	e009      	b.n	80050e2 <UART_SetConfig+0x5ce>
 80050ce:	bf00      	nop
 80050d0:	40008000 	.word	0x40008000
 80050d4:	00f42400 	.word	0x00f42400
 80050d8:	080079b8 	.word	0x080079b8
      }
      else
      {
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80050fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005102:	4618      	mov	r0, r3
 8005104:	3730      	adds	r7, #48	; 0x30
 8005106:	46bd      	mov	sp, r7
 8005108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800510c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520a:	d10a      	bne.n	8005222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005260:	f7fc f840 	bl	80012e4 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d10e      	bne.n	8005292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f82f 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e025      	b.n	80052de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b04      	cmp	r3, #4
 800529e:	d10e      	bne.n	80052be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f819 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e00f      	b.n	80052de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b09c      	sub	sp, #112	; 0x70
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	e0a9      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	f000 80a5 	beq.w	800544c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fb ffef 	bl	80012e4 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
 8005312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005314:	2b00      	cmp	r3, #0
 8005316:	d140      	bne.n	800539a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800532c:	667b      	str	r3, [r7, #100]	; 0x64
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005338:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800533c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800536a:	64ba      	str	r2, [r7, #72]	; 0x48
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e069      	b.n	800546e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d051      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b6:	d149      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e6      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	66bb      	str	r3, [r7, #104]	; 0x68
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005414:	623a      	str	r2, [r7, #32]
 8005416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	6a3a      	ldr	r2, [r7, #32]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	61bb      	str	r3, [r7, #24]
   return(result);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e010      	b.n	800546e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	f43f af46 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3770      	adds	r7, #112	; 0x70
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b480      	push	{r7}
 800547a:	b0a3      	sub	sp, #140	; 0x8c
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d10e      	bne.n	80054ca <UART_Start_Receive_IT+0x52>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <UART_Start_Receive_IT+0x48>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054be:	e02d      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054c8:	e028      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <UART_Start_Receive_IT+0x76>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <UART_Start_Receive_IT+0x6c>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054e2:	e01b      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	227f      	movs	r2, #127	; 0x7f
 80054e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054ec:	e016      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f6:	d10d      	bne.n	8005514 <UART_Start_Receive_IT+0x9c>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <UART_Start_Receive_IT+0x92>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	227f      	movs	r2, #127	; 0x7f
 8005504:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005508:	e008      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	223f      	movs	r2, #63	; 0x3f
 800550e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005512:	e003      	b.n	800551c <UART_Start_Receive_IT+0xa4>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2222      	movs	r2, #34	; 0x22
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800553c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005550:	673a      	str	r2, [r7, #112]	; 0x70
 8005552:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005556:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800555e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e3      	bne.n	800552c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556c:	d153      	bne.n	8005616 <UART_Start_Receive_IT+0x19e>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	429a      	cmp	r2, r3
 8005578:	d34d      	bcc.n	8005616 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	d107      	bne.n	8005594 <UART_Start_Receive_IT+0x11c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a4b      	ldr	r2, [pc, #300]	; (80056bc <UART_Start_Receive_IT+0x244>)
 8005590:	671a      	str	r2, [r3, #112]	; 0x70
 8005592:	e002      	b.n	800559a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <UART_Start_Receive_IT+0x248>)
 8005598:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01a      	beq.n	80055e0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e4      	bne.n	80055aa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005600:	64ba      	str	r2, [r7, #72]	; 0x48
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_Start_Receive_IT+0x168>
 8005614:	e04a      	b.n	80056ac <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	d107      	bne.n	8005630 <UART_Start_Receive_IT+0x1b8>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <UART_Start_Receive_IT+0x24c>)
 800562c:	671a      	str	r2, [r3, #112]	; 0x70
 800562e:	e002      	b.n	8005636 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <UART_Start_Receive_IT+0x250>)
 8005634:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d019      	beq.n	800567a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800565a:	677b      	str	r3, [r7, #116]	; 0x74
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
 8005666:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800566a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <UART_Start_Receive_IT+0x1ce>
 8005678:	e018      	b.n	80056ac <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	613b      	str	r3, [r7, #16]
   return(result);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f043 0320 	orr.w	r3, r3, #32
 800568e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	6a3a      	ldr	r2, [r7, #32]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	378c      	adds	r7, #140	; 0x8c
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	08005dd5 	.word	0x08005dd5
 80056c0:	08005add 	.word	0x08005add
 80056c4:	0800597b 	.word	0x0800597b
 80056c8:	0800581b 	.word	0x0800581b

080056cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b095      	sub	sp, #84	; 0x54
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40
 80056f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	61fb      	str	r3, [r7, #28]
   return(result);
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	64bb      	str	r3, [r7, #72]	; 0x48
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800572a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e3      	bne.n	8005706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d118      	bne.n	8005778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	60bb      	str	r3, [r7, #8]
   return(result);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0310 	bic.w	r3, r3, #16
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800578c:	bf00      	nop
 800578e:	3754      	adds	r7, #84	; 0x54
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff f996 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	613b      	str	r3, [r7, #16]
   return(result);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff f961 	bl	8004ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005812:	bf00      	nop
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b096      	sub	sp, #88	; 0x58
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005828:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	2b22      	cmp	r3, #34	; 0x22
 8005834:	f040 8095 	bne.w	8005962 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005842:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005846:	b2d9      	uxtb	r1, r3
 8005848:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800584c:	b2da      	uxtb	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	400a      	ands	r2, r1
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d178      	bne.n	8005972 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	623b      	str	r3, [r7, #32]
   return(result);
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d2:	633a      	str	r2, [r7, #48]	; 0x30
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d12e      	bne.n	800595a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	617b      	str	r3, [r7, #20]
   return(result);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e6      	bne.n	8005902 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b10      	cmp	r3, #16
 8005940:	d103      	bne.n	800594a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2210      	movs	r2, #16
 8005948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff f8d2 	bl	8004afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005958:	e00b      	b.n	8005972 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb f908 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8005960:	e007      	b.n	8005972 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	3758      	adds	r7, #88	; 0x58
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b096      	sub	sp, #88	; 0x58
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	2b22      	cmp	r3, #34	; 0x22
 8005994:	f040 8095 	bne.w	8005ac2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80059a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80059ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d178      	bne.n	8005ad2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005a00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d12e      	bne.n	8005aba <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d103      	bne.n	8005aaa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff f822 	bl	8004afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ab8:	e00b      	b.n	8005ad2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb f858 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8005ac0:	e007      	b.n	8005ad2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0208 	orr.w	r2, r2, #8
 8005ad0:	619a      	str	r2, [r3, #24]
}
 8005ad2:	bf00      	nop
 8005ad4:	3758      	adds	r7, #88	; 0x58
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b0a6      	sub	sp, #152	; 0x98
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	2b22      	cmp	r3, #34	; 0x22
 8005b14:	f040 814f 	bne.w	8005db6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b22:	e0f6      	b.n	8005d12 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b2e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b32:	b2d9      	uxtb	r1, r3
 8005b34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	400a      	ands	r2, r1
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d053      	beq.n	8005c1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d011      	beq.n	8005bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bcc:	f043 0204 	orr.w	r2, r3, #4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d011      	beq.n	8005c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfc:	f043 0202 	orr.w	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d006      	beq.n	8005c1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe ff69 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d173      	bne.n	8005d12 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c4e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e4      	bne.n	8005c2a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c84:	657a      	str	r2, [r7, #84]	; 0x54
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e3      	bne.n	8005c60 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d12e      	bne.n	8005d0c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d103      	bne.n	8005cfc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fe fef9 	bl	8004afc <HAL_UARTEx_RxEventCallback>
 8005d0a:	e002      	b.n	8005d12 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fa ff2f 	bl	8000b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f47f aefe 	bne.w	8005b24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d32:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d045      	beq.n	8005dc6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d23e      	bcs.n	8005dc6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a14      	ldr	r2, [pc, #80]	; (8005dd0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005d80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f043 0320 	orr.w	r3, r3, #32
 8005d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005db4:	e007      	b.n	8005dc6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0208 	orr.w	r2, r2, #8
 8005dc4:	619a      	str	r2, [r3, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	3798      	adds	r7, #152	; 0x98
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800581b 	.word	0x0800581b

08005dd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b0a8      	sub	sp, #160	; 0xa0
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005de2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	f040 8153 	bne.w	80060b6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e1a:	e0fa      	b.n	8006012 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e2e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005e32:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d053      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e98:	f043 0201 	orr.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d011      	beq.n	8005f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f043 0202 	orr.w	r2, r3, #2
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d006      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fe fdeb 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d175      	bne.n	8006012 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f4a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e4      	bne.n	8005f26 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f84:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e1      	bne.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d12e      	bne.n	800600c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	f023 0310 	bic.w	r3, r3, #16
 8005fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d103      	bne.n	8005ffc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fe fd79 	bl	8004afc <HAL_UARTEx_RxEventCallback>
 800600a:	e002      	b.n	8006012 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fa fdaf 	bl	8000b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006012:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x254>
 800601a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	f47f aefa 	bne.w	8005e1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800602e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006032:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006036:	2b00      	cmp	r3, #0
 8006038:	d045      	beq.n	80060c6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006040:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006044:	429a      	cmp	r2, r3
 8006046:	d23e      	bcs.n	80060c6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	623b      	str	r3, [r7, #32]
   return(result);
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605e:	677b      	str	r3, [r7, #116]	; 0x74
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006068:	633a      	str	r2, [r7, #48]	; 0x30
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800606e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006080:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f043 0320 	orr.w	r3, r3, #32
 8006096:	673b      	str	r3, [r7, #112]	; 0x70
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	617b      	str	r3, [r7, #20]
   return(result);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e6      	bne.n	8006082 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060b4:	e007      	b.n	80060c6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0208 	orr.w	r2, r2, #8
 80060c4:	619a      	str	r2, [r3, #24]
}
 80060c6:	bf00      	nop
 80060c8:	37a0      	adds	r7, #160	; 0xa0
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	0800597b 	.word	0x0800597b

080060d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UARTEx_DisableFifoMode+0x16>
 8006122:	2302      	movs	r3, #2
 8006124:	e027      	b.n	8006176 <HAL_UARTEx_DisableFifoMode+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2224      	movs	r2, #36	; 0x24
 8006132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006196:	2302      	movs	r3, #2
 8006198:	e02d      	b.n	80061f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2224      	movs	r2, #36	; 0x24
 80061a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f850 	bl	800627c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006212:	2302      	movs	r3, #2
 8006214:	e02d      	b.n	8006272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f812 	bl	800627c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006288:	2b00      	cmp	r3, #0
 800628a:	d108      	bne.n	800629e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800629c:	e031      	b.n	8006302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800629e:	2308      	movs	r3, #8
 80062a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062a2:	2308      	movs	r3, #8
 80062a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	0e5b      	lsrs	r3, r3, #25
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	0f5b      	lsrs	r3, r3, #29
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	7b3a      	ldrb	r2, [r7, #12]
 80062ca:	4911      	ldr	r1, [pc, #68]	; (8006310 <UARTEx_SetNbDataToProcess+0x94>)
 80062cc:	5c8a      	ldrb	r2, [r1, r2]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062d2:	7b3a      	ldrb	r2, [r7, #12]
 80062d4:	490f      	ldr	r1, [pc, #60]	; (8006314 <UARTEx_SetNbDataToProcess+0x98>)
 80062d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	7b7a      	ldrb	r2, [r7, #13]
 80062e8:	4909      	ldr	r1, [pc, #36]	; (8006310 <UARTEx_SetNbDataToProcess+0x94>)
 80062ea:	5c8a      	ldrb	r2, [r1, r2]
 80062ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062f0:	7b7a      	ldrb	r2, [r7, #13]
 80062f2:	4908      	ldr	r1, [pc, #32]	; (8006314 <UARTEx_SetNbDataToProcess+0x98>)
 80062f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	080079d0 	.word	0x080079d0
 8006314:	080079d8 	.word	0x080079d8

08006318 <atoi>:
 8006318:	220a      	movs	r2, #10
 800631a:	2100      	movs	r1, #0
 800631c:	f000 b930 	b.w	8006580 <strtol>

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	200001dc 	.word	0x200001dc

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4d0d      	ldr	r5, [pc, #52]	; (8006364 <__libc_init_array+0x38>)
 8006330:	4c0d      	ldr	r4, [pc, #52]	; (8006368 <__libc_init_array+0x3c>)
 8006332:	1b64      	subs	r4, r4, r5
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	2600      	movs	r6, #0
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	4d0b      	ldr	r5, [pc, #44]	; (800636c <__libc_init_array+0x40>)
 800633e:	4c0c      	ldr	r4, [pc, #48]	; (8006370 <__libc_init_array+0x44>)
 8006340:	f001 fade 	bl	8007900 <_init>
 8006344:	1b64      	subs	r4, r4, r5
 8006346:	10a4      	asrs	r4, r4, #2
 8006348:	2600      	movs	r6, #0
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f855 3b04 	ldr.w	r3, [r5], #4
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f855 3b04 	ldr.w	r3, [r5], #4
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08007c30 	.word	0x08007c30
 8006368:	08007c30 	.word	0x08007c30
 800636c:	08007c30 	.word	0x08007c30
 8006370:	08007c34 	.word	0x08007c34

08006374 <memset>:
 8006374:	4402      	add	r2, r0
 8006376:	4603      	mov	r3, r0
 8006378:	4293      	cmp	r3, r2
 800637a:	d100      	bne.n	800637e <memset+0xa>
 800637c:	4770      	bx	lr
 800637e:	f803 1b01 	strb.w	r1, [r3], #1
 8006382:	e7f9      	b.n	8006378 <memset+0x4>

08006384 <siprintf>:
 8006384:	b40e      	push	{r1, r2, r3}
 8006386:	b500      	push	{lr}
 8006388:	b09c      	sub	sp, #112	; 0x70
 800638a:	ab1d      	add	r3, sp, #116	; 0x74
 800638c:	9002      	str	r0, [sp, #8]
 800638e:	9006      	str	r0, [sp, #24]
 8006390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006394:	4809      	ldr	r0, [pc, #36]	; (80063bc <siprintf+0x38>)
 8006396:	9107      	str	r1, [sp, #28]
 8006398:	9104      	str	r1, [sp, #16]
 800639a:	4909      	ldr	r1, [pc, #36]	; (80063c0 <siprintf+0x3c>)
 800639c:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a0:	9105      	str	r1, [sp, #20]
 80063a2:	6800      	ldr	r0, [r0, #0]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	a902      	add	r1, sp, #8
 80063a8:	f000 fa68 	bl	800687c <_svfiprintf_r>
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	b01c      	add	sp, #112	; 0x70
 80063b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b8:	b003      	add	sp, #12
 80063ba:	4770      	bx	lr
 80063bc:	200001dc 	.word	0x200001dc
 80063c0:	ffff0208 	.word	0xffff0208

080063c4 <strtok>:
 80063c4:	4b16      	ldr	r3, [pc, #88]	; (8006420 <strtok+0x5c>)
 80063c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063c8:	681e      	ldr	r6, [r3, #0]
 80063ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80063cc:	4605      	mov	r5, r0
 80063ce:	b9fc      	cbnz	r4, 8006410 <strtok+0x4c>
 80063d0:	2050      	movs	r0, #80	; 0x50
 80063d2:	9101      	str	r1, [sp, #4]
 80063d4:	f000 f90e 	bl	80065f4 <malloc>
 80063d8:	9901      	ldr	r1, [sp, #4]
 80063da:	65b0      	str	r0, [r6, #88]	; 0x58
 80063dc:	4602      	mov	r2, r0
 80063de:	b920      	cbnz	r0, 80063ea <strtok+0x26>
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <strtok+0x60>)
 80063e2:	4811      	ldr	r0, [pc, #68]	; (8006428 <strtok+0x64>)
 80063e4:	2157      	movs	r1, #87	; 0x57
 80063e6:	f000 f8d5 	bl	8006594 <__assert_func>
 80063ea:	e9c0 4400 	strd	r4, r4, [r0]
 80063ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80063f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80063f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80063fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80063fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006402:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006406:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800640a:	6184      	str	r4, [r0, #24]
 800640c:	7704      	strb	r4, [r0, #28]
 800640e:	6244      	str	r4, [r0, #36]	; 0x24
 8006410:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006412:	2301      	movs	r3, #1
 8006414:	4628      	mov	r0, r5
 8006416:	b002      	add	sp, #8
 8006418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800641c:	f000 b806 	b.w	800642c <__strtok_r>
 8006420:	200001dc 	.word	0x200001dc
 8006424:	080079e4 	.word	0x080079e4
 8006428:	080079fb 	.word	0x080079fb

0800642c <__strtok_r>:
 800642c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642e:	b908      	cbnz	r0, 8006434 <__strtok_r+0x8>
 8006430:	6810      	ldr	r0, [r2, #0]
 8006432:	b188      	cbz	r0, 8006458 <__strtok_r+0x2c>
 8006434:	4604      	mov	r4, r0
 8006436:	4620      	mov	r0, r4
 8006438:	f814 5b01 	ldrb.w	r5, [r4], #1
 800643c:	460f      	mov	r7, r1
 800643e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006442:	b91e      	cbnz	r6, 800644c <__strtok_r+0x20>
 8006444:	b965      	cbnz	r5, 8006460 <__strtok_r+0x34>
 8006446:	6015      	str	r5, [r2, #0]
 8006448:	4628      	mov	r0, r5
 800644a:	e005      	b.n	8006458 <__strtok_r+0x2c>
 800644c:	42b5      	cmp	r5, r6
 800644e:	d1f6      	bne.n	800643e <__strtok_r+0x12>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <__strtok_r+0xa>
 8006454:	6014      	str	r4, [r2, #0]
 8006456:	7003      	strb	r3, [r0, #0]
 8006458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645a:	461c      	mov	r4, r3
 800645c:	e00c      	b.n	8006478 <__strtok_r+0x4c>
 800645e:	b915      	cbnz	r5, 8006466 <__strtok_r+0x3a>
 8006460:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006464:	460e      	mov	r6, r1
 8006466:	f816 5b01 	ldrb.w	r5, [r6], #1
 800646a:	42ab      	cmp	r3, r5
 800646c:	d1f7      	bne.n	800645e <__strtok_r+0x32>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f3      	beq.n	800645a <__strtok_r+0x2e>
 8006472:	2300      	movs	r3, #0
 8006474:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006478:	6014      	str	r4, [r2, #0]
 800647a:	e7ed      	b.n	8006458 <__strtok_r+0x2c>

0800647c <_strtol_l.constprop.0>:
 800647c:	2b01      	cmp	r3, #1
 800647e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006482:	d001      	beq.n	8006488 <_strtol_l.constprop.0+0xc>
 8006484:	2b24      	cmp	r3, #36	; 0x24
 8006486:	d906      	bls.n	8006496 <_strtol_l.constprop.0+0x1a>
 8006488:	f7ff ff4a 	bl	8006320 <__errno>
 800648c:	2316      	movs	r3, #22
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	2000      	movs	r0, #0
 8006492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006496:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800657c <_strtol_l.constprop.0+0x100>
 800649a:	460d      	mov	r5, r1
 800649c:	462e      	mov	r6, r5
 800649e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80064a6:	f017 0708 	ands.w	r7, r7, #8
 80064aa:	d1f7      	bne.n	800649c <_strtol_l.constprop.0+0x20>
 80064ac:	2c2d      	cmp	r4, #45	; 0x2d
 80064ae:	d132      	bne.n	8006516 <_strtol_l.constprop.0+0x9a>
 80064b0:	782c      	ldrb	r4, [r5, #0]
 80064b2:	2701      	movs	r7, #1
 80064b4:	1cb5      	adds	r5, r6, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d05b      	beq.n	8006572 <_strtol_l.constprop.0+0xf6>
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d109      	bne.n	80064d2 <_strtol_l.constprop.0+0x56>
 80064be:	2c30      	cmp	r4, #48	; 0x30
 80064c0:	d107      	bne.n	80064d2 <_strtol_l.constprop.0+0x56>
 80064c2:	782c      	ldrb	r4, [r5, #0]
 80064c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80064c8:	2c58      	cmp	r4, #88	; 0x58
 80064ca:	d14d      	bne.n	8006568 <_strtol_l.constprop.0+0xec>
 80064cc:	786c      	ldrb	r4, [r5, #1]
 80064ce:	2310      	movs	r3, #16
 80064d0:	3502      	adds	r5, #2
 80064d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80064d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80064da:	f04f 0c00 	mov.w	ip, #0
 80064de:	fbb8 f9f3 	udiv	r9, r8, r3
 80064e2:	4666      	mov	r6, ip
 80064e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80064e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80064ec:	f1be 0f09 	cmp.w	lr, #9
 80064f0:	d816      	bhi.n	8006520 <_strtol_l.constprop.0+0xa4>
 80064f2:	4674      	mov	r4, lr
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	dd24      	ble.n	8006542 <_strtol_l.constprop.0+0xc6>
 80064f8:	f1bc 0f00 	cmp.w	ip, #0
 80064fc:	db1e      	blt.n	800653c <_strtol_l.constprop.0+0xc0>
 80064fe:	45b1      	cmp	r9, r6
 8006500:	d31c      	bcc.n	800653c <_strtol_l.constprop.0+0xc0>
 8006502:	d101      	bne.n	8006508 <_strtol_l.constprop.0+0x8c>
 8006504:	45a2      	cmp	sl, r4
 8006506:	db19      	blt.n	800653c <_strtol_l.constprop.0+0xc0>
 8006508:	fb06 4603 	mla	r6, r6, r3, r4
 800650c:	f04f 0c01 	mov.w	ip, #1
 8006510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006514:	e7e8      	b.n	80064e8 <_strtol_l.constprop.0+0x6c>
 8006516:	2c2b      	cmp	r4, #43	; 0x2b
 8006518:	bf04      	itt	eq
 800651a:	782c      	ldrbeq	r4, [r5, #0]
 800651c:	1cb5      	addeq	r5, r6, #2
 800651e:	e7ca      	b.n	80064b6 <_strtol_l.constprop.0+0x3a>
 8006520:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006524:	f1be 0f19 	cmp.w	lr, #25
 8006528:	d801      	bhi.n	800652e <_strtol_l.constprop.0+0xb2>
 800652a:	3c37      	subs	r4, #55	; 0x37
 800652c:	e7e2      	b.n	80064f4 <_strtol_l.constprop.0+0x78>
 800652e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006532:	f1be 0f19 	cmp.w	lr, #25
 8006536:	d804      	bhi.n	8006542 <_strtol_l.constprop.0+0xc6>
 8006538:	3c57      	subs	r4, #87	; 0x57
 800653a:	e7db      	b.n	80064f4 <_strtol_l.constprop.0+0x78>
 800653c:	f04f 3cff 	mov.w	ip, #4294967295
 8006540:	e7e6      	b.n	8006510 <_strtol_l.constprop.0+0x94>
 8006542:	f1bc 0f00 	cmp.w	ip, #0
 8006546:	da05      	bge.n	8006554 <_strtol_l.constprop.0+0xd8>
 8006548:	2322      	movs	r3, #34	; 0x22
 800654a:	6003      	str	r3, [r0, #0]
 800654c:	4646      	mov	r6, r8
 800654e:	b942      	cbnz	r2, 8006562 <_strtol_l.constprop.0+0xe6>
 8006550:	4630      	mov	r0, r6
 8006552:	e79e      	b.n	8006492 <_strtol_l.constprop.0+0x16>
 8006554:	b107      	cbz	r7, 8006558 <_strtol_l.constprop.0+0xdc>
 8006556:	4276      	negs	r6, r6
 8006558:	2a00      	cmp	r2, #0
 800655a:	d0f9      	beq.n	8006550 <_strtol_l.constprop.0+0xd4>
 800655c:	f1bc 0f00 	cmp.w	ip, #0
 8006560:	d000      	beq.n	8006564 <_strtol_l.constprop.0+0xe8>
 8006562:	1e69      	subs	r1, r5, #1
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	e7f3      	b.n	8006550 <_strtol_l.constprop.0+0xd4>
 8006568:	2430      	movs	r4, #48	; 0x30
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1b1      	bne.n	80064d2 <_strtol_l.constprop.0+0x56>
 800656e:	2308      	movs	r3, #8
 8006570:	e7af      	b.n	80064d2 <_strtol_l.constprop.0+0x56>
 8006572:	2c30      	cmp	r4, #48	; 0x30
 8006574:	d0a5      	beq.n	80064c2 <_strtol_l.constprop.0+0x46>
 8006576:	230a      	movs	r3, #10
 8006578:	e7ab      	b.n	80064d2 <_strtol_l.constprop.0+0x56>
 800657a:	bf00      	nop
 800657c:	08007a95 	.word	0x08007a95

08006580 <strtol>:
 8006580:	4613      	mov	r3, r2
 8006582:	460a      	mov	r2, r1
 8006584:	4601      	mov	r1, r0
 8006586:	4802      	ldr	r0, [pc, #8]	; (8006590 <strtol+0x10>)
 8006588:	6800      	ldr	r0, [r0, #0]
 800658a:	f7ff bf77 	b.w	800647c <_strtol_l.constprop.0>
 800658e:	bf00      	nop
 8006590:	200001dc 	.word	0x200001dc

08006594 <__assert_func>:
 8006594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006596:	4614      	mov	r4, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <__assert_func+0x2c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4605      	mov	r5, r0
 80065a0:	68d8      	ldr	r0, [r3, #12]
 80065a2:	b14c      	cbz	r4, 80065b8 <__assert_func+0x24>
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <__assert_func+0x30>)
 80065a6:	9100      	str	r1, [sp, #0]
 80065a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065ac:	4906      	ldr	r1, [pc, #24]	; (80065c8 <__assert_func+0x34>)
 80065ae:	462b      	mov	r3, r5
 80065b0:	f000 f80e 	bl	80065d0 <fiprintf>
 80065b4:	f000 fe20 	bl	80071f8 <abort>
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <__assert_func+0x38>)
 80065ba:	461c      	mov	r4, r3
 80065bc:	e7f3      	b.n	80065a6 <__assert_func+0x12>
 80065be:	bf00      	nop
 80065c0:	200001dc 	.word	0x200001dc
 80065c4:	08007a58 	.word	0x08007a58
 80065c8:	08007a65 	.word	0x08007a65
 80065cc:	08007a93 	.word	0x08007a93

080065d0 <fiprintf>:
 80065d0:	b40e      	push	{r1, r2, r3}
 80065d2:	b503      	push	{r0, r1, lr}
 80065d4:	4601      	mov	r1, r0
 80065d6:	ab03      	add	r3, sp, #12
 80065d8:	4805      	ldr	r0, [pc, #20]	; (80065f0 <fiprintf+0x20>)
 80065da:	f853 2b04 	ldr.w	r2, [r3], #4
 80065de:	6800      	ldr	r0, [r0, #0]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	f000 fa75 	bl	8006ad0 <_vfiprintf_r>
 80065e6:	b002      	add	sp, #8
 80065e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ec:	b003      	add	sp, #12
 80065ee:	4770      	bx	lr
 80065f0:	200001dc 	.word	0x200001dc

080065f4 <malloc>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <malloc+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f000 b86f 	b.w	80066dc <_malloc_r>
 80065fe:	bf00      	nop
 8006600:	200001dc 	.word	0x200001dc

08006604 <_free_r>:
 8006604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006606:	2900      	cmp	r1, #0
 8006608:	d044      	beq.n	8006694 <_free_r+0x90>
 800660a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660e:	9001      	str	r0, [sp, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f1a1 0404 	sub.w	r4, r1, #4
 8006616:	bfb8      	it	lt
 8006618:	18e4      	addlt	r4, r4, r3
 800661a:	f001 f83d 	bl	8007698 <__malloc_lock>
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <_free_r+0x94>)
 8006620:	9801      	ldr	r0, [sp, #4]
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	b933      	cbnz	r3, 8006634 <_free_r+0x30>
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6014      	str	r4, [r2, #0]
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006630:	f001 b838 	b.w	80076a4 <__malloc_unlock>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d908      	bls.n	800664a <_free_r+0x46>
 8006638:	6825      	ldr	r5, [r4, #0]
 800663a:	1961      	adds	r1, r4, r5
 800663c:	428b      	cmp	r3, r1
 800663e:	bf01      	itttt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	1949      	addeq	r1, r1, r5
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	e7ed      	b.n	8006626 <_free_r+0x22>
 800664a:	461a      	mov	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b10b      	cbz	r3, 8006654 <_free_r+0x50>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d9fa      	bls.n	800664a <_free_r+0x46>
 8006654:	6811      	ldr	r1, [r2, #0]
 8006656:	1855      	adds	r5, r2, r1
 8006658:	42a5      	cmp	r5, r4
 800665a:	d10b      	bne.n	8006674 <_free_r+0x70>
 800665c:	6824      	ldr	r4, [r4, #0]
 800665e:	4421      	add	r1, r4
 8006660:	1854      	adds	r4, r2, r1
 8006662:	42a3      	cmp	r3, r4
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	d1e0      	bne.n	800662a <_free_r+0x26>
 8006668:	681c      	ldr	r4, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	6053      	str	r3, [r2, #4]
 800666e:	4421      	add	r1, r4
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	e7da      	b.n	800662a <_free_r+0x26>
 8006674:	d902      	bls.n	800667c <_free_r+0x78>
 8006676:	230c      	movs	r3, #12
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	e7d6      	b.n	800662a <_free_r+0x26>
 800667c:	6825      	ldr	r5, [r4, #0]
 800667e:	1961      	adds	r1, r4, r5
 8006680:	428b      	cmp	r3, r1
 8006682:	bf04      	itt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	bf04      	itt	eq
 800668c:	1949      	addeq	r1, r1, r5
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	6054      	str	r4, [r2, #4]
 8006692:	e7ca      	b.n	800662a <_free_r+0x26>
 8006694:	b003      	add	sp, #12
 8006696:	bd30      	pop	{r4, r5, pc}
 8006698:	20000474 	.word	0x20000474

0800669c <sbrk_aligned>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4e0e      	ldr	r6, [pc, #56]	; (80066d8 <sbrk_aligned+0x3c>)
 80066a0:	460c      	mov	r4, r1
 80066a2:	6831      	ldr	r1, [r6, #0]
 80066a4:	4605      	mov	r5, r0
 80066a6:	b911      	cbnz	r1, 80066ae <sbrk_aligned+0x12>
 80066a8:	f000 fcd6 	bl	8007058 <_sbrk_r>
 80066ac:	6030      	str	r0, [r6, #0]
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 fcd1 	bl	8007058 <_sbrk_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d00a      	beq.n	80066d0 <sbrk_aligned+0x34>
 80066ba:	1cc4      	adds	r4, r0, #3
 80066bc:	f024 0403 	bic.w	r4, r4, #3
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d007      	beq.n	80066d4 <sbrk_aligned+0x38>
 80066c4:	1a21      	subs	r1, r4, r0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fcc6 	bl	8007058 <_sbrk_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d101      	bne.n	80066d4 <sbrk_aligned+0x38>
 80066d0:	f04f 34ff 	mov.w	r4, #4294967295
 80066d4:	4620      	mov	r0, r4
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	20000478 	.word	0x20000478

080066dc <_malloc_r>:
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	1ccd      	adds	r5, r1, #3
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	4607      	mov	r7, r0
 80066f2:	db01      	blt.n	80066f8 <_malloc_r+0x1c>
 80066f4:	42a9      	cmp	r1, r5
 80066f6:	d905      	bls.n	8006704 <_malloc_r+0x28>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	2600      	movs	r6, #0
 80066fe:	4630      	mov	r0, r6
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	4e2e      	ldr	r6, [pc, #184]	; (80067c0 <_malloc_r+0xe4>)
 8006706:	f000 ffc7 	bl	8007698 <__malloc_lock>
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	461c      	mov	r4, r3
 800670e:	bb34      	cbnz	r4, 800675e <_malloc_r+0x82>
 8006710:	4629      	mov	r1, r5
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff ffc2 	bl	800669c <sbrk_aligned>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	4604      	mov	r4, r0
 800671c:	d14d      	bne.n	80067ba <_malloc_r+0xde>
 800671e:	6834      	ldr	r4, [r6, #0]
 8006720:	4626      	mov	r6, r4
 8006722:	2e00      	cmp	r6, #0
 8006724:	d140      	bne.n	80067a8 <_malloc_r+0xcc>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	4631      	mov	r1, r6
 800672a:	4638      	mov	r0, r7
 800672c:	eb04 0803 	add.w	r8, r4, r3
 8006730:	f000 fc92 	bl	8007058 <_sbrk_r>
 8006734:	4580      	cmp	r8, r0
 8006736:	d13a      	bne.n	80067ae <_malloc_r+0xd2>
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	3503      	adds	r5, #3
 800673c:	1a6d      	subs	r5, r5, r1
 800673e:	f025 0503 	bic.w	r5, r5, #3
 8006742:	3508      	adds	r5, #8
 8006744:	2d0c      	cmp	r5, #12
 8006746:	bf38      	it	cc
 8006748:	250c      	movcc	r5, #12
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff ffa5 	bl	800669c <sbrk_aligned>
 8006752:	3001      	adds	r0, #1
 8006754:	d02b      	beq.n	80067ae <_malloc_r+0xd2>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	442b      	add	r3, r5
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	e00e      	b.n	800677c <_malloc_r+0xa0>
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	1b52      	subs	r2, r2, r5
 8006762:	d41e      	bmi.n	80067a2 <_malloc_r+0xc6>
 8006764:	2a0b      	cmp	r2, #11
 8006766:	d916      	bls.n	8006796 <_malloc_r+0xba>
 8006768:	1961      	adds	r1, r4, r5
 800676a:	42a3      	cmp	r3, r4
 800676c:	6025      	str	r5, [r4, #0]
 800676e:	bf18      	it	ne
 8006770:	6059      	strne	r1, [r3, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	bf08      	it	eq
 8006776:	6031      	streq	r1, [r6, #0]
 8006778:	5162      	str	r2, [r4, r5]
 800677a:	604b      	str	r3, [r1, #4]
 800677c:	4638      	mov	r0, r7
 800677e:	f104 060b 	add.w	r6, r4, #11
 8006782:	f000 ff8f 	bl	80076a4 <__malloc_unlock>
 8006786:	f026 0607 	bic.w	r6, r6, #7
 800678a:	1d23      	adds	r3, r4, #4
 800678c:	1af2      	subs	r2, r6, r3
 800678e:	d0b6      	beq.n	80066fe <_malloc_r+0x22>
 8006790:	1b9b      	subs	r3, r3, r6
 8006792:	50a3      	str	r3, [r4, r2]
 8006794:	e7b3      	b.n	80066fe <_malloc_r+0x22>
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	42a3      	cmp	r3, r4
 800679a:	bf0c      	ite	eq
 800679c:	6032      	streq	r2, [r6, #0]
 800679e:	605a      	strne	r2, [r3, #4]
 80067a0:	e7ec      	b.n	800677c <_malloc_r+0xa0>
 80067a2:	4623      	mov	r3, r4
 80067a4:	6864      	ldr	r4, [r4, #4]
 80067a6:	e7b2      	b.n	800670e <_malloc_r+0x32>
 80067a8:	4634      	mov	r4, r6
 80067aa:	6876      	ldr	r6, [r6, #4]
 80067ac:	e7b9      	b.n	8006722 <_malloc_r+0x46>
 80067ae:	230c      	movs	r3, #12
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4638      	mov	r0, r7
 80067b4:	f000 ff76 	bl	80076a4 <__malloc_unlock>
 80067b8:	e7a1      	b.n	80066fe <_malloc_r+0x22>
 80067ba:	6025      	str	r5, [r4, #0]
 80067bc:	e7de      	b.n	800677c <_malloc_r+0xa0>
 80067be:	bf00      	nop
 80067c0:	20000474 	.word	0x20000474

080067c4 <__ssputs_r>:
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	688e      	ldr	r6, [r1, #8]
 80067ca:	429e      	cmp	r6, r3
 80067cc:	4682      	mov	sl, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	4690      	mov	r8, r2
 80067d2:	461f      	mov	r7, r3
 80067d4:	d838      	bhi.n	8006848 <__ssputs_r+0x84>
 80067d6:	898a      	ldrh	r2, [r1, #12]
 80067d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067dc:	d032      	beq.n	8006844 <__ssputs_r+0x80>
 80067de:	6825      	ldr	r5, [r4, #0]
 80067e0:	6909      	ldr	r1, [r1, #16]
 80067e2:	eba5 0901 	sub.w	r9, r5, r1
 80067e6:	6965      	ldr	r5, [r4, #20]
 80067e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067f0:	3301      	adds	r3, #1
 80067f2:	444b      	add	r3, r9
 80067f4:	106d      	asrs	r5, r5, #1
 80067f6:	429d      	cmp	r5, r3
 80067f8:	bf38      	it	cc
 80067fa:	461d      	movcc	r5, r3
 80067fc:	0553      	lsls	r3, r2, #21
 80067fe:	d531      	bpl.n	8006864 <__ssputs_r+0xa0>
 8006800:	4629      	mov	r1, r5
 8006802:	f7ff ff6b 	bl	80066dc <_malloc_r>
 8006806:	4606      	mov	r6, r0
 8006808:	b950      	cbnz	r0, 8006820 <__ssputs_r+0x5c>
 800680a:	230c      	movs	r3, #12
 800680c:	f8ca 3000 	str.w	r3, [sl]
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	6921      	ldr	r1, [r4, #16]
 8006822:	464a      	mov	r2, r9
 8006824:	f000 ff10 	bl	8007648 <memcpy>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	6126      	str	r6, [r4, #16]
 8006836:	6165      	str	r5, [r4, #20]
 8006838:	444e      	add	r6, r9
 800683a:	eba5 0509 	sub.w	r5, r5, r9
 800683e:	6026      	str	r6, [r4, #0]
 8006840:	60a5      	str	r5, [r4, #8]
 8006842:	463e      	mov	r6, r7
 8006844:	42be      	cmp	r6, r7
 8006846:	d900      	bls.n	800684a <__ssputs_r+0x86>
 8006848:	463e      	mov	r6, r7
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	4632      	mov	r2, r6
 800684e:	4641      	mov	r1, r8
 8006850:	f000 ff08 	bl	8007664 <memmove>
 8006854:	68a3      	ldr	r3, [r4, #8]
 8006856:	1b9b      	subs	r3, r3, r6
 8006858:	60a3      	str	r3, [r4, #8]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	4433      	add	r3, r6
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	2000      	movs	r0, #0
 8006862:	e7db      	b.n	800681c <__ssputs_r+0x58>
 8006864:	462a      	mov	r2, r5
 8006866:	f000 ff23 	bl	80076b0 <_realloc_r>
 800686a:	4606      	mov	r6, r0
 800686c:	2800      	cmp	r0, #0
 800686e:	d1e1      	bne.n	8006834 <__ssputs_r+0x70>
 8006870:	6921      	ldr	r1, [r4, #16]
 8006872:	4650      	mov	r0, sl
 8006874:	f7ff fec6 	bl	8006604 <_free_r>
 8006878:	e7c7      	b.n	800680a <__ssputs_r+0x46>
	...

0800687c <_svfiprintf_r>:
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	4698      	mov	r8, r3
 8006882:	898b      	ldrh	r3, [r1, #12]
 8006884:	061b      	lsls	r3, r3, #24
 8006886:	b09d      	sub	sp, #116	; 0x74
 8006888:	4607      	mov	r7, r0
 800688a:	460d      	mov	r5, r1
 800688c:	4614      	mov	r4, r2
 800688e:	d50e      	bpl.n	80068ae <_svfiprintf_r+0x32>
 8006890:	690b      	ldr	r3, [r1, #16]
 8006892:	b963      	cbnz	r3, 80068ae <_svfiprintf_r+0x32>
 8006894:	2140      	movs	r1, #64	; 0x40
 8006896:	f7ff ff21 	bl	80066dc <_malloc_r>
 800689a:	6028      	str	r0, [r5, #0]
 800689c:	6128      	str	r0, [r5, #16]
 800689e:	b920      	cbnz	r0, 80068aa <_svfiprintf_r+0x2e>
 80068a0:	230c      	movs	r3, #12
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e0d1      	b.n	8006a4e <_svfiprintf_r+0x1d2>
 80068aa:	2340      	movs	r3, #64	; 0x40
 80068ac:	616b      	str	r3, [r5, #20]
 80068ae:	2300      	movs	r3, #0
 80068b0:	9309      	str	r3, [sp, #36]	; 0x24
 80068b2:	2320      	movs	r3, #32
 80068b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068bc:	2330      	movs	r3, #48	; 0x30
 80068be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a68 <_svfiprintf_r+0x1ec>
 80068c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c6:	f04f 0901 	mov.w	r9, #1
 80068ca:	4623      	mov	r3, r4
 80068cc:	469a      	mov	sl, r3
 80068ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068d2:	b10a      	cbz	r2, 80068d8 <_svfiprintf_r+0x5c>
 80068d4:	2a25      	cmp	r2, #37	; 0x25
 80068d6:	d1f9      	bne.n	80068cc <_svfiprintf_r+0x50>
 80068d8:	ebba 0b04 	subs.w	fp, sl, r4
 80068dc:	d00b      	beq.n	80068f6 <_svfiprintf_r+0x7a>
 80068de:	465b      	mov	r3, fp
 80068e0:	4622      	mov	r2, r4
 80068e2:	4629      	mov	r1, r5
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff ff6d 	bl	80067c4 <__ssputs_r>
 80068ea:	3001      	adds	r0, #1
 80068ec:	f000 80aa 	beq.w	8006a44 <_svfiprintf_r+0x1c8>
 80068f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f2:	445a      	add	r2, fp
 80068f4:	9209      	str	r2, [sp, #36]	; 0x24
 80068f6:	f89a 3000 	ldrb.w	r3, [sl]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80a2 	beq.w	8006a44 <_svfiprintf_r+0x1c8>
 8006900:	2300      	movs	r3, #0
 8006902:	f04f 32ff 	mov.w	r2, #4294967295
 8006906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800690a:	f10a 0a01 	add.w	sl, sl, #1
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	9307      	str	r3, [sp, #28]
 8006912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006916:	931a      	str	r3, [sp, #104]	; 0x68
 8006918:	4654      	mov	r4, sl
 800691a:	2205      	movs	r2, #5
 800691c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006920:	4851      	ldr	r0, [pc, #324]	; (8006a68 <_svfiprintf_r+0x1ec>)
 8006922:	f7f9 fc8d 	bl	8000240 <memchr>
 8006926:	9a04      	ldr	r2, [sp, #16]
 8006928:	b9d8      	cbnz	r0, 8006962 <_svfiprintf_r+0xe6>
 800692a:	06d0      	lsls	r0, r2, #27
 800692c:	bf44      	itt	mi
 800692e:	2320      	movmi	r3, #32
 8006930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006934:	0711      	lsls	r1, r2, #28
 8006936:	bf44      	itt	mi
 8006938:	232b      	movmi	r3, #43	; 0x2b
 800693a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800693e:	f89a 3000 	ldrb.w	r3, [sl]
 8006942:	2b2a      	cmp	r3, #42	; 0x2a
 8006944:	d015      	beq.n	8006972 <_svfiprintf_r+0xf6>
 8006946:	9a07      	ldr	r2, [sp, #28]
 8006948:	4654      	mov	r4, sl
 800694a:	2000      	movs	r0, #0
 800694c:	f04f 0c0a 	mov.w	ip, #10
 8006950:	4621      	mov	r1, r4
 8006952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006956:	3b30      	subs	r3, #48	; 0x30
 8006958:	2b09      	cmp	r3, #9
 800695a:	d94e      	bls.n	80069fa <_svfiprintf_r+0x17e>
 800695c:	b1b0      	cbz	r0, 800698c <_svfiprintf_r+0x110>
 800695e:	9207      	str	r2, [sp, #28]
 8006960:	e014      	b.n	800698c <_svfiprintf_r+0x110>
 8006962:	eba0 0308 	sub.w	r3, r0, r8
 8006966:	fa09 f303 	lsl.w	r3, r9, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	46a2      	mov	sl, r4
 8006970:	e7d2      	b.n	8006918 <_svfiprintf_r+0x9c>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	1d19      	adds	r1, r3, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	9103      	str	r1, [sp, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	bfbb      	ittet	lt
 800697e:	425b      	neglt	r3, r3
 8006980:	f042 0202 	orrlt.w	r2, r2, #2
 8006984:	9307      	strge	r3, [sp, #28]
 8006986:	9307      	strlt	r3, [sp, #28]
 8006988:	bfb8      	it	lt
 800698a:	9204      	strlt	r2, [sp, #16]
 800698c:	7823      	ldrb	r3, [r4, #0]
 800698e:	2b2e      	cmp	r3, #46	; 0x2e
 8006990:	d10c      	bne.n	80069ac <_svfiprintf_r+0x130>
 8006992:	7863      	ldrb	r3, [r4, #1]
 8006994:	2b2a      	cmp	r3, #42	; 0x2a
 8006996:	d135      	bne.n	8006a04 <_svfiprintf_r+0x188>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9203      	str	r2, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfb8      	it	lt
 80069a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a8:	3402      	adds	r4, #2
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a78 <_svfiprintf_r+0x1fc>
 80069b0:	7821      	ldrb	r1, [r4, #0]
 80069b2:	2203      	movs	r2, #3
 80069b4:	4650      	mov	r0, sl
 80069b6:	f7f9 fc43 	bl	8000240 <memchr>
 80069ba:	b140      	cbz	r0, 80069ce <_svfiprintf_r+0x152>
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	eba0 000a 	sub.w	r0, r0, sl
 80069c2:	fa03 f000 	lsl.w	r0, r3, r0
 80069c6:	9b04      	ldr	r3, [sp, #16]
 80069c8:	4303      	orrs	r3, r0
 80069ca:	3401      	adds	r4, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d2:	4826      	ldr	r0, [pc, #152]	; (8006a6c <_svfiprintf_r+0x1f0>)
 80069d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d8:	2206      	movs	r2, #6
 80069da:	f7f9 fc31 	bl	8000240 <memchr>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d038      	beq.n	8006a54 <_svfiprintf_r+0x1d8>
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <_svfiprintf_r+0x1f4>)
 80069e4:	bb1b      	cbnz	r3, 8006a2e <_svfiprintf_r+0x1b2>
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	3307      	adds	r3, #7
 80069ea:	f023 0307 	bic.w	r3, r3, #7
 80069ee:	3308      	adds	r3, #8
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f4:	4433      	add	r3, r6
 80069f6:	9309      	str	r3, [sp, #36]	; 0x24
 80069f8:	e767      	b.n	80068ca <_svfiprintf_r+0x4e>
 80069fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80069fe:	460c      	mov	r4, r1
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7a5      	b.n	8006950 <_svfiprintf_r+0xd4>
 8006a04:	2300      	movs	r3, #0
 8006a06:	3401      	adds	r4, #1
 8006a08:	9305      	str	r3, [sp, #20]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f04f 0c0a 	mov.w	ip, #10
 8006a10:	4620      	mov	r0, r4
 8006a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a16:	3a30      	subs	r2, #48	; 0x30
 8006a18:	2a09      	cmp	r2, #9
 8006a1a:	d903      	bls.n	8006a24 <_svfiprintf_r+0x1a8>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0c5      	beq.n	80069ac <_svfiprintf_r+0x130>
 8006a20:	9105      	str	r1, [sp, #20]
 8006a22:	e7c3      	b.n	80069ac <_svfiprintf_r+0x130>
 8006a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a28:	4604      	mov	r4, r0
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e7f0      	b.n	8006a10 <_svfiprintf_r+0x194>
 8006a2e:	ab03      	add	r3, sp, #12
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	462a      	mov	r2, r5
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <_svfiprintf_r+0x1f8>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f3af 8000 	nop.w
 8006a3e:	1c42      	adds	r2, r0, #1
 8006a40:	4606      	mov	r6, r0
 8006a42:	d1d6      	bne.n	80069f2 <_svfiprintf_r+0x176>
 8006a44:	89ab      	ldrh	r3, [r5, #12]
 8006a46:	065b      	lsls	r3, r3, #25
 8006a48:	f53f af2c 	bmi.w	80068a4 <_svfiprintf_r+0x28>
 8006a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a4e:	b01d      	add	sp, #116	; 0x74
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <_svfiprintf_r+0x1f8>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f000 f9d4 	bl	8006e0c <_printf_i>
 8006a64:	e7eb      	b.n	8006a3e <_svfiprintf_r+0x1c2>
 8006a66:	bf00      	nop
 8006a68:	08007b95 	.word	0x08007b95
 8006a6c:	08007b9f 	.word	0x08007b9f
 8006a70:	00000000 	.word	0x00000000
 8006a74:	080067c5 	.word	0x080067c5
 8006a78:	08007b9b 	.word	0x08007b9b

08006a7c <__sfputc_r>:
 8006a7c:	6893      	ldr	r3, [r2, #8]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	b410      	push	{r4}
 8006a84:	6093      	str	r3, [r2, #8]
 8006a86:	da08      	bge.n	8006a9a <__sfputc_r+0x1e>
 8006a88:	6994      	ldr	r4, [r2, #24]
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	db01      	blt.n	8006a92 <__sfputc_r+0x16>
 8006a8e:	290a      	cmp	r1, #10
 8006a90:	d103      	bne.n	8006a9a <__sfputc_r+0x1e>
 8006a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a96:	f000 baef 	b.w	8007078 <__swbuf_r>
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	1c58      	adds	r0, r3, #1
 8006a9e:	6010      	str	r0, [r2, #0]
 8006aa0:	7019      	strb	r1, [r3, #0]
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <__sfputs_r>:
 8006aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	18d5      	adds	r5, r2, r3
 8006ab4:	42ac      	cmp	r4, r5
 8006ab6:	d101      	bne.n	8006abc <__sfputs_r+0x12>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e007      	b.n	8006acc <__sfputs_r+0x22>
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	463a      	mov	r2, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffda 	bl	8006a7c <__sfputc_r>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d1f3      	bne.n	8006ab4 <__sfputs_r+0xa>
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad0 <_vfiprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	b09d      	sub	sp, #116	; 0x74
 8006ad8:	4614      	mov	r4, r2
 8006ada:	4698      	mov	r8, r3
 8006adc:	4606      	mov	r6, r0
 8006ade:	b118      	cbz	r0, 8006ae8 <_vfiprintf_r+0x18>
 8006ae0:	6983      	ldr	r3, [r0, #24]
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <_vfiprintf_r+0x18>
 8006ae4:	f000 fcaa 	bl	800743c <__sinit>
 8006ae8:	4b89      	ldr	r3, [pc, #548]	; (8006d10 <_vfiprintf_r+0x240>)
 8006aea:	429d      	cmp	r5, r3
 8006aec:	d11b      	bne.n	8006b26 <_vfiprintf_r+0x56>
 8006aee:	6875      	ldr	r5, [r6, #4]
 8006af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d405      	bmi.n	8006b02 <_vfiprintf_r+0x32>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	059a      	lsls	r2, r3, #22
 8006afa:	d402      	bmi.n	8006b02 <_vfiprintf_r+0x32>
 8006afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006afe:	f000 fd3b 	bl	8007578 <__retarget_lock_acquire_recursive>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	071b      	lsls	r3, r3, #28
 8006b06:	d501      	bpl.n	8006b0c <_vfiprintf_r+0x3c>
 8006b08:	692b      	ldr	r3, [r5, #16]
 8006b0a:	b9eb      	cbnz	r3, 8006b48 <_vfiprintf_r+0x78>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 fb04 	bl	800711c <__swsetup_r>
 8006b14:	b1c0      	cbz	r0, 8006b48 <_vfiprintf_r+0x78>
 8006b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b18:	07dc      	lsls	r4, r3, #31
 8006b1a:	d50e      	bpl.n	8006b3a <_vfiprintf_r+0x6a>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	b01d      	add	sp, #116	; 0x74
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	4b7b      	ldr	r3, [pc, #492]	; (8006d14 <_vfiprintf_r+0x244>)
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	d101      	bne.n	8006b30 <_vfiprintf_r+0x60>
 8006b2c:	68b5      	ldr	r5, [r6, #8]
 8006b2e:	e7df      	b.n	8006af0 <_vfiprintf_r+0x20>
 8006b30:	4b79      	ldr	r3, [pc, #484]	; (8006d18 <_vfiprintf_r+0x248>)
 8006b32:	429d      	cmp	r5, r3
 8006b34:	bf08      	it	eq
 8006b36:	68f5      	ldreq	r5, [r6, #12]
 8006b38:	e7da      	b.n	8006af0 <_vfiprintf_r+0x20>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	0598      	lsls	r0, r3, #22
 8006b3e:	d4ed      	bmi.n	8006b1c <_vfiprintf_r+0x4c>
 8006b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b42:	f000 fd1a 	bl	800757a <__retarget_lock_release_recursive>
 8006b46:	e7e9      	b.n	8006b1c <_vfiprintf_r+0x4c>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b56:	2330      	movs	r3, #48	; 0x30
 8006b58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d1c <_vfiprintf_r+0x24c>
 8006b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b60:	f04f 0901 	mov.w	r9, #1
 8006b64:	4623      	mov	r3, r4
 8006b66:	469a      	mov	sl, r3
 8006b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b6c:	b10a      	cbz	r2, 8006b72 <_vfiprintf_r+0xa2>
 8006b6e:	2a25      	cmp	r2, #37	; 0x25
 8006b70:	d1f9      	bne.n	8006b66 <_vfiprintf_r+0x96>
 8006b72:	ebba 0b04 	subs.w	fp, sl, r4
 8006b76:	d00b      	beq.n	8006b90 <_vfiprintf_r+0xc0>
 8006b78:	465b      	mov	r3, fp
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ff93 	bl	8006aaa <__sfputs_r>
 8006b84:	3001      	adds	r0, #1
 8006b86:	f000 80aa 	beq.w	8006cde <_vfiprintf_r+0x20e>
 8006b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8c:	445a      	add	r2, fp
 8006b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b90:	f89a 3000 	ldrb.w	r3, [sl]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80a2 	beq.w	8006cde <_vfiprintf_r+0x20e>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ba4:	f10a 0a01 	add.w	sl, sl, #1
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	9307      	str	r3, [sp, #28]
 8006bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8006bb2:	4654      	mov	r4, sl
 8006bb4:	2205      	movs	r2, #5
 8006bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bba:	4858      	ldr	r0, [pc, #352]	; (8006d1c <_vfiprintf_r+0x24c>)
 8006bbc:	f7f9 fb40 	bl	8000240 <memchr>
 8006bc0:	9a04      	ldr	r2, [sp, #16]
 8006bc2:	b9d8      	cbnz	r0, 8006bfc <_vfiprintf_r+0x12c>
 8006bc4:	06d1      	lsls	r1, r2, #27
 8006bc6:	bf44      	itt	mi
 8006bc8:	2320      	movmi	r3, #32
 8006bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bce:	0713      	lsls	r3, r2, #28
 8006bd0:	bf44      	itt	mi
 8006bd2:	232b      	movmi	r3, #43	; 0x2b
 8006bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bde:	d015      	beq.n	8006c0c <_vfiprintf_r+0x13c>
 8006be0:	9a07      	ldr	r2, [sp, #28]
 8006be2:	4654      	mov	r4, sl
 8006be4:	2000      	movs	r0, #0
 8006be6:	f04f 0c0a 	mov.w	ip, #10
 8006bea:	4621      	mov	r1, r4
 8006bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf0:	3b30      	subs	r3, #48	; 0x30
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	d94e      	bls.n	8006c94 <_vfiprintf_r+0x1c4>
 8006bf6:	b1b0      	cbz	r0, 8006c26 <_vfiprintf_r+0x156>
 8006bf8:	9207      	str	r2, [sp, #28]
 8006bfa:	e014      	b.n	8006c26 <_vfiprintf_r+0x156>
 8006bfc:	eba0 0308 	sub.w	r3, r0, r8
 8006c00:	fa09 f303 	lsl.w	r3, r9, r3
 8006c04:	4313      	orrs	r3, r2
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	46a2      	mov	sl, r4
 8006c0a:	e7d2      	b.n	8006bb2 <_vfiprintf_r+0xe2>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1d19      	adds	r1, r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfbb      	ittet	lt
 8006c18:	425b      	neglt	r3, r3
 8006c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c1e:	9307      	strge	r3, [sp, #28]
 8006c20:	9307      	strlt	r3, [sp, #28]
 8006c22:	bfb8      	it	lt
 8006c24:	9204      	strlt	r2, [sp, #16]
 8006c26:	7823      	ldrb	r3, [r4, #0]
 8006c28:	2b2e      	cmp	r3, #46	; 0x2e
 8006c2a:	d10c      	bne.n	8006c46 <_vfiprintf_r+0x176>
 8006c2c:	7863      	ldrb	r3, [r4, #1]
 8006c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c30:	d135      	bne.n	8006c9e <_vfiprintf_r+0x1ce>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	1d1a      	adds	r2, r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	9203      	str	r2, [sp, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfb8      	it	lt
 8006c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c42:	3402      	adds	r4, #2
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d2c <_vfiprintf_r+0x25c>
 8006c4a:	7821      	ldrb	r1, [r4, #0]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	4650      	mov	r0, sl
 8006c50:	f7f9 faf6 	bl	8000240 <memchr>
 8006c54:	b140      	cbz	r0, 8006c68 <_vfiprintf_r+0x198>
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	eba0 000a 	sub.w	r0, r0, sl
 8006c5c:	fa03 f000 	lsl.w	r0, r3, r0
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	4303      	orrs	r3, r0
 8006c64:	3401      	adds	r4, #1
 8006c66:	9304      	str	r3, [sp, #16]
 8006c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6c:	482c      	ldr	r0, [pc, #176]	; (8006d20 <_vfiprintf_r+0x250>)
 8006c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c72:	2206      	movs	r2, #6
 8006c74:	f7f9 fae4 	bl	8000240 <memchr>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d03f      	beq.n	8006cfc <_vfiprintf_r+0x22c>
 8006c7c:	4b29      	ldr	r3, [pc, #164]	; (8006d24 <_vfiprintf_r+0x254>)
 8006c7e:	bb1b      	cbnz	r3, 8006cc8 <_vfiprintf_r+0x1f8>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	3307      	adds	r3, #7
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	3308      	adds	r3, #8
 8006c8a:	9303      	str	r3, [sp, #12]
 8006c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8e:	443b      	add	r3, r7
 8006c90:	9309      	str	r3, [sp, #36]	; 0x24
 8006c92:	e767      	b.n	8006b64 <_vfiprintf_r+0x94>
 8006c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c98:	460c      	mov	r4, r1
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e7a5      	b.n	8006bea <_vfiprintf_r+0x11a>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f04f 0c0a 	mov.w	ip, #10
 8006caa:	4620      	mov	r0, r4
 8006cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb0:	3a30      	subs	r2, #48	; 0x30
 8006cb2:	2a09      	cmp	r2, #9
 8006cb4:	d903      	bls.n	8006cbe <_vfiprintf_r+0x1ee>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0c5      	beq.n	8006c46 <_vfiprintf_r+0x176>
 8006cba:	9105      	str	r1, [sp, #20]
 8006cbc:	e7c3      	b.n	8006c46 <_vfiprintf_r+0x176>
 8006cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e7f0      	b.n	8006caa <_vfiprintf_r+0x1da>
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <_vfiprintf_r+0x258>)
 8006cd0:	a904      	add	r1, sp, #16
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	4607      	mov	r7, r0
 8006cda:	1c78      	adds	r0, r7, #1
 8006cdc:	d1d6      	bne.n	8006c8c <_vfiprintf_r+0x1bc>
 8006cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce0:	07d9      	lsls	r1, r3, #31
 8006ce2:	d405      	bmi.n	8006cf0 <_vfiprintf_r+0x220>
 8006ce4:	89ab      	ldrh	r3, [r5, #12]
 8006ce6:	059a      	lsls	r2, r3, #22
 8006ce8:	d402      	bmi.n	8006cf0 <_vfiprintf_r+0x220>
 8006cea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cec:	f000 fc45 	bl	800757a <__retarget_lock_release_recursive>
 8006cf0:	89ab      	ldrh	r3, [r5, #12]
 8006cf2:	065b      	lsls	r3, r3, #25
 8006cf4:	f53f af12 	bmi.w	8006b1c <_vfiprintf_r+0x4c>
 8006cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfa:	e711      	b.n	8006b20 <_vfiprintf_r+0x50>
 8006cfc:	ab03      	add	r3, sp, #12
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	462a      	mov	r2, r5
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <_vfiprintf_r+0x258>)
 8006d04:	a904      	add	r1, sp, #16
 8006d06:	4630      	mov	r0, r6
 8006d08:	f000 f880 	bl	8006e0c <_printf_i>
 8006d0c:	e7e4      	b.n	8006cd8 <_vfiprintf_r+0x208>
 8006d0e:	bf00      	nop
 8006d10:	08007be8 	.word	0x08007be8
 8006d14:	08007c08 	.word	0x08007c08
 8006d18:	08007bc8 	.word	0x08007bc8
 8006d1c:	08007b95 	.word	0x08007b95
 8006d20:	08007b9f 	.word	0x08007b9f
 8006d24:	00000000 	.word	0x00000000
 8006d28:	08006aab 	.word	0x08006aab
 8006d2c:	08007b9b 	.word	0x08007b9b

08006d30 <_printf_common>:
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	4699      	mov	r9, r3
 8006d38:	688a      	ldr	r2, [r1, #8]
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfb8      	it	lt
 8006d44:	4613      	movlt	r3, r2
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b10a      	cbz	r2, 8006d56 <_printf_common+0x26>
 8006d52:	3301      	adds	r3, #1
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	6833      	ldrmi	r3, [r6, #0]
 8006d5e:	3302      	addmi	r3, #2
 8006d60:	6033      	strmi	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d106      	bne.n	8006d78 <_printf_common+0x48>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	6832      	ldr	r2, [r6, #0]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dc26      	bgt.n	8006dc6 <_printf_common+0x96>
 8006d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d7c:	1e13      	subs	r3, r2, #0
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	0692      	lsls	r2, r2, #26
 8006d86:	d42b      	bmi.n	8006de0 <_printf_common+0xb0>
 8006d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d01e      	beq.n	8006dd4 <_printf_common+0xa4>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	68e5      	ldr	r5, [r4, #12]
 8006d9a:	6832      	ldr	r2, [r6, #0]
 8006d9c:	f003 0306 	and.w	r3, r3, #6
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	bf08      	it	eq
 8006da4:	1aad      	subeq	r5, r5, r2
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	bf0c      	ite	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	2500      	movne	r5, #0
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bfc4      	itt	gt
 8006db6:	1a9b      	subgt	r3, r3, r2
 8006db8:	18ed      	addgt	r5, r5, r3
 8006dba:	2600      	movs	r6, #0
 8006dbc:	341a      	adds	r4, #26
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d11a      	bne.n	8006df8 <_printf_common+0xc8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e008      	b.n	8006dd8 <_printf_common+0xa8>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4638      	mov	r0, r7
 8006dce:	47c0      	blx	r8
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_printf_common+0xac>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7c6      	b.n	8006d6e <_printf_common+0x3e>
 8006de0:	18e1      	adds	r1, r4, r3
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	2030      	movs	r0, #48	; 0x30
 8006de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dea:	4422      	add	r2, r4
 8006dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df4:	3302      	adds	r3, #2
 8006df6:	e7c7      	b.n	8006d88 <_printf_common+0x58>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa4>
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7d9      	b.n	8006dbe <_printf_common+0x8e>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	7e0f      	ldrb	r7, [r1, #24]
 8006e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e14:	2f78      	cmp	r7, #120	; 0x78
 8006e16:	4691      	mov	r9, r2
 8006e18:	4680      	mov	r8, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e22:	d807      	bhi.n	8006e34 <_printf_i+0x28>
 8006e24:	2f62      	cmp	r7, #98	; 0x62
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x32>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	f000 80d8 	beq.w	8006fde <_printf_i+0x1d2>
 8006e2e:	2f58      	cmp	r7, #88	; 0x58
 8006e30:	f000 80a3 	beq.w	8006f7a <_printf_i+0x16e>
 8006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e3c:	e03a      	b.n	8006eb4 <_printf_i+0xa8>
 8006e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e42:	2b15      	cmp	r3, #21
 8006e44:	d8f6      	bhi.n	8006e34 <_printf_i+0x28>
 8006e46:	a101      	add	r1, pc, #4	; (adr r1, 8006e4c <_printf_i+0x40>)
 8006e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006e35 	.word	0x08006e35
 8006e58:	08006e35 	.word	0x08006e35
 8006e5c:	08006e35 	.word	0x08006e35
 8006e60:	08006e35 	.word	0x08006e35
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e35 	.word	0x08006e35
 8006e6c:	08006e35 	.word	0x08006e35
 8006e70:	08006e35 	.word	0x08006e35
 8006e74:	08006e35 	.word	0x08006e35
 8006e78:	08006fc5 	.word	0x08006fc5
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006fa7 	.word	0x08006fa7
 8006e84:	08006e35 	.word	0x08006e35
 8006e88:	08006e35 	.word	0x08006e35
 8006e8c:	08006fe7 	.word	0x08006fe7
 8006e90:	08006e35 	.word	0x08006e35
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006e35 	.word	0x08006e35
 8006e9c:	08006e35 	.word	0x08006e35
 8006ea0:	08006faf 	.word	0x08006faf
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	602a      	str	r2, [r5, #0]
 8006eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0a3      	b.n	8007000 <_printf_i+0x1f4>
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	6829      	ldr	r1, [r5, #0]
 8006ebc:	0606      	lsls	r6, r0, #24
 8006ebe:	f101 0304 	add.w	r3, r1, #4
 8006ec2:	d50a      	bpl.n	8006eda <_printf_i+0xce>
 8006ec4:	680e      	ldr	r6, [r1, #0]
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	2e00      	cmp	r6, #0
 8006eca:	da03      	bge.n	8006ed4 <_printf_i+0xc8>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	4276      	negs	r6, r6
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	485e      	ldr	r0, [pc, #376]	; (8007050 <_printf_i+0x244>)
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	e019      	b.n	8006f0e <_printf_i+0x102>
 8006eda:	680e      	ldr	r6, [r1, #0]
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ee2:	bf18      	it	ne
 8006ee4:	b236      	sxthne	r6, r6
 8006ee6:	e7ef      	b.n	8006ec8 <_printf_i+0xbc>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	1d19      	adds	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	0601      	lsls	r1, r0, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xec>
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xf2>
 8006ef8:	0646      	lsls	r6, r0, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe8>
 8006efc:	881e      	ldrh	r6, [r3, #0]
 8006efe:	4854      	ldr	r0, [pc, #336]	; (8007050 <_printf_i+0x244>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6865      	ldr	r5, [r4, #4]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90e      	cbnz	r6, 8006f24 <_printf_i+0x118>
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d04d      	beq.n	8006fc0 <_printf_i+0x1b4>
 8006f24:	4615      	mov	r5, r2
 8006f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f34:	4637      	mov	r7, r6
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460e      	mov	r6, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x11a>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x14c>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07de      	lsls	r6, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x14c>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee2 	bl	8006d30 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14c      	bne.n	800700a <_printf_i+0x1fe>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	4835      	ldr	r0, [pc, #212]	; (8007050 <_printf_i+0x244>)
 8006f7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f88:	6029      	str	r1, [r5, #0]
 8006f8a:	061d      	lsls	r5, r3, #24
 8006f8c:	d514      	bpl.n	8006fb8 <_printf_i+0x1ac>
 8006f8e:	07df      	lsls	r7, r3, #31
 8006f90:	bf44      	itt	mi
 8006f92:	f043 0320 	orrmi.w	r3, r3, #32
 8006f96:	6023      	strmi	r3, [r4, #0]
 8006f98:	b91e      	cbnz	r6, 8006fa2 <_printf_i+0x196>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f023 0320 	bic.w	r3, r3, #32
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e7b0      	b.n	8006f08 <_printf_i+0xfc>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f043 0320 	orr.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	2378      	movs	r3, #120	; 0x78
 8006fb0:	4828      	ldr	r0, [pc, #160]	; (8007054 <_printf_i+0x248>)
 8006fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb6:	e7e3      	b.n	8006f80 <_printf_i+0x174>
 8006fb8:	0659      	lsls	r1, r3, #25
 8006fba:	bf48      	it	mi
 8006fbc:	b2b6      	uxthmi	r6, r6
 8006fbe:	e7e6      	b.n	8006f8e <_printf_i+0x182>
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	e7bb      	b.n	8006f3c <_printf_i+0x130>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	6826      	ldr	r6, [r4, #0]
 8006fc8:	6961      	ldr	r1, [r4, #20]
 8006fca:	1d18      	adds	r0, r3, #4
 8006fcc:	6028      	str	r0, [r5, #0]
 8006fce:	0635      	lsls	r5, r6, #24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0x1cc>
 8006fd4:	6019      	str	r1, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <_printf_i+0x1d2>
 8006fd8:	0670      	lsls	r0, r6, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0x1c8>
 8006fdc:	8019      	strh	r1, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	4615      	mov	r5, r2
 8006fe4:	e7ba      	b.n	8006f5c <_printf_i+0x150>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	602a      	str	r2, [r5, #0]
 8006fec:	681d      	ldr	r5, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7f9 f924 	bl	8000240 <memchr>
 8006ff8:	b108      	cbz	r0, 8006ffe <_printf_i+0x1f2>
 8006ffa:	1b40      	subs	r0, r0, r5
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	e7a8      	b.n	8006f5c <_printf_i+0x150>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	462a      	mov	r2, r5
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d0ab      	beq.n	8006f70 <_printf_i+0x164>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d413      	bmi.n	8007046 <_printf_i+0x23a>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4298      	cmp	r0, r3
 8007024:	bfb8      	it	lt
 8007026:	4618      	movlt	r0, r3
 8007028:	e7a4      	b.n	8006f74 <_printf_i+0x168>
 800702a:	2301      	movs	r3, #1
 800702c:	4632      	mov	r2, r6
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d09b      	beq.n	8006f70 <_printf_i+0x164>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf2      	bgt.n	800702a <_printf_i+0x21e>
 8007044:	e7eb      	b.n	800701e <_printf_i+0x212>
 8007046:	2500      	movs	r5, #0
 8007048:	f104 0619 	add.w	r6, r4, #25
 800704c:	e7f5      	b.n	800703a <_printf_i+0x22e>
 800704e:	bf00      	nop
 8007050:	08007ba6 	.word	0x08007ba6
 8007054:	08007bb7 	.word	0x08007bb7

08007058 <_sbrk_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d06      	ldr	r5, [pc, #24]	; (8007074 <_sbrk_r+0x1c>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7f9 fea6 	bl	8000db4 <_sbrk>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_sbrk_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_sbrk_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	20000480 	.word	0x20000480

08007078 <__swbuf_r>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	460e      	mov	r6, r1
 800707c:	4614      	mov	r4, r2
 800707e:	4605      	mov	r5, r0
 8007080:	b118      	cbz	r0, 800708a <__swbuf_r+0x12>
 8007082:	6983      	ldr	r3, [r0, #24]
 8007084:	b90b      	cbnz	r3, 800708a <__swbuf_r+0x12>
 8007086:	f000 f9d9 	bl	800743c <__sinit>
 800708a:	4b21      	ldr	r3, [pc, #132]	; (8007110 <__swbuf_r+0x98>)
 800708c:	429c      	cmp	r4, r3
 800708e:	d12b      	bne.n	80070e8 <__swbuf_r+0x70>
 8007090:	686c      	ldr	r4, [r5, #4]
 8007092:	69a3      	ldr	r3, [r4, #24]
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	071a      	lsls	r2, r3, #28
 800709a:	d52f      	bpl.n	80070fc <__swbuf_r+0x84>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	b36b      	cbz	r3, 80070fc <__swbuf_r+0x84>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	6820      	ldr	r0, [r4, #0]
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	b2f6      	uxtb	r6, r6
 80070aa:	4283      	cmp	r3, r0
 80070ac:	4637      	mov	r7, r6
 80070ae:	dc04      	bgt.n	80070ba <__swbuf_r+0x42>
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 f92e 	bl	8007314 <_fflush_r>
 80070b8:	bb30      	cbnz	r0, 8007108 <__swbuf_r+0x90>
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	3b01      	subs	r3, #1
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	701e      	strb	r6, [r3, #0]
 80070c8:	6963      	ldr	r3, [r4, #20]
 80070ca:	3001      	adds	r0, #1
 80070cc:	4283      	cmp	r3, r0
 80070ce:	d004      	beq.n	80070da <__swbuf_r+0x62>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	07db      	lsls	r3, r3, #31
 80070d4:	d506      	bpl.n	80070e4 <__swbuf_r+0x6c>
 80070d6:	2e0a      	cmp	r6, #10
 80070d8:	d104      	bne.n	80070e4 <__swbuf_r+0x6c>
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 f919 	bl	8007314 <_fflush_r>
 80070e2:	b988      	cbnz	r0, 8007108 <__swbuf_r+0x90>
 80070e4:	4638      	mov	r0, r7
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <__swbuf_r+0x9c>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	d101      	bne.n	80070f2 <__swbuf_r+0x7a>
 80070ee:	68ac      	ldr	r4, [r5, #8]
 80070f0:	e7cf      	b.n	8007092 <__swbuf_r+0x1a>
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <__swbuf_r+0xa0>)
 80070f4:	429c      	cmp	r4, r3
 80070f6:	bf08      	it	eq
 80070f8:	68ec      	ldreq	r4, [r5, #12]
 80070fa:	e7ca      	b.n	8007092 <__swbuf_r+0x1a>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f80c 	bl	800711c <__swsetup_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	d0cb      	beq.n	80070a0 <__swbuf_r+0x28>
 8007108:	f04f 37ff 	mov.w	r7, #4294967295
 800710c:	e7ea      	b.n	80070e4 <__swbuf_r+0x6c>
 800710e:	bf00      	nop
 8007110:	08007be8 	.word	0x08007be8
 8007114:	08007c08 	.word	0x08007c08
 8007118:	08007bc8 	.word	0x08007bc8

0800711c <__swsetup_r>:
 800711c:	4b32      	ldr	r3, [pc, #200]	; (80071e8 <__swsetup_r+0xcc>)
 800711e:	b570      	push	{r4, r5, r6, lr}
 8007120:	681d      	ldr	r5, [r3, #0]
 8007122:	4606      	mov	r6, r0
 8007124:	460c      	mov	r4, r1
 8007126:	b125      	cbz	r5, 8007132 <__swsetup_r+0x16>
 8007128:	69ab      	ldr	r3, [r5, #24]
 800712a:	b913      	cbnz	r3, 8007132 <__swsetup_r+0x16>
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f985 	bl	800743c <__sinit>
 8007132:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <__swsetup_r+0xd0>)
 8007134:	429c      	cmp	r4, r3
 8007136:	d10f      	bne.n	8007158 <__swsetup_r+0x3c>
 8007138:	686c      	ldr	r4, [r5, #4]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007140:	0719      	lsls	r1, r3, #28
 8007142:	d42c      	bmi.n	800719e <__swsetup_r+0x82>
 8007144:	06dd      	lsls	r5, r3, #27
 8007146:	d411      	bmi.n	800716c <__swsetup_r+0x50>
 8007148:	2309      	movs	r3, #9
 800714a:	6033      	str	r3, [r6, #0]
 800714c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	f04f 30ff 	mov.w	r0, #4294967295
 8007156:	e03e      	b.n	80071d6 <__swsetup_r+0xba>
 8007158:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <__swsetup_r+0xd4>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d101      	bne.n	8007162 <__swsetup_r+0x46>
 800715e:	68ac      	ldr	r4, [r5, #8]
 8007160:	e7eb      	b.n	800713a <__swsetup_r+0x1e>
 8007162:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <__swsetup_r+0xd8>)
 8007164:	429c      	cmp	r4, r3
 8007166:	bf08      	it	eq
 8007168:	68ec      	ldreq	r4, [r5, #12]
 800716a:	e7e6      	b.n	800713a <__swsetup_r+0x1e>
 800716c:	0758      	lsls	r0, r3, #29
 800716e:	d512      	bpl.n	8007196 <__swsetup_r+0x7a>
 8007170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007172:	b141      	cbz	r1, 8007186 <__swsetup_r+0x6a>
 8007174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007178:	4299      	cmp	r1, r3
 800717a:	d002      	beq.n	8007182 <__swsetup_r+0x66>
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff fa41 	bl	8006604 <_free_r>
 8007182:	2300      	movs	r3, #0
 8007184:	6363      	str	r3, [r4, #52]	; 0x34
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	2300      	movs	r3, #0
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f043 0308 	orr.w	r3, r3, #8
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	b94b      	cbnz	r3, 80071b6 <__swsetup_r+0x9a>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ac:	d003      	beq.n	80071b6 <__swsetup_r+0x9a>
 80071ae:	4621      	mov	r1, r4
 80071b0:	4630      	mov	r0, r6
 80071b2:	f000 fa09 	bl	80075c8 <__smakebuf_r>
 80071b6:	89a0      	ldrh	r0, [r4, #12]
 80071b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071bc:	f010 0301 	ands.w	r3, r0, #1
 80071c0:	d00a      	beq.n	80071d8 <__swsetup_r+0xbc>
 80071c2:	2300      	movs	r3, #0
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	6963      	ldr	r3, [r4, #20]
 80071c8:	425b      	negs	r3, r3
 80071ca:	61a3      	str	r3, [r4, #24]
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	b943      	cbnz	r3, 80071e2 <__swsetup_r+0xc6>
 80071d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071d4:	d1ba      	bne.n	800714c <__swsetup_r+0x30>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	0781      	lsls	r1, r0, #30
 80071da:	bf58      	it	pl
 80071dc:	6963      	ldrpl	r3, [r4, #20]
 80071de:	60a3      	str	r3, [r4, #8]
 80071e0:	e7f4      	b.n	80071cc <__swsetup_r+0xb0>
 80071e2:	2000      	movs	r0, #0
 80071e4:	e7f7      	b.n	80071d6 <__swsetup_r+0xba>
 80071e6:	bf00      	nop
 80071e8:	200001dc 	.word	0x200001dc
 80071ec:	08007be8 	.word	0x08007be8
 80071f0:	08007c08 	.word	0x08007c08
 80071f4:	08007bc8 	.word	0x08007bc8

080071f8 <abort>:
 80071f8:	b508      	push	{r3, lr}
 80071fa:	2006      	movs	r0, #6
 80071fc:	f000 fab0 	bl	8007760 <raise>
 8007200:	2001      	movs	r0, #1
 8007202:	f7f9 fd5f 	bl	8000cc4 <_exit>
	...

08007208 <__sflush_r>:
 8007208:	898a      	ldrh	r2, [r1, #12]
 800720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720e:	4605      	mov	r5, r0
 8007210:	0710      	lsls	r0, r2, #28
 8007212:	460c      	mov	r4, r1
 8007214:	d458      	bmi.n	80072c8 <__sflush_r+0xc0>
 8007216:	684b      	ldr	r3, [r1, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc05      	bgt.n	8007228 <__sflush_r+0x20>
 800721c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	dc02      	bgt.n	8007228 <__sflush_r+0x20>
 8007222:	2000      	movs	r0, #0
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800722a:	2e00      	cmp	r6, #0
 800722c:	d0f9      	beq.n	8007222 <__sflush_r+0x1a>
 800722e:	2300      	movs	r3, #0
 8007230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007234:	682f      	ldr	r7, [r5, #0]
 8007236:	602b      	str	r3, [r5, #0]
 8007238:	d032      	beq.n	80072a0 <__sflush_r+0x98>
 800723a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	075a      	lsls	r2, r3, #29
 8007240:	d505      	bpl.n	800724e <__sflush_r+0x46>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	1ac0      	subs	r0, r0, r3
 8007246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007248:	b10b      	cbz	r3, 800724e <__sflush_r+0x46>
 800724a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800724c:	1ac0      	subs	r0, r0, r3
 800724e:	2300      	movs	r3, #0
 8007250:	4602      	mov	r2, r0
 8007252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	4628      	mov	r0, r5
 8007258:	47b0      	blx	r6
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	d106      	bne.n	800726e <__sflush_r+0x66>
 8007260:	6829      	ldr	r1, [r5, #0]
 8007262:	291d      	cmp	r1, #29
 8007264:	d82c      	bhi.n	80072c0 <__sflush_r+0xb8>
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <__sflush_r+0x108>)
 8007268:	40ca      	lsrs	r2, r1
 800726a:	07d6      	lsls	r6, r2, #31
 800726c:	d528      	bpl.n	80072c0 <__sflush_r+0xb8>
 800726e:	2200      	movs	r2, #0
 8007270:	6062      	str	r2, [r4, #4]
 8007272:	04d9      	lsls	r1, r3, #19
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	d504      	bpl.n	8007284 <__sflush_r+0x7c>
 800727a:	1c42      	adds	r2, r0, #1
 800727c:	d101      	bne.n	8007282 <__sflush_r+0x7a>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b903      	cbnz	r3, 8007284 <__sflush_r+0x7c>
 8007282:	6560      	str	r0, [r4, #84]	; 0x54
 8007284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007286:	602f      	str	r7, [r5, #0]
 8007288:	2900      	cmp	r1, #0
 800728a:	d0ca      	beq.n	8007222 <__sflush_r+0x1a>
 800728c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <__sflush_r+0x92>
 8007294:	4628      	mov	r0, r5
 8007296:	f7ff f9b5 	bl	8006604 <_free_r>
 800729a:	2000      	movs	r0, #0
 800729c:	6360      	str	r0, [r4, #52]	; 0x34
 800729e:	e7c1      	b.n	8007224 <__sflush_r+0x1c>
 80072a0:	6a21      	ldr	r1, [r4, #32]
 80072a2:	2301      	movs	r3, #1
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b0      	blx	r6
 80072a8:	1c41      	adds	r1, r0, #1
 80072aa:	d1c7      	bne.n	800723c <__sflush_r+0x34>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0c4      	beq.n	800723c <__sflush_r+0x34>
 80072b2:	2b1d      	cmp	r3, #29
 80072b4:	d001      	beq.n	80072ba <__sflush_r+0xb2>
 80072b6:	2b16      	cmp	r3, #22
 80072b8:	d101      	bne.n	80072be <__sflush_r+0xb6>
 80072ba:	602f      	str	r7, [r5, #0]
 80072bc:	e7b1      	b.n	8007222 <__sflush_r+0x1a>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	e7ad      	b.n	8007224 <__sflush_r+0x1c>
 80072c8:	690f      	ldr	r7, [r1, #16]
 80072ca:	2f00      	cmp	r7, #0
 80072cc:	d0a9      	beq.n	8007222 <__sflush_r+0x1a>
 80072ce:	0793      	lsls	r3, r2, #30
 80072d0:	680e      	ldr	r6, [r1, #0]
 80072d2:	bf08      	it	eq
 80072d4:	694b      	ldreq	r3, [r1, #20]
 80072d6:	600f      	str	r7, [r1, #0]
 80072d8:	bf18      	it	ne
 80072da:	2300      	movne	r3, #0
 80072dc:	eba6 0807 	sub.w	r8, r6, r7
 80072e0:	608b      	str	r3, [r1, #8]
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	dd9c      	ble.n	8007222 <__sflush_r+0x1a>
 80072e8:	6a21      	ldr	r1, [r4, #32]
 80072ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072ec:	4643      	mov	r3, r8
 80072ee:	463a      	mov	r2, r7
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dc06      	bgt.n	8007306 <__sflush_r+0xfe>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e78e      	b.n	8007224 <__sflush_r+0x1c>
 8007306:	4407      	add	r7, r0
 8007308:	eba8 0800 	sub.w	r8, r8, r0
 800730c:	e7e9      	b.n	80072e2 <__sflush_r+0xda>
 800730e:	bf00      	nop
 8007310:	20400001 	.word	0x20400001

08007314 <_fflush_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b913      	cbnz	r3, 8007324 <_fflush_r+0x10>
 800731e:	2500      	movs	r5, #0
 8007320:	4628      	mov	r0, r5
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	b118      	cbz	r0, 800732e <_fflush_r+0x1a>
 8007326:	6983      	ldr	r3, [r0, #24]
 8007328:	b90b      	cbnz	r3, 800732e <_fflush_r+0x1a>
 800732a:	f000 f887 	bl	800743c <__sinit>
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <_fflush_r+0x6c>)
 8007330:	429c      	cmp	r4, r3
 8007332:	d11b      	bne.n	800736c <_fflush_r+0x58>
 8007334:	686c      	ldr	r4, [r5, #4]
 8007336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0ef      	beq.n	800731e <_fflush_r+0xa>
 800733e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007340:	07d0      	lsls	r0, r2, #31
 8007342:	d404      	bmi.n	800734e <_fflush_r+0x3a>
 8007344:	0599      	lsls	r1, r3, #22
 8007346:	d402      	bmi.n	800734e <_fflush_r+0x3a>
 8007348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800734a:	f000 f915 	bl	8007578 <__retarget_lock_acquire_recursive>
 800734e:	4628      	mov	r0, r5
 8007350:	4621      	mov	r1, r4
 8007352:	f7ff ff59 	bl	8007208 <__sflush_r>
 8007356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007358:	07da      	lsls	r2, r3, #31
 800735a:	4605      	mov	r5, r0
 800735c:	d4e0      	bmi.n	8007320 <_fflush_r+0xc>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	059b      	lsls	r3, r3, #22
 8007362:	d4dd      	bmi.n	8007320 <_fflush_r+0xc>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f000 f908 	bl	800757a <__retarget_lock_release_recursive>
 800736a:	e7d9      	b.n	8007320 <_fflush_r+0xc>
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <_fflush_r+0x70>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d101      	bne.n	8007376 <_fflush_r+0x62>
 8007372:	68ac      	ldr	r4, [r5, #8]
 8007374:	e7df      	b.n	8007336 <_fflush_r+0x22>
 8007376:	4b04      	ldr	r3, [pc, #16]	; (8007388 <_fflush_r+0x74>)
 8007378:	429c      	cmp	r4, r3
 800737a:	bf08      	it	eq
 800737c:	68ec      	ldreq	r4, [r5, #12]
 800737e:	e7da      	b.n	8007336 <_fflush_r+0x22>
 8007380:	08007be8 	.word	0x08007be8
 8007384:	08007c08 	.word	0x08007c08
 8007388:	08007bc8 	.word	0x08007bc8

0800738c <std>:
 800738c:	2300      	movs	r3, #0
 800738e:	b510      	push	{r4, lr}
 8007390:	4604      	mov	r4, r0
 8007392:	e9c0 3300 	strd	r3, r3, [r0]
 8007396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800739a:	6083      	str	r3, [r0, #8]
 800739c:	8181      	strh	r1, [r0, #12]
 800739e:	6643      	str	r3, [r0, #100]	; 0x64
 80073a0:	81c2      	strh	r2, [r0, #14]
 80073a2:	6183      	str	r3, [r0, #24]
 80073a4:	4619      	mov	r1, r3
 80073a6:	2208      	movs	r2, #8
 80073a8:	305c      	adds	r0, #92	; 0x5c
 80073aa:	f7fe ffe3 	bl	8006374 <memset>
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <std+0x38>)
 80073b0:	6263      	str	r3, [r4, #36]	; 0x24
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <std+0x3c>)
 80073b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073b6:	4b05      	ldr	r3, [pc, #20]	; (80073cc <std+0x40>)
 80073b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std+0x44>)
 80073bc:	6224      	str	r4, [r4, #32]
 80073be:	6323      	str	r3, [r4, #48]	; 0x30
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	bf00      	nop
 80073c4:	08007799 	.word	0x08007799
 80073c8:	080077bb 	.word	0x080077bb
 80073cc:	080077f3 	.word	0x080077f3
 80073d0:	08007817 	.word	0x08007817

080073d4 <_cleanup_r>:
 80073d4:	4901      	ldr	r1, [pc, #4]	; (80073dc <_cleanup_r+0x8>)
 80073d6:	f000 b8af 	b.w	8007538 <_fwalk_reent>
 80073da:	bf00      	nop
 80073dc:	08007315 	.word	0x08007315

080073e0 <__sfmoreglue>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	2268      	movs	r2, #104	; 0x68
 80073e4:	1e4d      	subs	r5, r1, #1
 80073e6:	4355      	muls	r5, r2
 80073e8:	460e      	mov	r6, r1
 80073ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ee:	f7ff f975 	bl	80066dc <_malloc_r>
 80073f2:	4604      	mov	r4, r0
 80073f4:	b140      	cbz	r0, 8007408 <__sfmoreglue+0x28>
 80073f6:	2100      	movs	r1, #0
 80073f8:	e9c0 1600 	strd	r1, r6, [r0]
 80073fc:	300c      	adds	r0, #12
 80073fe:	60a0      	str	r0, [r4, #8]
 8007400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007404:	f7fe ffb6 	bl	8006374 <memset>
 8007408:	4620      	mov	r0, r4
 800740a:	bd70      	pop	{r4, r5, r6, pc}

0800740c <__sfp_lock_acquire>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__sfp_lock_acquire+0x8>)
 800740e:	f000 b8b3 	b.w	8007578 <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	2000047d 	.word	0x2000047d

08007418 <__sfp_lock_release>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__sfp_lock_release+0x8>)
 800741a:	f000 b8ae 	b.w	800757a <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	2000047d 	.word	0x2000047d

08007424 <__sinit_lock_acquire>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__sinit_lock_acquire+0x8>)
 8007426:	f000 b8a7 	b.w	8007578 <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	2000047e 	.word	0x2000047e

08007430 <__sinit_lock_release>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__sinit_lock_release+0x8>)
 8007432:	f000 b8a2 	b.w	800757a <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	2000047e 	.word	0x2000047e

0800743c <__sinit>:
 800743c:	b510      	push	{r4, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	f7ff fff0 	bl	8007424 <__sinit_lock_acquire>
 8007444:	69a3      	ldr	r3, [r4, #24]
 8007446:	b11b      	cbz	r3, 8007450 <__sinit+0x14>
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f7ff bff0 	b.w	8007430 <__sinit_lock_release>
 8007450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007454:	6523      	str	r3, [r4, #80]	; 0x50
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <__sinit+0x68>)
 8007458:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <__sinit+0x6c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	62a2      	str	r2, [r4, #40]	; 0x28
 800745e:	42a3      	cmp	r3, r4
 8007460:	bf04      	itt	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	61a3      	streq	r3, [r4, #24]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f820 	bl	80074ac <__sfp>
 800746c:	6060      	str	r0, [r4, #4]
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f81c 	bl	80074ac <__sfp>
 8007474:	60a0      	str	r0, [r4, #8]
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f818 	bl	80074ac <__sfp>
 800747c:	2200      	movs	r2, #0
 800747e:	60e0      	str	r0, [r4, #12]
 8007480:	2104      	movs	r1, #4
 8007482:	6860      	ldr	r0, [r4, #4]
 8007484:	f7ff ff82 	bl	800738c <std>
 8007488:	68a0      	ldr	r0, [r4, #8]
 800748a:	2201      	movs	r2, #1
 800748c:	2109      	movs	r1, #9
 800748e:	f7ff ff7d 	bl	800738c <std>
 8007492:	68e0      	ldr	r0, [r4, #12]
 8007494:	2202      	movs	r2, #2
 8007496:	2112      	movs	r1, #18
 8007498:	f7ff ff78 	bl	800738c <std>
 800749c:	2301      	movs	r3, #1
 800749e:	61a3      	str	r3, [r4, #24]
 80074a0:	e7d2      	b.n	8007448 <__sinit+0xc>
 80074a2:	bf00      	nop
 80074a4:	080079e0 	.word	0x080079e0
 80074a8:	080073d5 	.word	0x080073d5

080074ac <__sfp>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	4607      	mov	r7, r0
 80074b0:	f7ff ffac 	bl	800740c <__sfp_lock_acquire>
 80074b4:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <__sfp+0x84>)
 80074b6:	681e      	ldr	r6, [r3, #0]
 80074b8:	69b3      	ldr	r3, [r6, #24]
 80074ba:	b913      	cbnz	r3, 80074c2 <__sfp+0x16>
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff ffbd 	bl	800743c <__sinit>
 80074c2:	3648      	adds	r6, #72	; 0x48
 80074c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	d503      	bpl.n	80074d4 <__sfp+0x28>
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	b30b      	cbz	r3, 8007514 <__sfp+0x68>
 80074d0:	6836      	ldr	r6, [r6, #0]
 80074d2:	e7f7      	b.n	80074c4 <__sfp+0x18>
 80074d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074d8:	b9d5      	cbnz	r5, 8007510 <__sfp+0x64>
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <__sfp+0x88>)
 80074dc:	60e3      	str	r3, [r4, #12]
 80074de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074e2:	6665      	str	r5, [r4, #100]	; 0x64
 80074e4:	f000 f847 	bl	8007576 <__retarget_lock_init_recursive>
 80074e8:	f7ff ff96 	bl	8007418 <__sfp_lock_release>
 80074ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074f4:	6025      	str	r5, [r4, #0]
 80074f6:	61a5      	str	r5, [r4, #24]
 80074f8:	2208      	movs	r2, #8
 80074fa:	4629      	mov	r1, r5
 80074fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007500:	f7fe ff38 	bl	8006374 <memset>
 8007504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800750c:	4620      	mov	r0, r4
 800750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007510:	3468      	adds	r4, #104	; 0x68
 8007512:	e7d9      	b.n	80074c8 <__sfp+0x1c>
 8007514:	2104      	movs	r1, #4
 8007516:	4638      	mov	r0, r7
 8007518:	f7ff ff62 	bl	80073e0 <__sfmoreglue>
 800751c:	4604      	mov	r4, r0
 800751e:	6030      	str	r0, [r6, #0]
 8007520:	2800      	cmp	r0, #0
 8007522:	d1d5      	bne.n	80074d0 <__sfp+0x24>
 8007524:	f7ff ff78 	bl	8007418 <__sfp_lock_release>
 8007528:	230c      	movs	r3, #12
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	e7ee      	b.n	800750c <__sfp+0x60>
 800752e:	bf00      	nop
 8007530:	080079e0 	.word	0x080079e0
 8007534:	ffff0001 	.word	0xffff0001

08007538 <_fwalk_reent>:
 8007538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800753c:	4606      	mov	r6, r0
 800753e:	4688      	mov	r8, r1
 8007540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007544:	2700      	movs	r7, #0
 8007546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800754a:	f1b9 0901 	subs.w	r9, r9, #1
 800754e:	d505      	bpl.n	800755c <_fwalk_reent+0x24>
 8007550:	6824      	ldr	r4, [r4, #0]
 8007552:	2c00      	cmp	r4, #0
 8007554:	d1f7      	bne.n	8007546 <_fwalk_reent+0xe>
 8007556:	4638      	mov	r0, r7
 8007558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755c:	89ab      	ldrh	r3, [r5, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d907      	bls.n	8007572 <_fwalk_reent+0x3a>
 8007562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007566:	3301      	adds	r3, #1
 8007568:	d003      	beq.n	8007572 <_fwalk_reent+0x3a>
 800756a:	4629      	mov	r1, r5
 800756c:	4630      	mov	r0, r6
 800756e:	47c0      	blx	r8
 8007570:	4307      	orrs	r7, r0
 8007572:	3568      	adds	r5, #104	; 0x68
 8007574:	e7e9      	b.n	800754a <_fwalk_reent+0x12>

08007576 <__retarget_lock_init_recursive>:
 8007576:	4770      	bx	lr

08007578 <__retarget_lock_acquire_recursive>:
 8007578:	4770      	bx	lr

0800757a <__retarget_lock_release_recursive>:
 800757a:	4770      	bx	lr

0800757c <__swhatbuf_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	460e      	mov	r6, r1
 8007580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007584:	2900      	cmp	r1, #0
 8007586:	b096      	sub	sp, #88	; 0x58
 8007588:	4614      	mov	r4, r2
 800758a:	461d      	mov	r5, r3
 800758c:	da08      	bge.n	80075a0 <__swhatbuf_r+0x24>
 800758e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	061a      	lsls	r2, r3, #24
 8007598:	d410      	bmi.n	80075bc <__swhatbuf_r+0x40>
 800759a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759e:	e00e      	b.n	80075be <__swhatbuf_r+0x42>
 80075a0:	466a      	mov	r2, sp
 80075a2:	f000 f95f 	bl	8007864 <_fstat_r>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	dbf1      	blt.n	800758e <__swhatbuf_r+0x12>
 80075aa:	9a01      	ldr	r2, [sp, #4]
 80075ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075b4:	425a      	negs	r2, r3
 80075b6:	415a      	adcs	r2, r3
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	e7ee      	b.n	800759a <__swhatbuf_r+0x1e>
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	2000      	movs	r0, #0
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	b016      	add	sp, #88	; 0x58
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080075c8 <__smakebuf_r>:
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075cc:	079d      	lsls	r5, r3, #30
 80075ce:	4606      	mov	r6, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	d507      	bpl.n	80075e4 <__smakebuf_r+0x1c>
 80075d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2301      	movs	r3, #1
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	b002      	add	sp, #8
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	ab01      	add	r3, sp, #4
 80075e6:	466a      	mov	r2, sp
 80075e8:	f7ff ffc8 	bl	800757c <__swhatbuf_r>
 80075ec:	9900      	ldr	r1, [sp, #0]
 80075ee:	4605      	mov	r5, r0
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7ff f873 	bl	80066dc <_malloc_r>
 80075f6:	b948      	cbnz	r0, 800760c <__smakebuf_r+0x44>
 80075f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d4ef      	bmi.n	80075e0 <__smakebuf_r+0x18>
 8007600:	f023 0303 	bic.w	r3, r3, #3
 8007604:	f043 0302 	orr.w	r3, r3, #2
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	e7e3      	b.n	80075d4 <__smakebuf_r+0xc>
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <__smakebuf_r+0x7c>)
 800760e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	9b00      	ldr	r3, [sp, #0]
 800761c:	6163      	str	r3, [r4, #20]
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	6120      	str	r0, [r4, #16]
 8007622:	b15b      	cbz	r3, 800763c <__smakebuf_r+0x74>
 8007624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f92d 	bl	8007888 <_isatty_r>
 800762e:	b128      	cbz	r0, 800763c <__smakebuf_r+0x74>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	89a0      	ldrh	r0, [r4, #12]
 800763e:	4305      	orrs	r5, r0
 8007640:	81a5      	strh	r5, [r4, #12]
 8007642:	e7cd      	b.n	80075e0 <__smakebuf_r+0x18>
 8007644:	080073d5 	.word	0x080073d5

08007648 <memcpy>:
 8007648:	440a      	add	r2, r1
 800764a:	4291      	cmp	r1, r2
 800764c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007650:	d100      	bne.n	8007654 <memcpy+0xc>
 8007652:	4770      	bx	lr
 8007654:	b510      	push	{r4, lr}
 8007656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765e:	4291      	cmp	r1, r2
 8007660:	d1f9      	bne.n	8007656 <memcpy+0xe>
 8007662:	bd10      	pop	{r4, pc}

08007664 <memmove>:
 8007664:	4288      	cmp	r0, r1
 8007666:	b510      	push	{r4, lr}
 8007668:	eb01 0402 	add.w	r4, r1, r2
 800766c:	d902      	bls.n	8007674 <memmove+0x10>
 800766e:	4284      	cmp	r4, r0
 8007670:	4623      	mov	r3, r4
 8007672:	d807      	bhi.n	8007684 <memmove+0x20>
 8007674:	1e43      	subs	r3, r0, #1
 8007676:	42a1      	cmp	r1, r4
 8007678:	d008      	beq.n	800768c <memmove+0x28>
 800767a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007682:	e7f8      	b.n	8007676 <memmove+0x12>
 8007684:	4402      	add	r2, r0
 8007686:	4601      	mov	r1, r0
 8007688:	428a      	cmp	r2, r1
 800768a:	d100      	bne.n	800768e <memmove+0x2a>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007696:	e7f7      	b.n	8007688 <memmove+0x24>

08007698 <__malloc_lock>:
 8007698:	4801      	ldr	r0, [pc, #4]	; (80076a0 <__malloc_lock+0x8>)
 800769a:	f7ff bf6d 	b.w	8007578 <__retarget_lock_acquire_recursive>
 800769e:	bf00      	nop
 80076a0:	2000047c 	.word	0x2000047c

080076a4 <__malloc_unlock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__malloc_unlock+0x8>)
 80076a6:	f7ff bf68 	b.w	800757a <__retarget_lock_release_recursive>
 80076aa:	bf00      	nop
 80076ac:	2000047c 	.word	0x2000047c

080076b0 <_realloc_r>:
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4680      	mov	r8, r0
 80076b6:	4614      	mov	r4, r2
 80076b8:	460e      	mov	r6, r1
 80076ba:	b921      	cbnz	r1, 80076c6 <_realloc_r+0x16>
 80076bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	4611      	mov	r1, r2
 80076c2:	f7ff b80b 	b.w	80066dc <_malloc_r>
 80076c6:	b92a      	cbnz	r2, 80076d4 <_realloc_r+0x24>
 80076c8:	f7fe ff9c 	bl	8006604 <_free_r>
 80076cc:	4625      	mov	r5, r4
 80076ce:	4628      	mov	r0, r5
 80076d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d4:	f000 f8fa 	bl	80078cc <_malloc_usable_size_r>
 80076d8:	4284      	cmp	r4, r0
 80076da:	4607      	mov	r7, r0
 80076dc:	d802      	bhi.n	80076e4 <_realloc_r+0x34>
 80076de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076e2:	d812      	bhi.n	800770a <_realloc_r+0x5a>
 80076e4:	4621      	mov	r1, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7fe fff8 	bl	80066dc <_malloc_r>
 80076ec:	4605      	mov	r5, r0
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d0ed      	beq.n	80076ce <_realloc_r+0x1e>
 80076f2:	42bc      	cmp	r4, r7
 80076f4:	4622      	mov	r2, r4
 80076f6:	4631      	mov	r1, r6
 80076f8:	bf28      	it	cs
 80076fa:	463a      	movcs	r2, r7
 80076fc:	f7ff ffa4 	bl	8007648 <memcpy>
 8007700:	4631      	mov	r1, r6
 8007702:	4640      	mov	r0, r8
 8007704:	f7fe ff7e 	bl	8006604 <_free_r>
 8007708:	e7e1      	b.n	80076ce <_realloc_r+0x1e>
 800770a:	4635      	mov	r5, r6
 800770c:	e7df      	b.n	80076ce <_realloc_r+0x1e>

0800770e <_raise_r>:
 800770e:	291f      	cmp	r1, #31
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	460d      	mov	r5, r1
 8007716:	d904      	bls.n	8007722 <_raise_r+0x14>
 8007718:	2316      	movs	r3, #22
 800771a:	6003      	str	r3, [r0, #0]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	bd38      	pop	{r3, r4, r5, pc}
 8007722:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007724:	b112      	cbz	r2, 800772c <_raise_r+0x1e>
 8007726:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800772a:	b94b      	cbnz	r3, 8007740 <_raise_r+0x32>
 800772c:	4620      	mov	r0, r4
 800772e:	f000 f831 	bl	8007794 <_getpid_r>
 8007732:	462a      	mov	r2, r5
 8007734:	4601      	mov	r1, r0
 8007736:	4620      	mov	r0, r4
 8007738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773c:	f000 b818 	b.w	8007770 <_kill_r>
 8007740:	2b01      	cmp	r3, #1
 8007742:	d00a      	beq.n	800775a <_raise_r+0x4c>
 8007744:	1c59      	adds	r1, r3, #1
 8007746:	d103      	bne.n	8007750 <_raise_r+0x42>
 8007748:	2316      	movs	r3, #22
 800774a:	6003      	str	r3, [r0, #0]
 800774c:	2001      	movs	r0, #1
 800774e:	e7e7      	b.n	8007720 <_raise_r+0x12>
 8007750:	2400      	movs	r4, #0
 8007752:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007756:	4628      	mov	r0, r5
 8007758:	4798      	blx	r3
 800775a:	2000      	movs	r0, #0
 800775c:	e7e0      	b.n	8007720 <_raise_r+0x12>
	...

08007760 <raise>:
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <raise+0xc>)
 8007762:	4601      	mov	r1, r0
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	f7ff bfd2 	b.w	800770e <_raise_r>
 800776a:	bf00      	nop
 800776c:	200001dc 	.word	0x200001dc

08007770 <_kill_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d07      	ldr	r5, [pc, #28]	; (8007790 <_kill_r+0x20>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	f7f9 fa91 	bl	8000ca4 <_kill>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	d102      	bne.n	800778c <_kill_r+0x1c>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	b103      	cbz	r3, 800778c <_kill_r+0x1c>
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	bf00      	nop
 8007790:	20000480 	.word	0x20000480

08007794 <_getpid_r>:
 8007794:	f7f9 ba7e 	b.w	8000c94 <_getpid>

08007798 <__sread>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	f000 f89c 	bl	80078dc <_read_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	bfab      	itete	ge
 80077a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077aa:	89a3      	ldrhlt	r3, [r4, #12]
 80077ac:	181b      	addge	r3, r3, r0
 80077ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077b2:	bfac      	ite	ge
 80077b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077b6:	81a3      	strhlt	r3, [r4, #12]
 80077b8:	bd10      	pop	{r4, pc}

080077ba <__swrite>:
 80077ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077be:	461f      	mov	r7, r3
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	05db      	lsls	r3, r3, #23
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	4616      	mov	r6, r2
 80077ca:	d505      	bpl.n	80077d8 <__swrite+0x1e>
 80077cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d0:	2302      	movs	r3, #2
 80077d2:	2200      	movs	r2, #0
 80077d4:	f000 f868 	bl	80078a8 <_lseek_r>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	4632      	mov	r2, r6
 80077e6:	463b      	mov	r3, r7
 80077e8:	4628      	mov	r0, r5
 80077ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ee:	f000 b817 	b.w	8007820 <_write_r>

080077f2 <__sseek>:
 80077f2:	b510      	push	{r4, lr}
 80077f4:	460c      	mov	r4, r1
 80077f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fa:	f000 f855 	bl	80078a8 <_lseek_r>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	bf15      	itete	ne
 8007804:	6560      	strne	r0, [r4, #84]	; 0x54
 8007806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800780a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800780e:	81a3      	strheq	r3, [r4, #12]
 8007810:	bf18      	it	ne
 8007812:	81a3      	strhne	r3, [r4, #12]
 8007814:	bd10      	pop	{r4, pc}

08007816 <__sclose>:
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 b813 	b.w	8007844 <_close_r>
	...

08007820 <_write_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d07      	ldr	r5, [pc, #28]	; (8007840 <_write_r+0x20>)
 8007824:	4604      	mov	r4, r0
 8007826:	4608      	mov	r0, r1
 8007828:	4611      	mov	r1, r2
 800782a:	2200      	movs	r2, #0
 800782c:	602a      	str	r2, [r5, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	f7f9 fa6f 	bl	8000d12 <_write>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_write_r+0x1e>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_write_r+0x1e>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20000480 	.word	0x20000480

08007844 <_close_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d06      	ldr	r5, [pc, #24]	; (8007860 <_close_r+0x1c>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7f9 fa7b 	bl	8000d4a <_close>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_close_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_close_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000480 	.word	0x20000480

08007864 <_fstat_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	; (8007884 <_fstat_r+0x20>)
 8007868:	2300      	movs	r3, #0
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	f7f9 fa76 	bl	8000d62 <_fstat>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	d102      	bne.n	8007880 <_fstat_r+0x1c>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	b103      	cbz	r3, 8007880 <_fstat_r+0x1c>
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	bd38      	pop	{r3, r4, r5, pc}
 8007882:	bf00      	nop
 8007884:	20000480 	.word	0x20000480

08007888 <_isatty_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	; (80078a4 <_isatty_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 fa75 	bl	8000d82 <_isatty>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_isatty_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_isatty_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000480 	.word	0x20000480

080078a8 <_lseek_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_lseek_r+0x20>)
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7f9 fa6e 	bl	8000d98 <_lseek>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_lseek_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_lseek_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000480 	.word	0x20000480

080078cc <_malloc_usable_size_r>:
 80078cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d0:	1f18      	subs	r0, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bfbc      	itt	lt
 80078d6:	580b      	ldrlt	r3, [r1, r0]
 80078d8:	18c0      	addlt	r0, r0, r3
 80078da:	4770      	bx	lr

080078dc <_read_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_read_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7f9 f9f4 	bl	8000cd8 <_read>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_read_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_read_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000480 	.word	0x20000480

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
