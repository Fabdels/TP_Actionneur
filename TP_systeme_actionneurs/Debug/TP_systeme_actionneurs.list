
TP_systeme_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080078b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  080079b8  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080079b8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a60  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  00034b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00037530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00038658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027606  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b1f  00000000  00000000  00060c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd406  00000000  00000000  0007578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172b93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  00172be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080075c4 	.word	0x080075c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080075c4 	.word	0x080075c4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f928 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f922 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f000 ff92 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f000 ff84 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 ff75 	bl	8001598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 fe7b 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 fe92 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09e      	sub	sp, #120	; 0x78
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
	int			speedValue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fcf6 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f95d 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f7ff ff7b 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006ee:	f000 fb01 	bl	8000cf4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006f2:	f000 fc19 	bl	8000f28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f6:	2100      	movs	r1, #0
 80006f8:	4898      	ldr	r0, [pc, #608]	; (800095c <main+0x28c>)
 80006fa:	f002 f9f9 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006fe:	2100      	movs	r1, #0
 8000700:	4896      	ldr	r0, [pc, #600]	; (800095c <main+0x28c>)
 8000702:	f003 f9c5 	bl	8003a90 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000706:	2104      	movs	r1, #4
 8000708:	4894      	ldr	r0, [pc, #592]	; (800095c <main+0x28c>)
 800070a:	f002 f9f1 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800070e:	2104      	movs	r1, #4
 8000710:	4892      	ldr	r0, [pc, #584]	; (800095c <main+0x28c>)
 8000712:	f003 f9bd 	bl	8003a90 <HAL_TIMEx_PWMN_Start>

  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000716:	463b      	mov	r3, r7
 8000718:	2224      	movs	r2, #36	; 0x24
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f005 fc8b 	bl	8006038 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fc84 	bl	8006038 <memset>
 8000730:	4b8b      	ldr	r3, [pc, #556]	; (8000960 <main+0x290>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	2100      	movs	r1, #0
 800073a:	488a      	ldr	r0, [pc, #552]	; (8000964 <main+0x294>)
 800073c:	f005 fc7c 	bl	8006038 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000740:	2201      	movs	r2, #1
 8000742:	4987      	ldr	r1, [pc, #540]	; (8000960 <main+0x290>)
 8000744:	4888      	ldr	r0, [pc, #544]	; (8000968 <main+0x298>)
 8000746:	f003 fcb9 	bl	80040bc <HAL_UART_Receive_IT>
  HAL_Delay(10);
 800074a:	200a      	movs	r0, #10
 800074c:	f000 fd32 	bl	80011b4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	2266      	movs	r2, #102	; 0x66
 8000756:	4985      	ldr	r1, [pc, #532]	; (800096c <main+0x29c>)
 8000758:	4883      	ldr	r0, [pc, #524]	; (8000968 <main+0x298>)
 800075a:	f003 fc18 	bl	8003f8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	2218      	movs	r2, #24
 8000764:	4982      	ldr	r1, [pc, #520]	; (8000970 <main+0x2a0>)
 8000766:	4880      	ldr	r0, [pc, #512]	; (8000968 <main+0x298>)
 8000768:	f003 fc11 	bl	8003f8e <HAL_UART_Transmit>
		HAL_Delay(1000);
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
		// uartRxReceived is set to 1 when a new character is received on uart 1


		if(uartRxReceived){
 800076c:	4b81      	ldr	r3, [pc, #516]	; (8000974 <main+0x2a4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d058      	beq.n	8000826 <main+0x156>
			switch(uartRxBuffer[0]){
 8000774:	4b7a      	ldr	r3, [pc, #488]	; (8000960 <main+0x290>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b0d      	cmp	r3, #13
 800077a:	d002      	beq.n	8000782 <main+0xb2>
 800077c:	2b7f      	cmp	r3, #127	; 0x7f
 800077e:	d02f      	beq.n	80007e0 <main+0x110>
 8000780:	e03e      	b.n	8000800 <main+0x130>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	2203      	movs	r2, #3
 8000788:	497b      	ldr	r1, [pc, #492]	; (8000978 <main+0x2a8>)
 800078a:	4877      	ldr	r0, [pc, #476]	; (8000968 <main+0x298>)
 800078c:	f003 fbff 	bl	8003f8e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000790:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000796:	4413      	add	r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4975      	ldr	r1, [pc, #468]	; (800097c <main+0x2ac>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fc6e 	bl	8006088 <strtok>
 80007ac:	4603      	mov	r3, r0
 80007ae:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007b0:	e00e      	b.n	80007d0 <main+0x100>
					argv[argc++] = token;
 80007b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	673a      	str	r2, [r7, #112]	; 0x70
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	3378      	adds	r3, #120	; 0x78
 80007bc:	443b      	add	r3, r7
 80007be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007c0:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80007c4:	496d      	ldr	r1, [pc, #436]	; (800097c <main+0x2ac>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f005 fc5e 	bl	8006088 <strtok>
 80007cc:	4603      	mov	r3, r0
 80007ce:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1ed      	bne.n	80007b2 <main+0xe2>





				idx_cmd = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80007de:	e01f      	b.n	8000820 <main+0x150>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80007e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007e2:	1e5a      	subs	r2, r3, #1
 80007e4:	677a      	str	r2, [r7, #116]	; 0x74
 80007e6:	3378      	adds	r3, #120	; 0x78
 80007e8:	443b      	add	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	2201      	movs	r2, #1
 80007f6:	495a      	ldr	r1, [pc, #360]	; (8000960 <main+0x290>)
 80007f8:	485b      	ldr	r0, [pc, #364]	; (8000968 <main+0x298>)
 80007fa:	f003 fbc8 	bl	8003f8e <HAL_UART_Transmit>
				break;
 80007fe:	e00f      	b.n	8000820 <main+0x150>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	677a      	str	r2, [r7, #116]	; 0x74
 8000806:	4a56      	ldr	r2, [pc, #344]	; (8000960 <main+0x290>)
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	3378      	adds	r3, #120	; 0x78
 800080c:	443b      	add	r3, r7
 800080e:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	2201      	movs	r2, #1
 8000818:	4951      	ldr	r1, [pc, #324]	; (8000960 <main+0x290>)
 800081a:	4853      	ldr	r0, [pc, #332]	; (8000968 <main+0x298>)
 800081c:	f003 fbb7 	bl	8003f8e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000820:	4b54      	ldr	r3, [pc, #336]	; (8000974 <main+0x2a4>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000828:	2b00      	cmp	r3, #0
 800082a:	d09f      	beq.n	800076c <main+0x9c>
			if(strcmp(argv[0],"set")==0){
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4954      	ldr	r1, [pc, #336]	; (8000980 <main+0x2b0>)
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fcf5 	bl	8000220 <strcmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d12d      	bne.n	8000898 <main+0x1c8>
				if(strcmp(argv[1],"PA5")==0){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4951      	ldr	r1, [pc, #324]	; (8000984 <main+0x2b4>)
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fced 	bl	8000220 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11d      	bne.n	8000888 <main+0x1b8>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fbc4 	bl	8005fdc <atoi>
 8000854:	4603      	mov	r3, r0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	2120      	movs	r1, #32
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f001 f81c 	bl	800189c <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fbb8 	bl	8005fdc <atoi>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4945      	ldr	r1, [pc, #276]	; (8000988 <main+0x2b8>)
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <main+0x294>)
 8000874:	f005 fbe8 	bl	8006048 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	2220      	movs	r2, #32
 800087e:	4939      	ldr	r1, [pc, #228]	; (8000964 <main+0x294>)
 8000880:	4839      	ldr	r0, [pc, #228]	; (8000968 <main+0x298>)
 8000882:	f003 fb84 	bl	8003f8e <HAL_UART_Transmit>
 8000886:	e05f      	b.n	8000948 <main+0x278>
				}

				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2214      	movs	r2, #20
 800088e:	493f      	ldr	r1, [pc, #252]	; (800098c <main+0x2bc>)
 8000890:	4835      	ldr	r0, [pc, #212]	; (8000968 <main+0x298>)
 8000892:	f003 fb7c 	bl	8003f8e <HAL_UART_Transmit>
 8000896:	e057      	b.n	8000948 <main+0x278>
				}
			}

			else if(strcmp(argv[0],"start")==0)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	493d      	ldr	r1, [pc, #244]	; (8000990 <main+0x2c0>)
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fcbf 	bl	8000220 <strcmp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <main+0x1e4>
			{
			HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2108      	movs	r1, #8
 80008ac:	4839      	ldr	r0, [pc, #228]	; (8000994 <main+0x2c4>)
 80008ae:	f000 fff5 	bl	800189c <HAL_GPIO_WritePin>
 80008b2:	e049      	b.n	8000948 <main+0x278>
			}

			else if (strcmp(argv[0],"speed=")==0)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4938      	ldr	r1, [pc, #224]	; (8000998 <main+0x2c8>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fcb1 	bl	8000220 <strcmp>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d12a      	bne.n	800091a <main+0x24a>
			{
				speedValue = 1000*(argv[1][0]-'0')+100*(argv[1][1]-'0')+10*(argv[1][2]-'0')+(argv[1][3]-'0');
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	3b30      	subs	r3, #48	; 0x30
 80008ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ce:	fb03 f202 	mul.w	r2, r3, r2
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3b30      	subs	r3, #48	; 0x30
 80008da:	2164      	movs	r1, #100	; 0x64
 80008dc:	fb01 f303 	mul.w	r3, r1, r3
 80008e0:	18d1      	adds	r1, r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3302      	adds	r3, #2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	18ca      	adds	r2, r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3303      	adds	r3, #3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3b30      	subs	r3, #48	; 0x30
 80008fe:	4413      	add	r3, r2
 8000900:	667b      	str	r3, [r7, #100]	; 0x64

				if (speedValue > MAX_SPEED_VALUE)
 8000902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000904:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000908:	4293      	cmp	r3, r2
 800090a:	dd02      	ble.n	8000912 <main+0x242>
				{
					speedValue = MAX_SPEED_VALUE;
 800090c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000910:	667b      	str	r3, [r7, #100]	; 0x64
				}

				TIM1->CCR1 = speedValue;
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <main+0x2cc>)
 8000914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000916:	6353      	str	r3, [r2, #52]	; 0x34
 8000918:	e016      	b.n	8000948 <main+0x278>

			}


			else if(strcmp(argv[0],"get")==0)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	4920      	ldr	r1, [pc, #128]	; (80009a0 <main+0x2d0>)
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc7e 	bl	8000220 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d107      	bne.n	800093a <main+0x26a>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	2214      	movs	r2, #20
 8000930:	4916      	ldr	r1, [pc, #88]	; (800098c <main+0x2bc>)
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <main+0x298>)
 8000934:	f003 fb2b 	bl	8003f8e <HAL_UART_Transmit>
 8000938:	e006      	b.n	8000948 <main+0x278>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2214      	movs	r2, #20
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <main+0x2bc>)
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <main+0x298>)
 8000944:	f003 fb23 	bl	8003f8e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2218      	movs	r2, #24
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <main+0x2a0>)
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <main+0x298>)
 8000952:	f003 fb1c 	bl	8003f8e <HAL_UART_Transmit>
			newCmdReady = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800095a:	e707      	b.n	800076c <main+0x9c>
 800095c:	20000170 	.word	0x20000170
 8000960:	20000128 	.word	0x20000128
 8000964:	2000012c 	.word	0x2000012c
 8000968:	200001bc 	.word	0x200001bc
 800096c:	20000018 	.word	0x20000018
 8000970:	20000000 	.word	0x20000000
 8000974:	20000124 	.word	0x20000124
 8000978:	20000080 	.word	0x20000080
 800097c:	080075dc 	.word	0x080075dc
 8000980:	080075e0 	.word	0x080075e0
 8000984:	080075e4 	.word	0x080075e4
 8000988:	080075e8 	.word	0x080075e8
 800098c:	20000084 	.word	0x20000084
 8000990:	08007604 	.word	0x08007604
 8000994:	48000800 	.word	0x48000800
 8000998:	0800760c 	.word	0x0800760c
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	08007614 	.word	0x08007614

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fb40 	bl	8006038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 ffa4 	bl	8001914 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009e6:	2355      	movs	r3, #85	; 0x55
 80009e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f83e 	bl	8001a7c <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a06:	f000 f82f 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2104      	movs	r1, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fb42 	bl	80020ac <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 f81b 	bl	8000a68 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_UART_RxCpltCallback+0x20>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4904      	ldr	r1, [pc, #16]	; (8000a60 <HAL_UART_RxCpltCallback+0x24>)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_UART_RxCpltCallback+0x28>)
 8000a50:	f003 fb34 	bl	80040bc <HAL_UART_Receive_IT>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000124 	.word	0x20000124
 8000a60:	20000128 	.word	0x20000128
 8000a64:	200001bc 	.word	0x200001bc

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aaa:	f000 ffd7 	bl	8001a5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 fb36 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART2_IRQHandler+0x10>)
 8000b16:	f003 fb27 	bl	8004168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200001bc 	.word	0x200001bc

08000b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <EXTI15_10_IRQHandler+0x1c>)
 8000b2e:	f000 feb5 	bl	800189c <HAL_GPIO_WritePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000b32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b36:	f000 fec9 	bl	80018cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	48000800 	.word	0x48000800

08000b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	return 1;
 8000b48:	2301      	movs	r3, #1
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_kill>:

int _kill(int pid, int sig)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b5e:	f005 fa41 	bl	8005fe4 <__errno>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2216      	movs	r2, #22
 8000b66:	601a      	str	r2, [r3, #0]
	return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_exit>:

void _exit (int status)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ffe7 	bl	8000b54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b86:	e7fe      	b.n	8000b86 <_exit+0x12>

08000b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
	}

return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e009      	b.n	8000be8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf1      	blt.n	8000bd4 <_write+0x12>
	}
	return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f005 f9a6 	bl	8005fe4 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	2000016c 	.word	0x2000016c
 8000ccc:	20000260 	.word	0x20000260

08000cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09c      	sub	sp, #112	; 0x70
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f982 	bl	8006038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d34:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d36:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <MX_TIM1_Init+0x180>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10625;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d48:	f642 1281 	movw	r2, #10625	; 0x2981
 8000d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b48      	ldr	r3, [pc, #288]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d54:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5a:	4b45      	ldr	r3, [pc, #276]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d60:	4843      	ldr	r0, [pc, #268]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d62:	f001 fe0d 	bl	8002980 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f7ff fe7c 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483c      	ldr	r0, [pc, #240]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d7e:	f002 f8dd 	bl	8002f3c <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d88:	f7ff fe6e 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8c:	4838      	ldr	r0, [pc, #224]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000d8e:	f001 fe4e 	bl	8002a2e <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d98:	f7ff fe66 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dac:	4619      	mov	r1, r3
 8000dae:	4830      	ldr	r0, [pc, #192]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000db0:	f002 ff30 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dba:	f7ff fe55 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 6375;
 8000dc2:	f641 03e7 	movw	r3, #6375	; 0x18e7
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ddc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4822      	ldr	r0, [pc, #136]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000de6:	f001 ff95 	bl	8002d14 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000df0:	f7ff fe3a 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.Pulse = 4250;
 8000df4:	f241 039a 	movw	r3, #4250	; 0x109a
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	481b      	ldr	r0, [pc, #108]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000e04:	f001 ff86 	bl	8002d14 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000e0e:	f7ff fe2b 	bl	8000a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8000e1e:	23cb      	movs	r3, #203	; 0xcb
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000e52:	f002 ff75 	bl	8003d40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8000e5c:	f7ff fe04 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_TIM1_Init+0x17c>)
 8000e62:	f000 f829 	bl	8000eb8 <HAL_TIM_MspPostInit>

}
 8000e66:	bf00      	nop
 8000e68:	3770      	adds	r7, #112	; 0x70
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000170 	.word	0x20000170
 8000e74:	40012c00 	.word	0x40012c00

08000e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x38>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_TIM_MspPostInit+0x68>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d11d      	bne.n	8000f16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_TIM_MspPostInit+0x6c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_TIM_MspPostInit+0x6c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000ef2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f000 fb41 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012c00 	.word	0x40012c00
 8000f24:	40021000 	.word	0x40021000

08000f28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f2e:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <MX_USART2_UART_Init+0x94>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f72:	f002 ffbc 	bl	8003eee <HAL_UART_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f7ff fd74 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f84:	f004 ff5f 	bl	8005e46 <HAL_UARTEx_SetTxFifoThreshold>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f8e:	f7ff fd6b 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000f96:	f004 ff94 	bl	8005ec2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f7ff fd62 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_USART2_UART_Init+0x90>)
 8000fa6:	f004 ff15 	bl	8005dd4 <HAL_UARTEx_DisableFifoMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f7ff fd5a 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001bc 	.word	0x200001bc
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09e      	sub	sp, #120	; 0x78
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2254      	movs	r2, #84	; 0x54
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 f829 	bl	8006038 <memset>
  if(uartHandle->Instance==USART2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a23      	ldr	r2, [pc, #140]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d13e      	bne.n	800106e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fa71 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001008:	f7ff fd2e 	bl	8000a68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_UART_MspInit+0xbc>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6593      	str	r3, [r2, #88]	; 0x58
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_UART_MspInit+0xbc>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_UART_MspInit+0xbc>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103c:	230c      	movs	r3, #12
 800103e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 fa9d 	bl	8001598 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2026      	movs	r0, #38	; 0x26
 8001064:	f000 f9a3 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001068:	2026      	movs	r0, #38	; 0x26
 800106a:	f000 f9ba 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3778      	adds	r7, #120	; 0x78
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff fe11 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 ff9f 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fb0d 	bl	80006d0 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80010c4:	080078b0 	.word	0x080078b0
  ldr r2, =_sbss
 80010c8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80010cc:	20000260 	.word	0x20000260

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f95b 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fcbe 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]

}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_InitTick+0x68>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d022      	beq.n	800115e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_InitTick+0x6c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_InitTick+0x68>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001124:	fbb1 f3f3 	udiv	r3, r1, r3
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f966 	bl	80013fe <HAL_SYSTICK_Config>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10f      	bne.n	8001158 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	d809      	bhi.n	8001152 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113e:	2200      	movs	r2, #0
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	f000 f932 	bl	80013ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_InitTick+0x70>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e007      	b.n	8001162 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e004      	b.n	8001162 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e001      	b.n	8001162 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000a0 	.word	0x200000a0
 8001170:	20000098 	.word	0x20000098
 8001174:	2000009c 	.word	0x2000009c

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4413      	add	r3, r2
 8001186:	4a03      	ldr	r2, [pc, #12]	; (8001194 <HAL_IncTick+0x1c>)
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	2000024c 	.word	0x2000024c
 8001198:	200000a0 	.word	0x200000a0

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000024c 	.word	0x2000024c

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d004      	beq.n	80011d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_Delay+0x40>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d8:	bf00      	nop
 80011da:	f7ff ffdf 	bl	800119c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d8f7      	bhi.n	80011da <HAL_Delay+0x26>
  {
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000a0 	.word	0x200000a0

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff40 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff33 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa4 	bl	8001354 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d005      	beq.n	800143a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2204      	movs	r2, #4
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e037      	b.n	80014aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 020e 	bic.w	r2, r2, #14
 8001448:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 021f 	and.w	r2, r3, #31
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001486:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800149e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d00d      	beq.n	80014fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e047      	b.n	800158c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800152a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001548:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800156a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
    }
  }
  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015a6:	e15a      	b.n	800185e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 814c 	beq.w	8001858 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b5b      	ldr	r3, [pc, #364]	; (800187c <HAL_GPIO_Init+0x2e4>)
 800170e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001710:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6613      	str	r3, [r2, #96]	; 0x60
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_GPIO_Init+0x2e4>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001724:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174e:	d01f      	beq.n	8001790 <HAL_GPIO_Init+0x1f8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d019      	beq.n	800178c <HAL_GPIO_Init+0x1f4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1f0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a4a      	ldr	r2, [pc, #296]	; (800188c <HAL_GPIO_Init+0x2f4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_GPIO_Init+0x2f8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2fc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1e4>
 8001778:	2305      	movs	r3, #5
 800177a:	e00a      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 800177c:	2306      	movs	r3, #6
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001780:	2304      	movs	r3, #4
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001784:	2303      	movs	r3, #3
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001790:	2300      	movs	r3, #0
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a2:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d4:	4a30      	ldr	r2, [pc, #192]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_GPIO_Init+0x300>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f ae9d 	bne.w	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	48001000 	.word	0x48001000
 8001894:	48001400 	.word	0x48001400
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f806 	bl	80018fc <HAL_GPIO_EXTI_Callback>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d141      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d131      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800193c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001948:	4a41      	ldr	r2, [pc, #260]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001950:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2232      	movs	r2, #50	; 0x32
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001966:	e002      	b.n	800196e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3b01      	subs	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d102      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f2      	bne.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	d158      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e057      	b.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199a:	4a2d      	ldr	r2, [pc, #180]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019a4:	e04d      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ac:	d141      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ba:	d131      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2232      	movs	r2, #50	; 0x32
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f2:	e002      	b.n	80019fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d102      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f2      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d112      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e011      	b.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a30:	e007      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40007000 	.word	0x40007000
 8001a54:	20000098 	.word	0x20000098
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6a:	6093      	str	r3, [r2, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e306      	b.n	800209c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_OscConfig+0x3e>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d05b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d157      	bne.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e2e1      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x74>
 8001ae2:	4b85      	ldr	r3, [pc, #532]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a84      	ldr	r2, [pc, #528]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7e      	ldr	r2, [pc, #504]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7b      	ldr	r2, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a74      	ldr	r2, [pc, #464]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fb32 	bl	800119c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fb2e 	bl	800119c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e2a6      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb1e 	bl	800119c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fb1a 	bl	800119c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e292      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b76:	4b60      	ldr	r3, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b92:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x136>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x13c>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d11f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x154>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e265      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4946      	ldr	r1, [pc, #280]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa8b 	bl	8001104 <HAL_InitTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d043      	beq.n	8001c7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e251      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fac6 	bl	800119c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff fac2 	bl	800119c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e23a      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	061b      	lsls	r3, r3, #24
 8001c40:	492d      	ldr	r1, [pc, #180]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 8001c46:	e01a      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff faa2 	bl	800119c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fa9e 	bl	800119c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e216      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1e0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d041      	beq.n	8001d0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fa7b 	bl	800119c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fa77 	bl	800119c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1ef      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ef      	beq.n	8001caa <HAL_RCC_OscConfig+0x22e>
 8001cca:	e020      	b.n	8001d0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fa5e 	bl	800119c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce2:	e00d      	b.n	8001d00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fa5a 	bl	800119c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d906      	bls.n	8001d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1d2      	b.n	800209c <HAL_RCC_OscConfig+0x620>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d00:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ea      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80a6 	beq.w	8001e68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d20:	4b84      	ldr	r3, [pc, #528]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2b4>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x2b6>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b79      	ldr	r3, [pc, #484]	; (8001f38 <HAL_RCC_OscConfig+0x4bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x4bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x4bc>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fa17 	bl	800119c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fa13 	bl	800119c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e18b      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x4bc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d108      	bne.n	8001daa <HAL_RCC_OscConfig+0x32e>
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	e024      	b.n	8001df4 <HAL_RCC_OscConfig+0x378>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d110      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x358>
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc8:	4a5a      	ldr	r2, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x378>
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d016      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f9ce 	bl	800119c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff f9ca 	bl	800119c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e140      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ed      	beq.n	8001e04 <HAL_RCC_OscConfig+0x388>
 8001e28:	e015      	b.n	8001e56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f9b7 	bl	800119c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff f9b3 	bl	800119c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e129      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ed      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d03c      	beq.n	8001eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e82:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f986 	bl	800119c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e94:	f7ff f982 	bl	800119c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0fa      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ef      	beq.n	8001e94 <HAL_RCC_OscConfig+0x418>
 8001eb4:	e01b      	b.n	8001eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f969 	bl	800119c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ece:	f7ff f965 	bl	800119c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0dd      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ef      	bne.n	8001ece <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80d1 	beq.w	800209a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	f000 808b 	beq.w	800201c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d15e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f93f 	bl	800119c <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	e00c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff f93b 	bl	800119c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d905      	bls.n	8001f3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0b3      	b.n	800209c <HAL_RCC_OscConfig+0x620>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ec      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_RCC_OscConfig+0x62c>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6a11      	ldr	r1, [r2, #32]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f62:	0212      	lsls	r2, r2, #8
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6a:	0852      	lsrs	r2, r2, #1
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	0552      	lsls	r2, r2, #21
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f76:	0852      	lsrs	r2, r2, #1
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0652      	lsls	r2, r2, #25
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f82:	06d2      	lsls	r2, r2, #27
 8001f84:	430a      	orrs	r2, r1
 8001f86:	4947      	ldr	r1, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a44      	ldr	r2, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f8fa 	bl	800119c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f8f6 	bl	800119c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e06e      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x530>
 8001fca:	e066      	b.n	800209a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a2e      	ldr	r2, [pc, #184]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8001fea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f8d2 	bl	800119c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f8ce 	bl	800119c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e046      	b.n	800209c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x580>
 800201a:	e03e      	b.n	800209a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e039      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_RCC_OscConfig+0x628>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	429a      	cmp	r2, r3
 800203a:	d12c      	bne.n	8002096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	3b01      	subs	r3, #1
 8002048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d123      	bne.n	8002096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11b      	bne.n	8002096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d113      	bne.n	8002096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d109      	bne.n	8002096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	3b01      	subs	r3, #1
 8002090:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	019f800c 	.word	0x019f800c

080020ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e11e      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b91      	ldr	r3, [pc, #580]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b8e      	ldr	r3, [pc, #568]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 020f 	bic.w	r2, r3, #15
 80020da:	498c      	ldr	r1, [pc, #560]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b8a      	ldr	r3, [pc, #552]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e106      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d073      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d129      	bne.n	800215c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0f4      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002118:	f000 f99e 	bl	8002458 <RCC_GetSysClockFreqFromPLLSource>
 800211c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4a7c      	ldr	r2, [pc, #496]	; (8002314 <HAL_RCC_ClockConfig+0x268>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d93f      	bls.n	80021a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002126:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800213a:	2b00      	cmp	r3, #0
 800213c:	d033      	beq.n	80021a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d12f      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800214e:	4a70      	ldr	r2, [pc, #448]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e024      	b.n	80021a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d107      	bne.n	8002174 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0c6      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0be      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002184:	f000 f8ce 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8002188:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4a61      	ldr	r2, [pc, #388]	; (8002314 <HAL_RCC_ClockConfig+0x268>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d909      	bls.n	80021a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219a:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4957      	ldr	r1, [pc, #348]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe fff0 	bl	800119c <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe ffec 	bl	800119c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e095      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800220a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002226:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4936      	ldr	r1, [pc, #216]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
 800223a:	e008      	b.n	800224e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d105      	bne.n	800224e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 8002248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d21d      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 020f 	bic.w	r2, r3, #15
 8002264:	4929      	ldr	r1, [pc, #164]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800226c:	f7fe ff96 	bl	800119c <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe ff92 	bl	800119c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e03b      	b.n	8002302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_ClockConfig+0x260>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d1ed      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4917      	ldr	r1, [pc, #92]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490f      	ldr	r1, [pc, #60]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d6:	f000 f825 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x264>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <HAL_RCC_ClockConfig+0x26c>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x270>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ff02 	bl	8001104 <HAL_InitTick>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	04c4b400 	.word	0x04c4b400
 8002318:	08007618 	.word	0x08007618
 800231c:	20000098 	.word	0x20000098
 8002320:	2000009c 	.word	0x2000009c

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b04      	cmp	r3, #4
 8002334:	d102      	bne.n	800233c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e047      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d102      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e03e      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d136      	bne.n	80023c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3301      	adds	r3, #1
 8002370:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	68d2      	ldr	r2, [r2, #12]
 8002384:	0a12      	lsrs	r2, r2, #8
 8002386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
      break;
 8002390:	e00c      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	0a12      	lsrs	r2, r2, #8
 80023a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
      break;
 80023aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0e5b      	lsrs	r3, r3, #25
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	3301      	adds	r3, #1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e001      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023cc:	693b      	ldr	r3, [r7, #16]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	016e3600 	.word	0x016e3600

080023e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000098 	.word	0x20000098

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002404:	f7ff fff0 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4904      	ldr	r1, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08007628 	.word	0x08007628

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002430:	f7ff ffda 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0adb      	lsrs	r3, r3, #11
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4904      	ldr	r1, [pc, #16]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	08007628 	.word	0x08007628

08002458 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3301      	adds	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10c      	bne.n	8002496 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002486:	68d2      	ldr	r2, [r2, #12]
 8002488:	0a12      	lsrs	r2, r2, #8
 800248a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
    break;
 8002494:	e00c      	b.n	80024b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	0a12      	lsrs	r2, r2, #8
 80024a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    break;
 80024ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0e5b      	lsrs	r3, r3, #25
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	016e3600 	.word	0x016e3600
 80024e0:	00f42400 	.word	0x00f42400

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8098 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253a:	f7fe fe2f 	bl	800119c <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002540:	e009      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe fe2b 	bl	800119c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	74fb      	strb	r3, [r7, #19]
        break;
 8002554:	e005      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d159      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01e      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d019      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fdeb 	bl	800119c <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c8:	e00b      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fde7 	bl	800119c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d902      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	74fb      	strb	r3, [r7, #19]
            break;
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ec      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
 8002612:	e005      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4ba7      	ldr	r3, [pc, #668]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4aa6      	ldr	r2, [pc, #664]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263e:	4ba1      	ldr	r3, [pc, #644]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f023 0203 	bic.w	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	499d      	ldr	r1, [pc, #628]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 020c 	bic.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4995      	ldr	r1, [pc, #596]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002682:	4b90      	ldr	r3, [pc, #576]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	498c      	ldr	r1, [pc, #560]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a4:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4984      	ldr	r1, [pc, #528]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	497b      	ldr	r1, [pc, #492]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e8:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4973      	ldr	r1, [pc, #460]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270a:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	496a      	ldr	r1, [pc, #424]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800272c:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4962      	ldr	r1, [pc, #392]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	4959      	ldr	r1, [pc, #356]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002770:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	4951      	ldr	r1, [pc, #324]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	4948      	ldr	r1, [pc, #288]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b4:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4940      	ldr	r1, [pc, #256]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	4932      	ldr	r1, [pc, #200]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	4924      	ldr	r1, [pc, #144]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002842:	d105      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287a:	d105      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002886:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d019      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b2:	d109      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a02      	ldr	r2, [pc, #8]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
 80028c0:	e002      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4926      	ldr	r1, [pc, #152]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	4918      	ldr	r1, [pc, #96]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002962:	d105      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002970:	7cbb      	ldrb	r3, [r7, #18]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e049      	b.n	8002a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fa66 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fbd2 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e049      	b.n	8002ad4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f841 	bl	8002adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 fb7b 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_TIM_PWM_Start+0x24>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e03c      	b.n	8002b8e <HAL_TIM_PWM_Start+0x9e>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d109      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x3e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e02f      	b.n	8002b8e <HAL_TIM_PWM_Start+0x9e>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d109      	bne.n	8002b48 <HAL_TIM_PWM_Start+0x58>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e022      	b.n	8002b8e <HAL_TIM_PWM_Start+0x9e>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d109      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x72>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e015      	b.n	8002b8e <HAL_TIM_PWM_Start+0x9e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start+0x8c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e008      	b.n	8002b8e <HAL_TIM_PWM_Start+0x9e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0a6      	b.n	8002ce4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xb6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	e023      	b.n	8002bee <HAL_TIM_PWM_Start+0xfe>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0xc6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	e01b      	b.n	8002bee <HAL_TIM_PWM_Start+0xfe>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0xd6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Start+0xfe>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0xe6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Start+0xfe>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xf6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Start+0xfe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ff24 	bl	8003a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_TIM_PWM_Start+0x1fc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d018      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x148>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <HAL_TIM_PWM_Start+0x200>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x148>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <HAL_TIM_PWM_Start+0x204>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00e      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x148>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a36      	ldr	r2, [pc, #216]	; (8002cf8 <HAL_TIM_PWM_Start+0x208>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x148>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a34      	ldr	r2, [pc, #208]	; (8002cfc <HAL_TIM_PWM_Start+0x20c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x148>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <HAL_TIM_PWM_Start+0x210>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x14c>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_TIM_PWM_Start+0x14e>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a25      	ldr	r2, [pc, #148]	; (8002cec <HAL_TIM_PWM_Start+0x1fc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d01d      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <HAL_TIM_PWM_Start+0x214>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <HAL_TIM_PWM_Start+0x218>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_TIM_PWM_Start+0x21c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_TIM_PWM_Start+0x200>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_TIM_PWM_Start+0x204>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x1b2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_TIM_PWM_Start+0x210>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d115      	bne.n	8002cce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_TIM_PWM_Start+0x220>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d015      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x1f0>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d011      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	e008      	b.n	8002ce0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e000      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40013400 	.word	0x40013400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	40015000 	.word	0x40015000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0ff      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b14      	cmp	r3, #20
 8002d3e:	f200 80f0 	bhi.w	8002f22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002f23 	.word	0x08002f23
 8002d50:	08002f23 	.word	0x08002f23
 8002d54:	08002f23 	.word	0x08002f23
 8002d58:	08002ddd 	.word	0x08002ddd
 8002d5c:	08002f23 	.word	0x08002f23
 8002d60:	08002f23 	.word	0x08002f23
 8002d64:	08002f23 	.word	0x08002f23
 8002d68:	08002e1f 	.word	0x08002e1f
 8002d6c:	08002f23 	.word	0x08002f23
 8002d70:	08002f23 	.word	0x08002f23
 8002d74:	08002f23 	.word	0x08002f23
 8002d78:	08002e5f 	.word	0x08002e5f
 8002d7c:	08002f23 	.word	0x08002f23
 8002d80:	08002f23 	.word	0x08002f23
 8002d84:	08002f23 	.word	0x08002f23
 8002d88:	08002ea1 	.word	0x08002ea1
 8002d8c:	08002f23 	.word	0x08002f23
 8002d90:	08002f23 	.word	0x08002f23
 8002d94:	08002f23 	.word	0x08002f23
 8002d98:	08002ee1 	.word	0x08002ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa88 	bl	80032b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	619a      	str	r2, [r3, #24]
      break;
 8002dda:	e0a5      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fb02 	bl	80033ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6999      	ldr	r1, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
      break;
 8002e1c:	e084      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fb75 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0208 	orr.w	r2, r2, #8
 8002e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0204 	bic.w	r2, r2, #4
 8002e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69d9      	ldr	r1, [r3, #28]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	61da      	str	r2, [r3, #28]
      break;
 8002e5c:	e064      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fbe7 	bl	8003638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	021a      	lsls	r2, r3, #8
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	61da      	str	r2, [r3, #28]
      break;
 8002e9e:	e043      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fc5a 	bl	8003760 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002ede:	e023      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fca4 	bl	8003834 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002f20:	e002      	b.n	8002f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
      break;
 8002f26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop

08002f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0f6      	b.n	8003146 <HAL_TIM_ConfigClockSource+0x20a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6f      	ldr	r2, [pc, #444]	; (8003150 <HAL_TIM_ConfigClockSource+0x214>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f000 80c1 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002f98:	4a6d      	ldr	r2, [pc, #436]	; (8003150 <HAL_TIM_ConfigClockSource+0x214>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	f200 80c6 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002fa0:	4a6c      	ldr	r2, [pc, #432]	; (8003154 <HAL_TIM_ConfigClockSource+0x218>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	f000 80b9 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002fa8:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_TIM_ConfigClockSource+0x218>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	f200 80be 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002fb0:	4a69      	ldr	r2, [pc, #420]	; (8003158 <HAL_TIM_ConfigClockSource+0x21c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f000 80b1 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002fb8:	4a67      	ldr	r2, [pc, #412]	; (8003158 <HAL_TIM_ConfigClockSource+0x21c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f200 80b6 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002fc0:	4a66      	ldr	r2, [pc, #408]	; (800315c <HAL_TIM_ConfigClockSource+0x220>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f000 80a9 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002fc8:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_TIM_ConfigClockSource+0x220>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f200 80ae 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_TIM_ConfigClockSource+0x224>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f000 80a1 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002fd8:	4a61      	ldr	r2, [pc, #388]	; (8003160 <HAL_TIM_ConfigClockSource+0x224>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f200 80a6 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002fe0:	4a60      	ldr	r2, [pc, #384]	; (8003164 <HAL_TIM_ConfigClockSource+0x228>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	f000 8099 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002fe8:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_TIM_ConfigClockSource+0x228>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f200 809e 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8002ff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002ff4:	f000 8091 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8002ff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002ffc:	f200 8096 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8003000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003004:	f000 8089 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8003008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300c:	f200 808e 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8003010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003014:	d03e      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0x158>
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	f200 8087 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	f000 8086 	beq.w	8003132 <HAL_TIM_ConfigClockSource+0x1f6>
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d87f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 800302c:	2b70      	cmp	r3, #112	; 0x70
 800302e:	d01a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x12a>
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d87b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8003034:	2b60      	cmp	r3, #96	; 0x60
 8003036:	d050      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x19e>
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d877      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 800303c:	2b50      	cmp	r3, #80	; 0x50
 800303e:	d03c      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x17e>
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d873      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d058      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x1be>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d86f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d064      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8003050:	2b30      	cmp	r3, #48	; 0x30
 8003052:	d86b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d060      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d867      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05c      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8003060:	2b10      	cmp	r3, #16
 8003062:	d05a      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x1de>
 8003064:	e062      	b.n	800312c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f000 fcc5 	bl	8003a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
      break;
 8003092:	e04f      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f000 fcae 	bl	8003a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b6:	609a      	str	r2, [r3, #8]
      break;
 80030b8:	e03c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 fc20 	bl	800390c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2150      	movs	r1, #80	; 0x50
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fc79 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 80030d8:	e02c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fc3f 	bl	800396a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2160      	movs	r1, #96	; 0x60
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fc69 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 80030f8:	e01c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	f000 fc00 	bl	800390c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fc59 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 8003118:	e00c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f000 fc50 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 800312a:	e003      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e000      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	00100070 	.word	0x00100070
 8003154:	00100060 	.word	0x00100060
 8003158:	00100050 	.word	0x00100050
 800315c:	00100040 	.word	0x00100040
 8003160:	00100030 	.word	0x00100030
 8003164:	00100020 	.word	0x00100020

08003168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a46      	ldr	r2, [pc, #280]	; (8003294 <TIM_Base_SetConfig+0x12c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d017      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d013      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a43      	ldr	r2, [pc, #268]	; (8003298 <TIM_Base_SetConfig+0x130>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a42      	ldr	r2, [pc, #264]	; (800329c <TIM_Base_SetConfig+0x134>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <TIM_Base_SetConfig+0x138>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <TIM_Base_SetConfig+0x13c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0x48>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3f      	ldr	r2, [pc, #252]	; (80032a8 <TIM_Base_SetConfig+0x140>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a33      	ldr	r2, [pc, #204]	; (8003294 <TIM_Base_SetConfig+0x12c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d023      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d01f      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a30      	ldr	r2, [pc, #192]	; (8003298 <TIM_Base_SetConfig+0x130>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01b      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2f      	ldr	r2, [pc, #188]	; (800329c <TIM_Base_SetConfig+0x134>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d017      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2e      	ldr	r2, [pc, #184]	; (80032a0 <TIM_Base_SetConfig+0x138>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <TIM_Base_SetConfig+0x13c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00f      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <TIM_Base_SetConfig+0x144>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00b      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <TIM_Base_SetConfig+0x148>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <TIM_Base_SetConfig+0x14c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0xaa>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <TIM_Base_SetConfig+0x140>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d108      	bne.n	8003224 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <TIM_Base_SetConfig+0x12c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <TIM_Base_SetConfig+0x110>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <TIM_Base_SetConfig+0x13c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00f      	beq.n	8003278 <TIM_Base_SetConfig+0x110>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <TIM_Base_SetConfig+0x144>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x110>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <TIM_Base_SetConfig+0x148>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x110>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <TIM_Base_SetConfig+0x14c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x110>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <TIM_Base_SetConfig+0x140>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	615a      	str	r2, [r3, #20]
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40013400 	.word	0x40013400
 80032a8:	40015000 	.word	0x40015000
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800

080032b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a30      	ldr	r2, [pc, #192]	; (80033d4 <TIM_OC1_SetConfig+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <TIM_OC1_SetConfig+0x88>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <TIM_OC1_SetConfig+0x120>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_OC1_SetConfig+0x88>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <TIM_OC1_SetConfig+0x124>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_OC1_SetConfig+0x88>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <TIM_OC1_SetConfig+0x128>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_OC1_SetConfig+0x88>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <TIM_OC1_SetConfig+0x12c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_OC1_SetConfig+0x88>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <TIM_OC1_SetConfig+0x130>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10c      	bne.n	800335a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0308 	bic.w	r3, r3, #8
 8003346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC1_SetConfig+0x11c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <TIM_OC1_SetConfig+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <TIM_OC1_SetConfig+0x120>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00f      	beq.n	800338a <TIM_OC1_SetConfig+0xd2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <TIM_OC1_SetConfig+0x124>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_OC1_SetConfig+0xd2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <TIM_OC1_SetConfig+0x128>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <TIM_OC1_SetConfig+0xd2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <TIM_OC1_SetConfig+0x12c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC1_SetConfig+0xd2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <TIM_OC1_SetConfig+0x130>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40015000 	.word	0x40015000

080033ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0210 	bic.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0320 	bic.w	r3, r3, #32
 800343a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <TIM_OC2_SetConfig+0x110>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_OC2_SetConfig+0x74>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <TIM_OC2_SetConfig+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_OC2_SetConfig+0x74>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_OC2_SetConfig+0x118>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10d      	bne.n	800347c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <TIM_OC2_SetConfig+0x110>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <TIM_OC2_SetConfig+0xc0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <TIM_OC2_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_OC2_SetConfig+0xc0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <TIM_OC2_SetConfig+0x11c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_OC2_SetConfig+0xc0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <TIM_OC2_SetConfig+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_OC2_SetConfig+0xc0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <TIM_OC2_SetConfig+0x124>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_OC2_SetConfig+0xc0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <TIM_OC2_SetConfig+0x118>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40013400 	.word	0x40013400
 8003504:	40015000 	.word	0x40015000
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <TIM_OC3_SetConfig+0x10c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_OC3_SetConfig+0x72>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <TIM_OC3_SetConfig+0x110>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x72>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <TIM_OC3_SetConfig+0x114>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10d      	bne.n	80035a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <TIM_OC3_SetConfig+0x10c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <TIM_OC3_SetConfig+0xbe>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <TIM_OC3_SetConfig+0x110>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00f      	beq.n	80035d2 <TIM_OC3_SetConfig+0xbe>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <TIM_OC3_SetConfig+0x118>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00b      	beq.n	80035d2 <TIM_OC3_SetConfig+0xbe>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <TIM_OC3_SetConfig+0x11c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <TIM_OC3_SetConfig+0xbe>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <TIM_OC3_SetConfig+0x120>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_OC3_SetConfig+0xbe>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <TIM_OC3_SetConfig+0x114>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40013400 	.word	0x40013400
 8003628:	40015000 	.word	0x40015000
 800362c:	40014000 	.word	0x40014000
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800

08003638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	031b      	lsls	r3, r3, #12
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <TIM_OC4_SetConfig+0x110>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_OC4_SetConfig+0x74>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <TIM_OC4_SetConfig+0x114>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_OC4_SetConfig+0x74>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <TIM_OC4_SetConfig+0x118>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10d      	bne.n	80036c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <TIM_OC4_SetConfig+0x110>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <TIM_OC4_SetConfig+0xc0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <TIM_OC4_SetConfig+0x114>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00f      	beq.n	80036f8 <TIM_OC4_SetConfig+0xc0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <TIM_OC4_SetConfig+0x11c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00b      	beq.n	80036f8 <TIM_OC4_SetConfig+0xc0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_OC4_SetConfig+0x120>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <TIM_OC4_SetConfig+0xc0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <TIM_OC4_SetConfig+0x124>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_OC4_SetConfig+0xc0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a17      	ldr	r2, [pc, #92]	; (8003750 <TIM_OC4_SetConfig+0x118>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d113      	bne.n	8003720 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003706:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40013400 	.word	0x40013400
 8003750:	40015000 	.word	0x40015000
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <TIM_OC5_SetConfig+0xbc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_OC5_SetConfig+0x82>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <TIM_OC5_SetConfig+0xc0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_OC5_SetConfig+0x82>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <TIM_OC5_SetConfig+0xc4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_OC5_SetConfig+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <TIM_OC5_SetConfig+0xc8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_OC5_SetConfig+0x82>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <TIM_OC5_SetConfig+0xcc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_OC5_SetConfig+0x82>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <TIM_OC5_SetConfig+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d109      	bne.n	80037f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	621a      	str	r2, [r3, #32]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40013400 	.word	0x40013400
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800
 8003830:	40015000 	.word	0x40015000

08003834 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	051b      	lsls	r3, r3, #20
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <TIM_OC6_SetConfig+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_OC6_SetConfig+0x84>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <TIM_OC6_SetConfig+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_OC6_SetConfig+0x84>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <TIM_OC6_SetConfig+0xc8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC6_SetConfig+0x84>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a17      	ldr	r2, [pc, #92]	; (8003900 <TIM_OC6_SetConfig+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC6_SetConfig+0x84>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <TIM_OC6_SetConfig+0xd0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC6_SetConfig+0x84>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <TIM_OC6_SetConfig+0xd4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d109      	bne.n	80038cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40013400 	.word	0x40013400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	40015000 	.word	0x40015000

0800390c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 030a 	bic.w	r3, r3, #10
 8003948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396a:	b480      	push	{r7}
 800396c:	b087      	sub	sp, #28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0210 	bic.w	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	031b      	lsls	r3, r3, #12
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f043 0307 	orr.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2201      	movs	r2, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_TIMEx_PWMN_Start+0x24>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e022      	b.n	8003afa <HAL_TIMEx_PWMN_Start+0x6a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d109      	bne.n	8003ace <HAL_TIMEx_PWMN_Start+0x3e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e015      	b.n	8003afa <HAL_TIMEx_PWMN_Start+0x6a>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d109      	bne.n	8003ae8 <HAL_TIMEx_PWMN_Start+0x58>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e008      	b.n	8003afa <HAL_TIMEx_PWMN_Start+0x6a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e073      	b.n	8003bea <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIMEx_PWMN_Start+0x82>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b10:	e013      	b.n	8003b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIMEx_PWMN_Start+0x92>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b20:	e00b      	b.n	8003b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d104      	bne.n	8003b32 <HAL_TIMEx_PWMN_Start+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b30:	e003      	b.n	8003b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f9ae 	bl	8003ea4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_TIMEx_PWMN_Start+0x164>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_TIMEx_PWMN_Start+0x168>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <HAL_TIMEx_PWMN_Start+0x16c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIMEx_PWMN_Start+0x170>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_TIMEx_PWMN_Start+0x174>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIMEx_PWMN_Start+0x178>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIMEx_PWMN_Start+0x118>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_TIMEx_PWMN_Start+0x17c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d115      	bne.n	8003bd4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_TIMEx_PWMN_Start+0x180>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d015      	beq.n	8003be6 <HAL_TIMEx_PWMN_Start+0x156>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d011      	beq.n	8003be6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	e008      	b.n	8003be6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e000      	b.n	8003be8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40013400 	.word	0x40013400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40015000 	.word	0x40015000
 8003c10:	00010007 	.word	0x00010007

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e074      	b.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d01d      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10c      	bne.n	8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40015000 	.word	0x40015000
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40014000 	.word	0x40014000

08003d40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e096      	b.n	8003e8a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d106      	bne.n	8003e02 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d12b      	bne.n	8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	051b      	lsls	r3, r3, #20
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d106      	bne.n	8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40015000 	.word	0x40015000

08003ea4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e042      	b.n	8003f86 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd f854 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fc51 	bl	80047d8 <UART_SetConfig>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e022      	b.n	8003f86 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 ff41 	bl	8004dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 ffc8 	bl	8004f14 <UART_CheckIdleState>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	; 0x28
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	f040 8083 	bne.w	80040b0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Transmit+0x28>
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07b      	b.n	80040b2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Transmit+0x3a>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e074      	b.n	80040b2 <HAL_UART_Transmit+0x124>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2221      	movs	r2, #33	; 0x21
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe0:	f7fd f8dc 	bl	800119c <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d108      	bne.n	8004012 <HAL_UART_Transmit+0x84>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e003      	b.n	800401a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004022:	e02c      	b.n	800407e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2200      	movs	r2, #0
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 ffbb 	bl	8004faa <UART_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e039      	b.n	80040b2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3302      	adds	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e007      	b.n	800406c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cc      	bne.n	8004024 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 ff88 	bl	8004faa <UART_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d142      	bne.n	800415a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_UART_Receive_IT+0x24>
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e03b      	b.n	800415c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Receive_IT+0x36>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e034      	b.n	800415c <HAL_UART_Receive_IT+0xa0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_UART_Receive_IT+0xa8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01f      	beq.n	800414a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d018      	beq.n	800414a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	613b      	str	r3, [r7, #16]
   return(result);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	61bb      	str	r3, [r7, #24]
   return(result);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e6      	bne.n	8004118 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	461a      	mov	r2, r3
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fff3 	bl	800513c <UART_Start_Receive_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	e000      	b.n	800415c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40008000 	.word	0x40008000

08004168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0ba      	sub	sp, #232	; 0xe8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004192:	f640 030f 	movw	r3, #2063	; 0x80f
 8004196:	4013      	ands	r3, r2
 8004198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11b      	bne.n	80041dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 82d6 	beq.w	800477e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      }
      return;
 80041da:	e2d0      	b.n	800477e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 811f 	beq.w	8004424 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041ea:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <HAL_UART_IRQHandler+0x2b0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041f6:	4b89      	ldr	r3, [pc, #548]	; (800441c <HAL_UART_IRQHandler+0x2b4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8112 	beq.w	8004424 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2202      	movs	r2, #2
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004256:	f043 0204 	orr.w	r2, r3, #4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2204      	movs	r2, #4
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042ac:	4b5a      	ldr	r3, [pc, #360]	; (8004418 <HAL_UART_IRQHandler+0x2b0>)
 80042ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 823c 	beq.w	8004782 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04f      	beq.n	8004402 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 f814 	bl	8005390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d141      	bne.n	80043fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d013      	beq.n	80043f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_UART_IRQHandler+0x2b8>)
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd f876 	bl	80014c8 <HAL_DMA_Abort_IT>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d017      	beq.n	8004412 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	e00f      	b.n	8004412 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9da 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e00b      	b.n	8004412 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9d6 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e007      	b.n	8004412 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9d2 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004410:	e1b7      	b.n	8004782 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004412:	bf00      	nop
    return;
 8004414:	e1b5      	b.n	8004782 <HAL_UART_IRQHandler+0x61a>
 8004416:	bf00      	nop
 8004418:	10000001 	.word	0x10000001
 800441c:	04000120 	.word	0x04000120
 8004420:	0800545d 	.word	0x0800545d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 814a 	bne.w	80046c2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8143 	beq.w	80046c2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 813c 	beq.w	80046c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2210      	movs	r2, #16
 8004450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	f040 80b5 	bne.w	80045cc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800446e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8187 	beq.w	8004786 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800447e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004482:	429a      	cmp	r2, r3
 8004484:	f080 817f 	bcs.w	8004786 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8086 	bne.w	80045b0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1da      	bne.n	80044a4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004512:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004516:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800451a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e1      	bne.n	80044ee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800453a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800454e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004550:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004554:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800455c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004580:	f023 0310 	bic.w	r3, r3, #16
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004592:	65bb      	str	r3, [r7, #88]	; 0x58
 8004594:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e4      	bne.n	8004570 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc ff33 	bl	8001416 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8fb 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ca:	e0dc      	b.n	8004786 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80ce 	beq.w	800478a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80045ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80c9 	beq.w	800478a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
 800461c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e4      	bne.n	80045f8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	623b      	str	r3, [r7, #32]
   return(result);
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004656:	633a      	str	r2, [r7, #48]	; 0x30
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e1      	bne.n	800462e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60fb      	str	r3, [r7, #12]
   return(result);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	617b      	str	r3, [r7, #20]
   return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e4      	bne.n	800467e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f880 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c0:	e063      	b.n	800478a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <HAL_UART_IRQHandler+0x584>
 80046ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 fb57 	bl	8005d98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ea:	e051      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d014      	beq.n	8004722 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03a      	beq.n	800478e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
    }
    return;
 8004720:	e035      	b.n	800478e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_UART_IRQHandler+0x5da>
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fea4 	bl	8005488 <UART_EndTransmit_IT>
    return;
 8004740:	e026      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_UART_IRQHandler+0x5fa>
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f001 fb30 	bl	8005dc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004760:	e016      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_UART_IRQHandler+0x628>
 800476e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004772:	2b00      	cmp	r3, #0
 8004774:	da0c      	bge.n	8004790 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fb18 	bl	8005dac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800477c:	e008      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
      return;
 800477e:	bf00      	nop
 8004780:	e006      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
    return;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
      return;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
      return;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <HAL_UART_IRQHandler+0x628>
    return;
 800478e:	bf00      	nop
  }
}
 8004790:	37e8      	adds	r7, #232	; 0xe8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b08c      	sub	sp, #48	; 0x30
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4baa      	ldr	r3, [pc, #680]	; (8004ab0 <UART_SetConfig+0x2d8>)
 8004808:	4013      	ands	r3, r2
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004810:	430b      	orrs	r3, r1
 8004812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a9f      	ldr	r2, [pc, #636]	; (8004ab4 <UART_SetConfig+0x2dc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004840:	4313      	orrs	r3, r2
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800484e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004858:	430b      	orrs	r3, r1
 800485a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f023 010f 	bic.w	r1, r3, #15
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a90      	ldr	r2, [pc, #576]	; (8004ab8 <UART_SetConfig+0x2e0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d125      	bne.n	80048c8 <UART_SetConfig+0xf0>
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <UART_SetConfig+0x2e4>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d81a      	bhi.n	80048c0 <UART_SetConfig+0xe8>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0xb8>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a6:	e116      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ae:	e112      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e10e      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e10a      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e106      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7c      	ldr	r2, [pc, #496]	; (8004ac0 <UART_SetConfig+0x2e8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d138      	bne.n	8004944 <UART_SetConfig+0x16c>
 80048d2:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <UART_SetConfig+0x2e4>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d82d      	bhi.n	800493c <UART_SetConfig+0x164>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x110>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	0800493d 	.word	0x0800493d
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	0800493d 	.word	0x0800493d
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	0800493d 	.word	0x0800493d
 8004900:	0800493d 	.word	0x0800493d
 8004904:	0800493d 	.word	0x0800493d
 8004908:	08004925 	.word	0x08004925
 800490c:	0800493d 	.word	0x0800493d
 8004910:	0800493d 	.word	0x0800493d
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004935 	.word	0x08004935
 800491c:	2300      	movs	r3, #0
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004922:	e0d8      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004924:	2302      	movs	r3, #2
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e0d4      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 800492c:	2304      	movs	r3, #4
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004932:	e0d0      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004934:	2308      	movs	r3, #8
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e0cc      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 800493c:	2310      	movs	r3, #16
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e0c8      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5e      	ldr	r2, [pc, #376]	; (8004ac4 <UART_SetConfig+0x2ec>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d125      	bne.n	800499a <UART_SetConfig+0x1c2>
 800494e:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <UART_SetConfig+0x2e4>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d016      	beq.n	800498a <UART_SetConfig+0x1b2>
 800495c:	2b30      	cmp	r3, #48	; 0x30
 800495e:	d818      	bhi.n	8004992 <UART_SetConfig+0x1ba>
 8004960:	2b20      	cmp	r3, #32
 8004962:	d00a      	beq.n	800497a <UART_SetConfig+0x1a2>
 8004964:	2b20      	cmp	r3, #32
 8004966:	d814      	bhi.n	8004992 <UART_SetConfig+0x1ba>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <UART_SetConfig+0x19a>
 800496c:	2b10      	cmp	r3, #16
 800496e:	d008      	beq.n	8004982 <UART_SetConfig+0x1aa>
 8004970:	e00f      	b.n	8004992 <UART_SetConfig+0x1ba>
 8004972:	2300      	movs	r3, #0
 8004974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004978:	e0ad      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 800497a:	2302      	movs	r3, #2
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004980:	e0a9      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004982:	2304      	movs	r3, #4
 8004984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004988:	e0a5      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 800498a:	2308      	movs	r3, #8
 800498c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004990:	e0a1      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004992:	2310      	movs	r3, #16
 8004994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004998:	e09d      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a4a      	ldr	r2, [pc, #296]	; (8004ac8 <UART_SetConfig+0x2f0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d125      	bne.n	80049f0 <UART_SetConfig+0x218>
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <UART_SetConfig+0x2e4>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049ae:	2bc0      	cmp	r3, #192	; 0xc0
 80049b0:	d016      	beq.n	80049e0 <UART_SetConfig+0x208>
 80049b2:	2bc0      	cmp	r3, #192	; 0xc0
 80049b4:	d818      	bhi.n	80049e8 <UART_SetConfig+0x210>
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d00a      	beq.n	80049d0 <UART_SetConfig+0x1f8>
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d814      	bhi.n	80049e8 <UART_SetConfig+0x210>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <UART_SetConfig+0x1f0>
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d008      	beq.n	80049d8 <UART_SetConfig+0x200>
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x210>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e082      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e07e      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e07a      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e076      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e072      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a35      	ldr	r2, [pc, #212]	; (8004acc <UART_SetConfig+0x2f4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d12a      	bne.n	8004a50 <UART_SetConfig+0x278>
 80049fa:	4b30      	ldr	r3, [pc, #192]	; (8004abc <UART_SetConfig+0x2e4>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a08:	d01a      	beq.n	8004a40 <UART_SetConfig+0x268>
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d81b      	bhi.n	8004a48 <UART_SetConfig+0x270>
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d00c      	beq.n	8004a30 <UART_SetConfig+0x258>
 8004a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1a:	d815      	bhi.n	8004a48 <UART_SetConfig+0x270>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x250>
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d008      	beq.n	8004a38 <UART_SetConfig+0x260>
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x270>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	e052      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a36:	e04e      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e04a      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e046      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e042      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <UART_SetConfig+0x2dc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d13a      	bne.n	8004ad0 <UART_SetConfig+0x2f8>
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <UART_SetConfig+0x2e4>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a68:	d01a      	beq.n	8004aa0 <UART_SetConfig+0x2c8>
 8004a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a6e:	d81b      	bhi.n	8004aa8 <UART_SetConfig+0x2d0>
 8004a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a74:	d00c      	beq.n	8004a90 <UART_SetConfig+0x2b8>
 8004a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7a:	d815      	bhi.n	8004aa8 <UART_SetConfig+0x2d0>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <UART_SetConfig+0x2b0>
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d008      	beq.n	8004a98 <UART_SetConfig+0x2c0>
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x2d0>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	e022      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a90:	2302      	movs	r3, #2
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a96:	e01e      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	e01a      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	e016      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aae:	e012      	b.n	8004ad6 <UART_SetConfig+0x2fe>
 8004ab0:	cfff69f3 	.word	0xcfff69f3
 8004ab4:	40008000 	.word	0x40008000
 8004ab8:	40013800 	.word	0x40013800
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40004400 	.word	0x40004400
 8004ac4:	40004800 	.word	0x40004800
 8004ac8:	40004c00 	.word	0x40004c00
 8004acc:	40005000 	.word	0x40005000
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4aae      	ldr	r2, [pc, #696]	; (8004d94 <UART_SetConfig+0x5bc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	f040 8097 	bne.w	8004c10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d823      	bhi.n	8004b32 <UART_SetConfig+0x35a>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x318>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b23 	.word	0x08004b23
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b33 	.word	0x08004b33
 8004b10:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fd fc74 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b1a:	e010      	b.n	8004b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <UART_SetConfig+0x5c0>)
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b20:	e00d      	b.n	8004b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fd fbff 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8130 	beq.w	8004da6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	4a94      	ldr	r2, [pc, #592]	; (8004d9c <UART_SetConfig+0x5c4>)
 8004b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d305      	bcc.n	8004b76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d903      	bls.n	8004b7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b7c:	e113      	b.n	8004da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	2200      	movs	r2, #0
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	60fa      	str	r2, [r7, #12]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	4a84      	ldr	r2, [pc, #528]	; (8004d9c <UART_SetConfig+0x5c4>)
 8004b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2200      	movs	r2, #0
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ba0:	f7fb fb9e 	bl	80002e0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	020b      	lsls	r3, r1, #8
 8004bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bba:	0202      	lsls	r2, r0, #8
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	6849      	ldr	r1, [r1, #4]
 8004bc0:	0849      	lsrs	r1, r1, #1
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	eb12 0804 	adds.w	r8, r2, r4
 8004bcc:	eb43 0905 	adc.w	r9, r3, r5
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	469a      	mov	sl, r3
 8004bd8:	4693      	mov	fp, r2
 8004bda:	4652      	mov	r2, sl
 8004bdc:	465b      	mov	r3, fp
 8004bde:	4640      	mov	r0, r8
 8004be0:	4649      	mov	r1, r9
 8004be2:	f7fb fb7d 	bl	80002e0 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4613      	mov	r3, r2
 8004bec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf4:	d308      	bcc.n	8004c08 <UART_SetConfig+0x430>
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfc:	d204      	bcs.n	8004c08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a3a      	ldr	r2, [r7, #32]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e0ce      	b.n	8004da6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c0e:	e0ca      	b.n	8004da6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c18:	d166      	bne.n	8004ce8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d827      	bhi.n	8004c72 <UART_SetConfig+0x49a>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0x450>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c63 	.word	0x08004c63
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c73 	.word	0x08004c73
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fd fbd8 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8004c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c52:	e014      	b.n	8004c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c54:	f7fd fbea 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8004c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c5a:	e010      	b.n	8004c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b4e      	ldr	r3, [pc, #312]	; (8004d98 <UART_SetConfig+0x5c0>)
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7fd fb5f 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c68:	e009      	b.n	8004c7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c70:	e005      	b.n	8004c7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8090 	beq.w	8004da6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	4a44      	ldr	r2, [pc, #272]	; (8004d9c <UART_SetConfig+0x5c4>)
 8004c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	441a      	add	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d916      	bls.n	8004ce0 <UART_SetConfig+0x508>
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d212      	bcs.n	8004ce0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f023 030f 	bic.w	r3, r3, #15
 8004cc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	8bfb      	ldrh	r3, [r7, #30]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	8bfa      	ldrh	r2, [r7, #30]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	e062      	b.n	8004da6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ce6:	e05e      	b.n	8004da6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d828      	bhi.n	8004d42 <UART_SetConfig+0x56a>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x520>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d2d 	.word	0x08004d2d
 8004d04:	08004d43 	.word	0x08004d43
 8004d08:	08004d33 	.word	0x08004d33
 8004d0c:	08004d43 	.word	0x08004d43
 8004d10:	08004d43 	.word	0x08004d43
 8004d14:	08004d43 	.word	0x08004d43
 8004d18:	08004d3b 	.word	0x08004d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fd fb70 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d22:	e014      	b.n	8004d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d24:	f7fd fb82 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d2a:	e010      	b.n	8004d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <UART_SetConfig+0x5c0>)
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d30:	e00d      	b.n	8004d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d32:	f7fd faf7 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d38:	e009      	b.n	8004d4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d40:	e005      	b.n	8004d4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d028      	beq.n	8004da6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <UART_SetConfig+0x5c4>)
 8004d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	441a      	add	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b0f      	cmp	r3, #15
 8004d7c:	d910      	bls.n	8004da0 <UART_SetConfig+0x5c8>
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d20c      	bcs.n	8004da0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x5ce>
 8004d92:	bf00      	nop
 8004d94:	40008000 	.word	0x40008000
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	08007630 	.word	0x08007630
      }
      else
      {
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004dc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3730      	adds	r7, #48	; 0x30
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ece:	d10a      	bne.n	8004ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f24:	f7fc f93a 	bl	800119c <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10e      	bne.n	8004f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f82f 	bl	8004faa <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e025      	b.n	8004fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d10e      	bne.n	8004f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f819 	bl	8004faa <UART_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e00f      	b.n	8004fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b09c      	sub	sp, #112	; 0x70
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fba:	e0a9      	b.n	8005110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	f000 80a5 	beq.w	8005110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fc f8e9 	bl	800119c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8004fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d140      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ffc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	663b      	str	r3, [r7, #96]	; 0x60
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800502e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e069      	b.n	8005132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d051      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507a:	d149      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
 80050a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e6      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	613b      	str	r3, [r7, #16]
   return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050d8:	623a      	str	r2, [r7, #32]
 80050da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e010      	b.n	8005132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4013      	ands	r3, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	429a      	cmp	r2, r3
 800512c:	f43f af46 	beq.w	8004fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3770      	adds	r7, #112	; 0x70
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b0a3      	sub	sp, #140	; 0x8c
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d10e      	bne.n	800518e <UART_Start_Receive_IT+0x52>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <UART_Start_Receive_IT+0x48>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800517e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005182:	e02d      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	; 0xff
 8005188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800518c:	e028      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10d      	bne.n	80051b2 <UART_Start_Receive_IT+0x76>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <UART_Start_Receive_IT+0x6c>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051a6:	e01b      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	227f      	movs	r2, #127	; 0x7f
 80051ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051b0:	e016      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ba:	d10d      	bne.n	80051d8 <UART_Start_Receive_IT+0x9c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <UART_Start_Receive_IT+0x92>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	227f      	movs	r2, #127	; 0x7f
 80051c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051cc:	e008      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	223f      	movs	r2, #63	; 0x3f
 80051d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051d6:	e003      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2222      	movs	r2, #34	; 0x22
 80051ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005214:	673a      	str	r2, [r7, #112]	; 0x70
 8005216:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800521a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e3      	bne.n	80051f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005230:	d153      	bne.n	80052da <UART_Start_Receive_IT+0x19e>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	429a      	cmp	r2, r3
 800523c:	d34d      	bcc.n	80052da <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	d107      	bne.n	8005258 <UART_Start_Receive_IT+0x11c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a4b      	ldr	r2, [pc, #300]	; (8005380 <UART_Start_Receive_IT+0x244>)
 8005254:	671a      	str	r2, [r3, #112]	; 0x70
 8005256:	e002      	b.n	800525e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a4a      	ldr	r2, [pc, #296]	; (8005384 <UART_Start_Receive_IT+0x248>)
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01a      	beq.n	80052a4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005292:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e4      	bne.n	800526e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80052c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_Start_Receive_IT+0x168>
 80052d8:	e04a      	b.n	8005370 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d107      	bne.n	80052f4 <UART_Start_Receive_IT+0x1b8>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a26      	ldr	r2, [pc, #152]	; (8005388 <UART_Start_Receive_IT+0x24c>)
 80052f0:	671a      	str	r2, [r3, #112]	; 0x70
 80052f2:	e002      	b.n	80052fa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a25      	ldr	r2, [pc, #148]	; (800538c <UART_Start_Receive_IT+0x250>)
 80052f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d019      	beq.n	800533e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800531e:	677b      	str	r3, [r7, #116]	; 0x74
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_Start_Receive_IT+0x1ce>
 800533c:	e018      	b.n	8005370 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f043 0320 	orr.w	r3, r3, #32
 8005352:	67bb      	str	r3, [r7, #120]	; 0x78
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	61bb      	str	r3, [r7, #24]
   return(result);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	378c      	adds	r7, #140	; 0x8c
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	08005a99 	.word	0x08005a99
 8005384:	080057a1 	.word	0x080057a1
 8005388:	0800563f 	.word	0x0800563f
 800538c:	080054df 	.word	0x080054df

08005390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b095      	sub	sp, #84	; 0x54
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
 80053b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d118      	bne.n	800543c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	60bb      	str	r3, [r7, #8]
   return(result);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0310 	bic.w	r3, r3, #16
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	613b      	str	r3, [r7, #16]
   return(result);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005450:	bf00      	nop
 8005452:	3754      	adds	r7, #84	; 0x54
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff f996 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	60bb      	str	r3, [r7, #8]
   return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	613b      	str	r3, [r7, #16]
   return(result);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff f961 	bl	8004798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d6:	bf00      	nop
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b096      	sub	sp, #88	; 0x58
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	2b22      	cmp	r3, #34	; 0x22
 80054f8:	f040 8095 	bne.w	8005626 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005506:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800550a:	b2d9      	uxtb	r1, r3
 800550c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	400a      	ands	r2, r1
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d178      	bne.n	8005636 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005558:	653b      	str	r3, [r7, #80]	; 0x50
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005562:	647b      	str	r3, [r7, #68]	; 0x44
 8005564:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	623b      	str	r3, [r7, #32]
   return(result);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005596:	633a      	str	r2, [r7, #48]	; 0x30
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d12e      	bne.n	800561e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0310 	bic.w	r3, r3, #16
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	617b      	str	r3, [r7, #20]
   return(result);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d103      	bne.n	800560e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff f8d2 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800561c:	e00b      	b.n	8005636 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fa0c 	bl	8000a3c <HAL_UART_RxCpltCallback>
}
 8005624:	e007      	b.n	8005636 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0208 	orr.w	r2, r2, #8
 8005634:	619a      	str	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	3758      	adds	r7, #88	; 0x58
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b096      	sub	sp, #88	; 0x58
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800564c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	f040 8095 	bne.w	8005786 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800566c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005670:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005674:	4013      	ands	r3, r2
 8005676:	b29a      	uxth	r2, r3
 8005678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	1c9a      	adds	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d178      	bne.n	8005796 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c2:	643b      	str	r3, [r7, #64]	; 0x40
 80056c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e6      	bne.n	80056a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d12e      	bne.n	800577e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60bb      	str	r3, [r7, #8]
   return(result);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6979      	ldr	r1, [r7, #20]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	613b      	str	r3, [r7, #16]
   return(result);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d103      	bne.n	800576e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff f822 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800577c:	e00b      	b.n	8005796 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fb f95c 	bl	8000a3c <HAL_UART_RxCpltCallback>
}
 8005784:	e007      	b.n	8005796 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	619a      	str	r2, [r3, #24]
}
 8005796:	bf00      	nop
 8005798:	3758      	adds	r7, #88	; 0x58
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b0a6      	sub	sp, #152	; 0x98
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057ae:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	2b22      	cmp	r3, #34	; 0x22
 80057d8:	f040 814f 	bne.w	8005a7a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057e2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057e6:	e0f6      	b.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057f2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80057f6:	b2d9      	uxtb	r1, r3
 80057f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	400a      	ands	r2, r1
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800582e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d053      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800583a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2202      	movs	r2, #2
 8005888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005890:	f043 0204 	orr.w	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80058a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fe ff69 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d173      	bne.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80058fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005910:	66bb      	str	r3, [r7, #104]	; 0x68
 8005912:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005916:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800591e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e4      	bne.n	80058ee <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005948:	657a      	str	r2, [r7, #84]	; 0x54
 800594a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800594e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e3      	bne.n	8005924 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d12e      	bne.n	80059d0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	f023 0310 	bic.w	r3, r3, #16
 800598c:	67bb      	str	r3, [r7, #120]	; 0x78
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005996:	643b      	str	r3, [r7, #64]	; 0x40
 8005998:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800599c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e6      	bne.n	8005978 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d103      	bne.n	80059c0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2210      	movs	r2, #16
 80059be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fe fef9 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 80059ce:	e002      	b.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb f833 	bl	8000a3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <UART_RxISR_8BIT_FIFOEN+0x24c>
 80059de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f47f aefe 	bne.w	80057e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d045      	beq.n	8005a8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d23e      	bcs.n	8005a8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a22:	673b      	str	r3, [r7, #112]	; 0x70
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a14      	ldr	r2, [pc, #80]	; (8005a94 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005a44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f043 0320 	orr.w	r3, r3, #32
 8005a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	613b      	str	r3, [r7, #16]
   return(result);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e6      	bne.n	8005a46 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a78:	e007      	b.n	8005a8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	619a      	str	r2, [r3, #24]
}
 8005a8a:	bf00      	nop
 8005a8c:	3798      	adds	r7, #152	; 0x98
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	080054df 	.word	0x080054df

08005a98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b0a8      	sub	sp, #160	; 0xa0
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aa6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	2b22      	cmp	r3, #34	; 0x22
 8005ad0:	f040 8153 	bne.w	8005d7a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ada:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ade:	e0fa      	b.n	8005cd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005af2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005af6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d053      	beq.n	8005bde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d011      	beq.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2201      	movs	r2, #1
 8005b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	f043 0201 	orr.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2202      	movs	r2, #2
 8005b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8c:	f043 0204 	orr.w	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d011      	beq.n	8005bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbc:	f043 0202 	orr.w	r2, r3, #2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d006      	beq.n	8005bde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fe fdeb 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d175      	bne.n	8005cd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c0e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e4      	bne.n	8005bea <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c48:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e1      	bne.n	8005c20 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d12e      	bne.n	8005cd0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	f023 0310 	bic.w	r3, r3, #16
 8005c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c96:	647b      	str	r3, [r7, #68]	; 0x44
 8005c98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e6      	bne.n	8005c78 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d103      	bne.n	8005cc0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fe fd79 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 8005cce:	e002      	b.n	8005cd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fa feb3 	bl	8000a3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <UART_RxISR_16BIT_FIFOEN+0x254>
 8005cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f47f aefa 	bne.w	8005ae0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d045      	beq.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d04:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d23e      	bcs.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3308      	adds	r3, #8
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d22:	677b      	str	r3, [r7, #116]	; 0x74
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e5      	bne.n	8005d0c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005d44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f043 0320 	orr.w	r3, r3, #32
 8005d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	617b      	str	r3, [r7, #20]
   return(result);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d78:	e007      	b.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0208 	orr.w	r2, r2, #8
 8005d88:	619a      	str	r2, [r3, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	37a0      	adds	r7, #160	; 0xa0
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	0800563f 	.word	0x0800563f

08005d98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_UARTEx_DisableFifoMode+0x16>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e027      	b.n	8005e3a <HAL_UARTEx_DisableFifoMode+0x66>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2224      	movs	r2, #36	; 0x24
 8005df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0201 	bic.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e02d      	b.n	8005eba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2224      	movs	r2, #36	; 0x24
 8005e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f850 	bl	8005f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e02d      	b.n	8005f36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	; 0x24
 8005ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0201 	bic.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f812 	bl	8005f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f60:	e031      	b.n	8005fc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f62:	2308      	movs	r3, #8
 8005f64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f66:	2308      	movs	r3, #8
 8005f68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	0e5b      	lsrs	r3, r3, #25
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	0f5b      	lsrs	r3, r3, #29
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	7b3a      	ldrb	r2, [r7, #12]
 8005f8e:	4911      	ldr	r1, [pc, #68]	; (8005fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005f90:	5c8a      	ldrb	r2, [r1, r2]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f96:	7b3a      	ldrb	r2, [r7, #12]
 8005f98:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005f9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	7b7a      	ldrb	r2, [r7, #13]
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005fae:	5c8a      	ldrb	r2, [r1, r2]
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb4:	7b7a      	ldrb	r2, [r7, #13]
 8005fb6:	4908      	ldr	r1, [pc, #32]	; (8005fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005fb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	08007648 	.word	0x08007648
 8005fd8:	08007650 	.word	0x08007650

08005fdc <atoi>:
 8005fdc:	220a      	movs	r2, #10
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f000 b930 	b.w	8006244 <strtol>

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	200000a4 	.word	0x200000a4

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	; (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	; (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	; (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	; (8006034 <__libc_init_array+0x44>)
 8006004:	f001 fade 	bl	80075c4 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	080078a8 	.word	0x080078a8
 800602c:	080078a8 	.word	0x080078a8
 8006030:	080078a8 	.word	0x080078a8
 8006034:	080078ac 	.word	0x080078ac

08006038 <memset>:
 8006038:	4402      	add	r2, r0
 800603a:	4603      	mov	r3, r0
 800603c:	4293      	cmp	r3, r2
 800603e:	d100      	bne.n	8006042 <memset+0xa>
 8006040:	4770      	bx	lr
 8006042:	f803 1b01 	strb.w	r1, [r3], #1
 8006046:	e7f9      	b.n	800603c <memset+0x4>

08006048 <siprintf>:
 8006048:	b40e      	push	{r1, r2, r3}
 800604a:	b500      	push	{lr}
 800604c:	b09c      	sub	sp, #112	; 0x70
 800604e:	ab1d      	add	r3, sp, #116	; 0x74
 8006050:	9002      	str	r0, [sp, #8]
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006058:	4809      	ldr	r0, [pc, #36]	; (8006080 <siprintf+0x38>)
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	9104      	str	r1, [sp, #16]
 800605e:	4909      	ldr	r1, [pc, #36]	; (8006084 <siprintf+0x3c>)
 8006060:	f853 2b04 	ldr.w	r2, [r3], #4
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	a902      	add	r1, sp, #8
 800606c:	f000 fa68 	bl	8006540 <_svfiprintf_r>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	b01c      	add	sp, #112	; 0x70
 8006078:	f85d eb04 	ldr.w	lr, [sp], #4
 800607c:	b003      	add	sp, #12
 800607e:	4770      	bx	lr
 8006080:	200000a4 	.word	0x200000a4
 8006084:	ffff0208 	.word	0xffff0208

08006088 <strtok>:
 8006088:	4b16      	ldr	r3, [pc, #88]	; (80060e4 <strtok+0x5c>)
 800608a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800608c:	681e      	ldr	r6, [r3, #0]
 800608e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006090:	4605      	mov	r5, r0
 8006092:	b9fc      	cbnz	r4, 80060d4 <strtok+0x4c>
 8006094:	2050      	movs	r0, #80	; 0x50
 8006096:	9101      	str	r1, [sp, #4]
 8006098:	f000 f90e 	bl	80062b8 <malloc>
 800609c:	9901      	ldr	r1, [sp, #4]
 800609e:	65b0      	str	r0, [r6, #88]	; 0x58
 80060a0:	4602      	mov	r2, r0
 80060a2:	b920      	cbnz	r0, 80060ae <strtok+0x26>
 80060a4:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <strtok+0x60>)
 80060a6:	4811      	ldr	r0, [pc, #68]	; (80060ec <strtok+0x64>)
 80060a8:	2157      	movs	r1, #87	; 0x57
 80060aa:	f000 f8d5 	bl	8006258 <__assert_func>
 80060ae:	e9c0 4400 	strd	r4, r4, [r0]
 80060b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80060b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80060ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80060be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80060c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80060c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80060ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80060ce:	6184      	str	r4, [r0, #24]
 80060d0:	7704      	strb	r4, [r0, #28]
 80060d2:	6244      	str	r4, [r0, #36]	; 0x24
 80060d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80060d6:	2301      	movs	r3, #1
 80060d8:	4628      	mov	r0, r5
 80060da:	b002      	add	sp, #8
 80060dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060e0:	f000 b806 	b.w	80060f0 <__strtok_r>
 80060e4:	200000a4 	.word	0x200000a4
 80060e8:	0800765c 	.word	0x0800765c
 80060ec:	08007673 	.word	0x08007673

080060f0 <__strtok_r>:
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	b908      	cbnz	r0, 80060f8 <__strtok_r+0x8>
 80060f4:	6810      	ldr	r0, [r2, #0]
 80060f6:	b188      	cbz	r0, 800611c <__strtok_r+0x2c>
 80060f8:	4604      	mov	r4, r0
 80060fa:	4620      	mov	r0, r4
 80060fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006100:	460f      	mov	r7, r1
 8006102:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006106:	b91e      	cbnz	r6, 8006110 <__strtok_r+0x20>
 8006108:	b965      	cbnz	r5, 8006124 <__strtok_r+0x34>
 800610a:	6015      	str	r5, [r2, #0]
 800610c:	4628      	mov	r0, r5
 800610e:	e005      	b.n	800611c <__strtok_r+0x2c>
 8006110:	42b5      	cmp	r5, r6
 8006112:	d1f6      	bne.n	8006102 <__strtok_r+0x12>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <__strtok_r+0xa>
 8006118:	6014      	str	r4, [r2, #0]
 800611a:	7003      	strb	r3, [r0, #0]
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	461c      	mov	r4, r3
 8006120:	e00c      	b.n	800613c <__strtok_r+0x4c>
 8006122:	b915      	cbnz	r5, 800612a <__strtok_r+0x3a>
 8006124:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006128:	460e      	mov	r6, r1
 800612a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800612e:	42ab      	cmp	r3, r5
 8006130:	d1f7      	bne.n	8006122 <__strtok_r+0x32>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f3      	beq.n	800611e <__strtok_r+0x2e>
 8006136:	2300      	movs	r3, #0
 8006138:	f804 3c01 	strb.w	r3, [r4, #-1]
 800613c:	6014      	str	r4, [r2, #0]
 800613e:	e7ed      	b.n	800611c <__strtok_r+0x2c>

08006140 <_strtol_l.constprop.0>:
 8006140:	2b01      	cmp	r3, #1
 8006142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006146:	d001      	beq.n	800614c <_strtol_l.constprop.0+0xc>
 8006148:	2b24      	cmp	r3, #36	; 0x24
 800614a:	d906      	bls.n	800615a <_strtol_l.constprop.0+0x1a>
 800614c:	f7ff ff4a 	bl	8005fe4 <__errno>
 8006150:	2316      	movs	r3, #22
 8006152:	6003      	str	r3, [r0, #0]
 8006154:	2000      	movs	r0, #0
 8006156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006240 <_strtol_l.constprop.0+0x100>
 800615e:	460d      	mov	r5, r1
 8006160:	462e      	mov	r6, r5
 8006162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006166:	f814 700c 	ldrb.w	r7, [r4, ip]
 800616a:	f017 0708 	ands.w	r7, r7, #8
 800616e:	d1f7      	bne.n	8006160 <_strtol_l.constprop.0+0x20>
 8006170:	2c2d      	cmp	r4, #45	; 0x2d
 8006172:	d132      	bne.n	80061da <_strtol_l.constprop.0+0x9a>
 8006174:	782c      	ldrb	r4, [r5, #0]
 8006176:	2701      	movs	r7, #1
 8006178:	1cb5      	adds	r5, r6, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d05b      	beq.n	8006236 <_strtol_l.constprop.0+0xf6>
 800617e:	2b10      	cmp	r3, #16
 8006180:	d109      	bne.n	8006196 <_strtol_l.constprop.0+0x56>
 8006182:	2c30      	cmp	r4, #48	; 0x30
 8006184:	d107      	bne.n	8006196 <_strtol_l.constprop.0+0x56>
 8006186:	782c      	ldrb	r4, [r5, #0]
 8006188:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800618c:	2c58      	cmp	r4, #88	; 0x58
 800618e:	d14d      	bne.n	800622c <_strtol_l.constprop.0+0xec>
 8006190:	786c      	ldrb	r4, [r5, #1]
 8006192:	2310      	movs	r3, #16
 8006194:	3502      	adds	r5, #2
 8006196:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800619a:	f108 38ff 	add.w	r8, r8, #4294967295
 800619e:	f04f 0c00 	mov.w	ip, #0
 80061a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80061a6:	4666      	mov	r6, ip
 80061a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80061ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061b0:	f1be 0f09 	cmp.w	lr, #9
 80061b4:	d816      	bhi.n	80061e4 <_strtol_l.constprop.0+0xa4>
 80061b6:	4674      	mov	r4, lr
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	dd24      	ble.n	8006206 <_strtol_l.constprop.0+0xc6>
 80061bc:	f1bc 0f00 	cmp.w	ip, #0
 80061c0:	db1e      	blt.n	8006200 <_strtol_l.constprop.0+0xc0>
 80061c2:	45b1      	cmp	r9, r6
 80061c4:	d31c      	bcc.n	8006200 <_strtol_l.constprop.0+0xc0>
 80061c6:	d101      	bne.n	80061cc <_strtol_l.constprop.0+0x8c>
 80061c8:	45a2      	cmp	sl, r4
 80061ca:	db19      	blt.n	8006200 <_strtol_l.constprop.0+0xc0>
 80061cc:	fb06 4603 	mla	r6, r6, r3, r4
 80061d0:	f04f 0c01 	mov.w	ip, #1
 80061d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061d8:	e7e8      	b.n	80061ac <_strtol_l.constprop.0+0x6c>
 80061da:	2c2b      	cmp	r4, #43	; 0x2b
 80061dc:	bf04      	itt	eq
 80061de:	782c      	ldrbeq	r4, [r5, #0]
 80061e0:	1cb5      	addeq	r5, r6, #2
 80061e2:	e7ca      	b.n	800617a <_strtol_l.constprop.0+0x3a>
 80061e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80061e8:	f1be 0f19 	cmp.w	lr, #25
 80061ec:	d801      	bhi.n	80061f2 <_strtol_l.constprop.0+0xb2>
 80061ee:	3c37      	subs	r4, #55	; 0x37
 80061f0:	e7e2      	b.n	80061b8 <_strtol_l.constprop.0+0x78>
 80061f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80061f6:	f1be 0f19 	cmp.w	lr, #25
 80061fa:	d804      	bhi.n	8006206 <_strtol_l.constprop.0+0xc6>
 80061fc:	3c57      	subs	r4, #87	; 0x57
 80061fe:	e7db      	b.n	80061b8 <_strtol_l.constprop.0+0x78>
 8006200:	f04f 3cff 	mov.w	ip, #4294967295
 8006204:	e7e6      	b.n	80061d4 <_strtol_l.constprop.0+0x94>
 8006206:	f1bc 0f00 	cmp.w	ip, #0
 800620a:	da05      	bge.n	8006218 <_strtol_l.constprop.0+0xd8>
 800620c:	2322      	movs	r3, #34	; 0x22
 800620e:	6003      	str	r3, [r0, #0]
 8006210:	4646      	mov	r6, r8
 8006212:	b942      	cbnz	r2, 8006226 <_strtol_l.constprop.0+0xe6>
 8006214:	4630      	mov	r0, r6
 8006216:	e79e      	b.n	8006156 <_strtol_l.constprop.0+0x16>
 8006218:	b107      	cbz	r7, 800621c <_strtol_l.constprop.0+0xdc>
 800621a:	4276      	negs	r6, r6
 800621c:	2a00      	cmp	r2, #0
 800621e:	d0f9      	beq.n	8006214 <_strtol_l.constprop.0+0xd4>
 8006220:	f1bc 0f00 	cmp.w	ip, #0
 8006224:	d000      	beq.n	8006228 <_strtol_l.constprop.0+0xe8>
 8006226:	1e69      	subs	r1, r5, #1
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	e7f3      	b.n	8006214 <_strtol_l.constprop.0+0xd4>
 800622c:	2430      	movs	r4, #48	; 0x30
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1b1      	bne.n	8006196 <_strtol_l.constprop.0+0x56>
 8006232:	2308      	movs	r3, #8
 8006234:	e7af      	b.n	8006196 <_strtol_l.constprop.0+0x56>
 8006236:	2c30      	cmp	r4, #48	; 0x30
 8006238:	d0a5      	beq.n	8006186 <_strtol_l.constprop.0+0x46>
 800623a:	230a      	movs	r3, #10
 800623c:	e7ab      	b.n	8006196 <_strtol_l.constprop.0+0x56>
 800623e:	bf00      	nop
 8006240:	0800770d 	.word	0x0800770d

08006244 <strtol>:
 8006244:	4613      	mov	r3, r2
 8006246:	460a      	mov	r2, r1
 8006248:	4601      	mov	r1, r0
 800624a:	4802      	ldr	r0, [pc, #8]	; (8006254 <strtol+0x10>)
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	f7ff bf77 	b.w	8006140 <_strtol_l.constprop.0>
 8006252:	bf00      	nop
 8006254:	200000a4 	.word	0x200000a4

08006258 <__assert_func>:
 8006258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800625a:	4614      	mov	r4, r2
 800625c:	461a      	mov	r2, r3
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <__assert_func+0x2c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4605      	mov	r5, r0
 8006264:	68d8      	ldr	r0, [r3, #12]
 8006266:	b14c      	cbz	r4, 800627c <__assert_func+0x24>
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <__assert_func+0x30>)
 800626a:	9100      	str	r1, [sp, #0]
 800626c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006270:	4906      	ldr	r1, [pc, #24]	; (800628c <__assert_func+0x34>)
 8006272:	462b      	mov	r3, r5
 8006274:	f000 f80e 	bl	8006294 <fiprintf>
 8006278:	f000 fe20 	bl	8006ebc <abort>
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <__assert_func+0x38>)
 800627e:	461c      	mov	r4, r3
 8006280:	e7f3      	b.n	800626a <__assert_func+0x12>
 8006282:	bf00      	nop
 8006284:	200000a4 	.word	0x200000a4
 8006288:	080076d0 	.word	0x080076d0
 800628c:	080076dd 	.word	0x080076dd
 8006290:	0800770b 	.word	0x0800770b

08006294 <fiprintf>:
 8006294:	b40e      	push	{r1, r2, r3}
 8006296:	b503      	push	{r0, r1, lr}
 8006298:	4601      	mov	r1, r0
 800629a:	ab03      	add	r3, sp, #12
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <fiprintf+0x20>)
 800629e:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a2:	6800      	ldr	r0, [r0, #0]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	f000 fa75 	bl	8006794 <_vfiprintf_r>
 80062aa:	b002      	add	sp, #8
 80062ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b0:	b003      	add	sp, #12
 80062b2:	4770      	bx	lr
 80062b4:	200000a4 	.word	0x200000a4

080062b8 <malloc>:
 80062b8:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <malloc+0xc>)
 80062ba:	4601      	mov	r1, r0
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	f000 b86f 	b.w	80063a0 <_malloc_r>
 80062c2:	bf00      	nop
 80062c4:	200000a4 	.word	0x200000a4

080062c8 <_free_r>:
 80062c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062ca:	2900      	cmp	r1, #0
 80062cc:	d044      	beq.n	8006358 <_free_r+0x90>
 80062ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d2:	9001      	str	r0, [sp, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f1a1 0404 	sub.w	r4, r1, #4
 80062da:	bfb8      	it	lt
 80062dc:	18e4      	addlt	r4, r4, r3
 80062de:	f001 f83d 	bl	800735c <__malloc_lock>
 80062e2:	4a1e      	ldr	r2, [pc, #120]	; (800635c <_free_r+0x94>)
 80062e4:	9801      	ldr	r0, [sp, #4]
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	b933      	cbnz	r3, 80062f8 <_free_r+0x30>
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	6014      	str	r4, [r2, #0]
 80062ee:	b003      	add	sp, #12
 80062f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f4:	f001 b838 	b.w	8007368 <__malloc_unlock>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d908      	bls.n	800630e <_free_r+0x46>
 80062fc:	6825      	ldr	r5, [r4, #0]
 80062fe:	1961      	adds	r1, r4, r5
 8006300:	428b      	cmp	r3, r1
 8006302:	bf01      	itttt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	1949      	addeq	r1, r1, r5
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	e7ed      	b.n	80062ea <_free_r+0x22>
 800630e:	461a      	mov	r2, r3
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b10b      	cbz	r3, 8006318 <_free_r+0x50>
 8006314:	42a3      	cmp	r3, r4
 8006316:	d9fa      	bls.n	800630e <_free_r+0x46>
 8006318:	6811      	ldr	r1, [r2, #0]
 800631a:	1855      	adds	r5, r2, r1
 800631c:	42a5      	cmp	r5, r4
 800631e:	d10b      	bne.n	8006338 <_free_r+0x70>
 8006320:	6824      	ldr	r4, [r4, #0]
 8006322:	4421      	add	r1, r4
 8006324:	1854      	adds	r4, r2, r1
 8006326:	42a3      	cmp	r3, r4
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	d1e0      	bne.n	80062ee <_free_r+0x26>
 800632c:	681c      	ldr	r4, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	6053      	str	r3, [r2, #4]
 8006332:	4421      	add	r1, r4
 8006334:	6011      	str	r1, [r2, #0]
 8006336:	e7da      	b.n	80062ee <_free_r+0x26>
 8006338:	d902      	bls.n	8006340 <_free_r+0x78>
 800633a:	230c      	movs	r3, #12
 800633c:	6003      	str	r3, [r0, #0]
 800633e:	e7d6      	b.n	80062ee <_free_r+0x26>
 8006340:	6825      	ldr	r5, [r4, #0]
 8006342:	1961      	adds	r1, r4, r5
 8006344:	428b      	cmp	r3, r1
 8006346:	bf04      	itt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	bf04      	itt	eq
 8006350:	1949      	addeq	r1, r1, r5
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	6054      	str	r4, [r2, #4]
 8006356:	e7ca      	b.n	80062ee <_free_r+0x26>
 8006358:	b003      	add	sp, #12
 800635a:	bd30      	pop	{r4, r5, pc}
 800635c:	20000250 	.word	0x20000250

08006360 <sbrk_aligned>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4e0e      	ldr	r6, [pc, #56]	; (800639c <sbrk_aligned+0x3c>)
 8006364:	460c      	mov	r4, r1
 8006366:	6831      	ldr	r1, [r6, #0]
 8006368:	4605      	mov	r5, r0
 800636a:	b911      	cbnz	r1, 8006372 <sbrk_aligned+0x12>
 800636c:	f000 fcd6 	bl	8006d1c <_sbrk_r>
 8006370:	6030      	str	r0, [r6, #0]
 8006372:	4621      	mov	r1, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f000 fcd1 	bl	8006d1c <_sbrk_r>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d00a      	beq.n	8006394 <sbrk_aligned+0x34>
 800637e:	1cc4      	adds	r4, r0, #3
 8006380:	f024 0403 	bic.w	r4, r4, #3
 8006384:	42a0      	cmp	r0, r4
 8006386:	d007      	beq.n	8006398 <sbrk_aligned+0x38>
 8006388:	1a21      	subs	r1, r4, r0
 800638a:	4628      	mov	r0, r5
 800638c:	f000 fcc6 	bl	8006d1c <_sbrk_r>
 8006390:	3001      	adds	r0, #1
 8006392:	d101      	bne.n	8006398 <sbrk_aligned+0x38>
 8006394:	f04f 34ff 	mov.w	r4, #4294967295
 8006398:	4620      	mov	r0, r4
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	20000254 	.word	0x20000254

080063a0 <_malloc_r>:
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	1ccd      	adds	r5, r1, #3
 80063a6:	f025 0503 	bic.w	r5, r5, #3
 80063aa:	3508      	adds	r5, #8
 80063ac:	2d0c      	cmp	r5, #12
 80063ae:	bf38      	it	cc
 80063b0:	250c      	movcc	r5, #12
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	4607      	mov	r7, r0
 80063b6:	db01      	blt.n	80063bc <_malloc_r+0x1c>
 80063b8:	42a9      	cmp	r1, r5
 80063ba:	d905      	bls.n	80063c8 <_malloc_r+0x28>
 80063bc:	230c      	movs	r3, #12
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	2600      	movs	r6, #0
 80063c2:	4630      	mov	r0, r6
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c8:	4e2e      	ldr	r6, [pc, #184]	; (8006484 <_malloc_r+0xe4>)
 80063ca:	f000 ffc7 	bl	800735c <__malloc_lock>
 80063ce:	6833      	ldr	r3, [r6, #0]
 80063d0:	461c      	mov	r4, r3
 80063d2:	bb34      	cbnz	r4, 8006422 <_malloc_r+0x82>
 80063d4:	4629      	mov	r1, r5
 80063d6:	4638      	mov	r0, r7
 80063d8:	f7ff ffc2 	bl	8006360 <sbrk_aligned>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	4604      	mov	r4, r0
 80063e0:	d14d      	bne.n	800647e <_malloc_r+0xde>
 80063e2:	6834      	ldr	r4, [r6, #0]
 80063e4:	4626      	mov	r6, r4
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	d140      	bne.n	800646c <_malloc_r+0xcc>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	4631      	mov	r1, r6
 80063ee:	4638      	mov	r0, r7
 80063f0:	eb04 0803 	add.w	r8, r4, r3
 80063f4:	f000 fc92 	bl	8006d1c <_sbrk_r>
 80063f8:	4580      	cmp	r8, r0
 80063fa:	d13a      	bne.n	8006472 <_malloc_r+0xd2>
 80063fc:	6821      	ldr	r1, [r4, #0]
 80063fe:	3503      	adds	r5, #3
 8006400:	1a6d      	subs	r5, r5, r1
 8006402:	f025 0503 	bic.w	r5, r5, #3
 8006406:	3508      	adds	r5, #8
 8006408:	2d0c      	cmp	r5, #12
 800640a:	bf38      	it	cc
 800640c:	250c      	movcc	r5, #12
 800640e:	4629      	mov	r1, r5
 8006410:	4638      	mov	r0, r7
 8006412:	f7ff ffa5 	bl	8006360 <sbrk_aligned>
 8006416:	3001      	adds	r0, #1
 8006418:	d02b      	beq.n	8006472 <_malloc_r+0xd2>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	442b      	add	r3, r5
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	e00e      	b.n	8006440 <_malloc_r+0xa0>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	1b52      	subs	r2, r2, r5
 8006426:	d41e      	bmi.n	8006466 <_malloc_r+0xc6>
 8006428:	2a0b      	cmp	r2, #11
 800642a:	d916      	bls.n	800645a <_malloc_r+0xba>
 800642c:	1961      	adds	r1, r4, r5
 800642e:	42a3      	cmp	r3, r4
 8006430:	6025      	str	r5, [r4, #0]
 8006432:	bf18      	it	ne
 8006434:	6059      	strne	r1, [r3, #4]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	bf08      	it	eq
 800643a:	6031      	streq	r1, [r6, #0]
 800643c:	5162      	str	r2, [r4, r5]
 800643e:	604b      	str	r3, [r1, #4]
 8006440:	4638      	mov	r0, r7
 8006442:	f104 060b 	add.w	r6, r4, #11
 8006446:	f000 ff8f 	bl	8007368 <__malloc_unlock>
 800644a:	f026 0607 	bic.w	r6, r6, #7
 800644e:	1d23      	adds	r3, r4, #4
 8006450:	1af2      	subs	r2, r6, r3
 8006452:	d0b6      	beq.n	80063c2 <_malloc_r+0x22>
 8006454:	1b9b      	subs	r3, r3, r6
 8006456:	50a3      	str	r3, [r4, r2]
 8006458:	e7b3      	b.n	80063c2 <_malloc_r+0x22>
 800645a:	6862      	ldr	r2, [r4, #4]
 800645c:	42a3      	cmp	r3, r4
 800645e:	bf0c      	ite	eq
 8006460:	6032      	streq	r2, [r6, #0]
 8006462:	605a      	strne	r2, [r3, #4]
 8006464:	e7ec      	b.n	8006440 <_malloc_r+0xa0>
 8006466:	4623      	mov	r3, r4
 8006468:	6864      	ldr	r4, [r4, #4]
 800646a:	e7b2      	b.n	80063d2 <_malloc_r+0x32>
 800646c:	4634      	mov	r4, r6
 800646e:	6876      	ldr	r6, [r6, #4]
 8006470:	e7b9      	b.n	80063e6 <_malloc_r+0x46>
 8006472:	230c      	movs	r3, #12
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	4638      	mov	r0, r7
 8006478:	f000 ff76 	bl	8007368 <__malloc_unlock>
 800647c:	e7a1      	b.n	80063c2 <_malloc_r+0x22>
 800647e:	6025      	str	r5, [r4, #0]
 8006480:	e7de      	b.n	8006440 <_malloc_r+0xa0>
 8006482:	bf00      	nop
 8006484:	20000250 	.word	0x20000250

08006488 <__ssputs_r>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	688e      	ldr	r6, [r1, #8]
 800648e:	429e      	cmp	r6, r3
 8006490:	4682      	mov	sl, r0
 8006492:	460c      	mov	r4, r1
 8006494:	4690      	mov	r8, r2
 8006496:	461f      	mov	r7, r3
 8006498:	d838      	bhi.n	800650c <__ssputs_r+0x84>
 800649a:	898a      	ldrh	r2, [r1, #12]
 800649c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064a0:	d032      	beq.n	8006508 <__ssputs_r+0x80>
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	6909      	ldr	r1, [r1, #16]
 80064a6:	eba5 0901 	sub.w	r9, r5, r1
 80064aa:	6965      	ldr	r5, [r4, #20]
 80064ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064b4:	3301      	adds	r3, #1
 80064b6:	444b      	add	r3, r9
 80064b8:	106d      	asrs	r5, r5, #1
 80064ba:	429d      	cmp	r5, r3
 80064bc:	bf38      	it	cc
 80064be:	461d      	movcc	r5, r3
 80064c0:	0553      	lsls	r3, r2, #21
 80064c2:	d531      	bpl.n	8006528 <__ssputs_r+0xa0>
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7ff ff6b 	bl	80063a0 <_malloc_r>
 80064ca:	4606      	mov	r6, r0
 80064cc:	b950      	cbnz	r0, 80064e4 <__ssputs_r+0x5c>
 80064ce:	230c      	movs	r3, #12
 80064d0:	f8ca 3000 	str.w	r3, [sl]
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	6921      	ldr	r1, [r4, #16]
 80064e6:	464a      	mov	r2, r9
 80064e8:	f000 ff10 	bl	800730c <memcpy>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	6126      	str	r6, [r4, #16]
 80064fa:	6165      	str	r5, [r4, #20]
 80064fc:	444e      	add	r6, r9
 80064fe:	eba5 0509 	sub.w	r5, r5, r9
 8006502:	6026      	str	r6, [r4, #0]
 8006504:	60a5      	str	r5, [r4, #8]
 8006506:	463e      	mov	r6, r7
 8006508:	42be      	cmp	r6, r7
 800650a:	d900      	bls.n	800650e <__ssputs_r+0x86>
 800650c:	463e      	mov	r6, r7
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	4632      	mov	r2, r6
 8006512:	4641      	mov	r1, r8
 8006514:	f000 ff08 	bl	8007328 <memmove>
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	1b9b      	subs	r3, r3, r6
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	4433      	add	r3, r6
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	2000      	movs	r0, #0
 8006526:	e7db      	b.n	80064e0 <__ssputs_r+0x58>
 8006528:	462a      	mov	r2, r5
 800652a:	f000 ff23 	bl	8007374 <_realloc_r>
 800652e:	4606      	mov	r6, r0
 8006530:	2800      	cmp	r0, #0
 8006532:	d1e1      	bne.n	80064f8 <__ssputs_r+0x70>
 8006534:	6921      	ldr	r1, [r4, #16]
 8006536:	4650      	mov	r0, sl
 8006538:	f7ff fec6 	bl	80062c8 <_free_r>
 800653c:	e7c7      	b.n	80064ce <__ssputs_r+0x46>
	...

08006540 <_svfiprintf_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	4698      	mov	r8, r3
 8006546:	898b      	ldrh	r3, [r1, #12]
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	b09d      	sub	sp, #116	; 0x74
 800654c:	4607      	mov	r7, r0
 800654e:	460d      	mov	r5, r1
 8006550:	4614      	mov	r4, r2
 8006552:	d50e      	bpl.n	8006572 <_svfiprintf_r+0x32>
 8006554:	690b      	ldr	r3, [r1, #16]
 8006556:	b963      	cbnz	r3, 8006572 <_svfiprintf_r+0x32>
 8006558:	2140      	movs	r1, #64	; 0x40
 800655a:	f7ff ff21 	bl	80063a0 <_malloc_r>
 800655e:	6028      	str	r0, [r5, #0]
 8006560:	6128      	str	r0, [r5, #16]
 8006562:	b920      	cbnz	r0, 800656e <_svfiprintf_r+0x2e>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e0d1      	b.n	8006712 <_svfiprintf_r+0x1d2>
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	616b      	str	r3, [r5, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	2320      	movs	r3, #32
 8006578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800657c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006580:	2330      	movs	r3, #48	; 0x30
 8006582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800672c <_svfiprintf_r+0x1ec>
 8006586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800658a:	f04f 0901 	mov.w	r9, #1
 800658e:	4623      	mov	r3, r4
 8006590:	469a      	mov	sl, r3
 8006592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006596:	b10a      	cbz	r2, 800659c <_svfiprintf_r+0x5c>
 8006598:	2a25      	cmp	r2, #37	; 0x25
 800659a:	d1f9      	bne.n	8006590 <_svfiprintf_r+0x50>
 800659c:	ebba 0b04 	subs.w	fp, sl, r4
 80065a0:	d00b      	beq.n	80065ba <_svfiprintf_r+0x7a>
 80065a2:	465b      	mov	r3, fp
 80065a4:	4622      	mov	r2, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ff6d 	bl	8006488 <__ssputs_r>
 80065ae:	3001      	adds	r0, #1
 80065b0:	f000 80aa 	beq.w	8006708 <_svfiprintf_r+0x1c8>
 80065b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b6:	445a      	add	r2, fp
 80065b8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a2 	beq.w	8006708 <_svfiprintf_r+0x1c8>
 80065c4:	2300      	movs	r3, #0
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ce:	f10a 0a01 	add.w	sl, sl, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065da:	931a      	str	r3, [sp, #104]	; 0x68
 80065dc:	4654      	mov	r4, sl
 80065de:	2205      	movs	r2, #5
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	4851      	ldr	r0, [pc, #324]	; (800672c <_svfiprintf_r+0x1ec>)
 80065e6:	f7f9 fe2b 	bl	8000240 <memchr>
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	b9d8      	cbnz	r0, 8006626 <_svfiprintf_r+0xe6>
 80065ee:	06d0      	lsls	r0, r2, #27
 80065f0:	bf44      	itt	mi
 80065f2:	2320      	movmi	r3, #32
 80065f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f8:	0711      	lsls	r1, r2, #28
 80065fa:	bf44      	itt	mi
 80065fc:	232b      	movmi	r3, #43	; 0x2b
 80065fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006602:	f89a 3000 	ldrb.w	r3, [sl]
 8006606:	2b2a      	cmp	r3, #42	; 0x2a
 8006608:	d015      	beq.n	8006636 <_svfiprintf_r+0xf6>
 800660a:	9a07      	ldr	r2, [sp, #28]
 800660c:	4654      	mov	r4, sl
 800660e:	2000      	movs	r0, #0
 8006610:	f04f 0c0a 	mov.w	ip, #10
 8006614:	4621      	mov	r1, r4
 8006616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661a:	3b30      	subs	r3, #48	; 0x30
 800661c:	2b09      	cmp	r3, #9
 800661e:	d94e      	bls.n	80066be <_svfiprintf_r+0x17e>
 8006620:	b1b0      	cbz	r0, 8006650 <_svfiprintf_r+0x110>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e014      	b.n	8006650 <_svfiprintf_r+0x110>
 8006626:	eba0 0308 	sub.w	r3, r0, r8
 800662a:	fa09 f303 	lsl.w	r3, r9, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	46a2      	mov	sl, r4
 8006634:	e7d2      	b.n	80065dc <_svfiprintf_r+0x9c>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	9103      	str	r1, [sp, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbb      	ittet	lt
 8006642:	425b      	neglt	r3, r3
 8006644:	f042 0202 	orrlt.w	r2, r2, #2
 8006648:	9307      	strge	r3, [sp, #28]
 800664a:	9307      	strlt	r3, [sp, #28]
 800664c:	bfb8      	it	lt
 800664e:	9204      	strlt	r2, [sp, #16]
 8006650:	7823      	ldrb	r3, [r4, #0]
 8006652:	2b2e      	cmp	r3, #46	; 0x2e
 8006654:	d10c      	bne.n	8006670 <_svfiprintf_r+0x130>
 8006656:	7863      	ldrb	r3, [r4, #1]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d135      	bne.n	80066c8 <_svfiprintf_r+0x188>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	1d1a      	adds	r2, r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	9203      	str	r2, [sp, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	bfb8      	it	lt
 8006668:	f04f 33ff 	movlt.w	r3, #4294967295
 800666c:	3402      	adds	r4, #2
 800666e:	9305      	str	r3, [sp, #20]
 8006670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800673c <_svfiprintf_r+0x1fc>
 8006674:	7821      	ldrb	r1, [r4, #0]
 8006676:	2203      	movs	r2, #3
 8006678:	4650      	mov	r0, sl
 800667a:	f7f9 fde1 	bl	8000240 <memchr>
 800667e:	b140      	cbz	r0, 8006692 <_svfiprintf_r+0x152>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	eba0 000a 	sub.w	r0, r0, sl
 8006686:	fa03 f000 	lsl.w	r0, r3, r0
 800668a:	9b04      	ldr	r3, [sp, #16]
 800668c:	4303      	orrs	r3, r0
 800668e:	3401      	adds	r4, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006696:	4826      	ldr	r0, [pc, #152]	; (8006730 <_svfiprintf_r+0x1f0>)
 8006698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800669c:	2206      	movs	r2, #6
 800669e:	f7f9 fdcf 	bl	8000240 <memchr>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d038      	beq.n	8006718 <_svfiprintf_r+0x1d8>
 80066a6:	4b23      	ldr	r3, [pc, #140]	; (8006734 <_svfiprintf_r+0x1f4>)
 80066a8:	bb1b      	cbnz	r3, 80066f2 <_svfiprintf_r+0x1b2>
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	3307      	adds	r3, #7
 80066ae:	f023 0307 	bic.w	r3, r3, #7
 80066b2:	3308      	adds	r3, #8
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	4433      	add	r3, r6
 80066ba:	9309      	str	r3, [sp, #36]	; 0x24
 80066bc:	e767      	b.n	800658e <_svfiprintf_r+0x4e>
 80066be:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c2:	460c      	mov	r4, r1
 80066c4:	2001      	movs	r0, #1
 80066c6:	e7a5      	b.n	8006614 <_svfiprintf_r+0xd4>
 80066c8:	2300      	movs	r3, #0
 80066ca:	3401      	adds	r4, #1
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	4619      	mov	r1, r3
 80066d0:	f04f 0c0a 	mov.w	ip, #10
 80066d4:	4620      	mov	r0, r4
 80066d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066da:	3a30      	subs	r2, #48	; 0x30
 80066dc:	2a09      	cmp	r2, #9
 80066de:	d903      	bls.n	80066e8 <_svfiprintf_r+0x1a8>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0c5      	beq.n	8006670 <_svfiprintf_r+0x130>
 80066e4:	9105      	str	r1, [sp, #20]
 80066e6:	e7c3      	b.n	8006670 <_svfiprintf_r+0x130>
 80066e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ec:	4604      	mov	r4, r0
 80066ee:	2301      	movs	r3, #1
 80066f0:	e7f0      	b.n	80066d4 <_svfiprintf_r+0x194>
 80066f2:	ab03      	add	r3, sp, #12
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	462a      	mov	r2, r5
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <_svfiprintf_r+0x1f8>)
 80066fa:	a904      	add	r1, sp, #16
 80066fc:	4638      	mov	r0, r7
 80066fe:	f3af 8000 	nop.w
 8006702:	1c42      	adds	r2, r0, #1
 8006704:	4606      	mov	r6, r0
 8006706:	d1d6      	bne.n	80066b6 <_svfiprintf_r+0x176>
 8006708:	89ab      	ldrh	r3, [r5, #12]
 800670a:	065b      	lsls	r3, r3, #25
 800670c:	f53f af2c 	bmi.w	8006568 <_svfiprintf_r+0x28>
 8006710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006712:	b01d      	add	sp, #116	; 0x74
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <_svfiprintf_r+0x1f8>)
 8006720:	a904      	add	r1, sp, #16
 8006722:	4638      	mov	r0, r7
 8006724:	f000 f9d4 	bl	8006ad0 <_printf_i>
 8006728:	e7eb      	b.n	8006702 <_svfiprintf_r+0x1c2>
 800672a:	bf00      	nop
 800672c:	0800780d 	.word	0x0800780d
 8006730:	08007817 	.word	0x08007817
 8006734:	00000000 	.word	0x00000000
 8006738:	08006489 	.word	0x08006489
 800673c:	08007813 	.word	0x08007813

08006740 <__sfputc_r>:
 8006740:	6893      	ldr	r3, [r2, #8]
 8006742:	3b01      	subs	r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	b410      	push	{r4}
 8006748:	6093      	str	r3, [r2, #8]
 800674a:	da08      	bge.n	800675e <__sfputc_r+0x1e>
 800674c:	6994      	ldr	r4, [r2, #24]
 800674e:	42a3      	cmp	r3, r4
 8006750:	db01      	blt.n	8006756 <__sfputc_r+0x16>
 8006752:	290a      	cmp	r1, #10
 8006754:	d103      	bne.n	800675e <__sfputc_r+0x1e>
 8006756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800675a:	f000 baef 	b.w	8006d3c <__swbuf_r>
 800675e:	6813      	ldr	r3, [r2, #0]
 8006760:	1c58      	adds	r0, r3, #1
 8006762:	6010      	str	r0, [r2, #0]
 8006764:	7019      	strb	r1, [r3, #0]
 8006766:	4608      	mov	r0, r1
 8006768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800676c:	4770      	bx	lr

0800676e <__sfputs_r>:
 800676e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	4614      	mov	r4, r2
 8006776:	18d5      	adds	r5, r2, r3
 8006778:	42ac      	cmp	r4, r5
 800677a:	d101      	bne.n	8006780 <__sfputs_r+0x12>
 800677c:	2000      	movs	r0, #0
 800677e:	e007      	b.n	8006790 <__sfputs_r+0x22>
 8006780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006784:	463a      	mov	r2, r7
 8006786:	4630      	mov	r0, r6
 8006788:	f7ff ffda 	bl	8006740 <__sfputc_r>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d1f3      	bne.n	8006778 <__sfputs_r+0xa>
 8006790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006794 <_vfiprintf_r>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	460d      	mov	r5, r1
 800679a:	b09d      	sub	sp, #116	; 0x74
 800679c:	4614      	mov	r4, r2
 800679e:	4698      	mov	r8, r3
 80067a0:	4606      	mov	r6, r0
 80067a2:	b118      	cbz	r0, 80067ac <_vfiprintf_r+0x18>
 80067a4:	6983      	ldr	r3, [r0, #24]
 80067a6:	b90b      	cbnz	r3, 80067ac <_vfiprintf_r+0x18>
 80067a8:	f000 fcaa 	bl	8007100 <__sinit>
 80067ac:	4b89      	ldr	r3, [pc, #548]	; (80069d4 <_vfiprintf_r+0x240>)
 80067ae:	429d      	cmp	r5, r3
 80067b0:	d11b      	bne.n	80067ea <_vfiprintf_r+0x56>
 80067b2:	6875      	ldr	r5, [r6, #4]
 80067b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b6:	07d9      	lsls	r1, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_vfiprintf_r+0x32>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	059a      	lsls	r2, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_vfiprintf_r+0x32>
 80067c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067c2:	f000 fd3b 	bl	800723c <__retarget_lock_acquire_recursive>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	071b      	lsls	r3, r3, #28
 80067ca:	d501      	bpl.n	80067d0 <_vfiprintf_r+0x3c>
 80067cc:	692b      	ldr	r3, [r5, #16]
 80067ce:	b9eb      	cbnz	r3, 800680c <_vfiprintf_r+0x78>
 80067d0:	4629      	mov	r1, r5
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 fb04 	bl	8006de0 <__swsetup_r>
 80067d8:	b1c0      	cbz	r0, 800680c <_vfiprintf_r+0x78>
 80067da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067dc:	07dc      	lsls	r4, r3, #31
 80067de:	d50e      	bpl.n	80067fe <_vfiprintf_r+0x6a>
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	b01d      	add	sp, #116	; 0x74
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	4b7b      	ldr	r3, [pc, #492]	; (80069d8 <_vfiprintf_r+0x244>)
 80067ec:	429d      	cmp	r5, r3
 80067ee:	d101      	bne.n	80067f4 <_vfiprintf_r+0x60>
 80067f0:	68b5      	ldr	r5, [r6, #8]
 80067f2:	e7df      	b.n	80067b4 <_vfiprintf_r+0x20>
 80067f4:	4b79      	ldr	r3, [pc, #484]	; (80069dc <_vfiprintf_r+0x248>)
 80067f6:	429d      	cmp	r5, r3
 80067f8:	bf08      	it	eq
 80067fa:	68f5      	ldreq	r5, [r6, #12]
 80067fc:	e7da      	b.n	80067b4 <_vfiprintf_r+0x20>
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	0598      	lsls	r0, r3, #22
 8006802:	d4ed      	bmi.n	80067e0 <_vfiprintf_r+0x4c>
 8006804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006806:	f000 fd1a 	bl	800723e <__retarget_lock_release_recursive>
 800680a:	e7e9      	b.n	80067e0 <_vfiprintf_r+0x4c>
 800680c:	2300      	movs	r3, #0
 800680e:	9309      	str	r3, [sp, #36]	; 0x24
 8006810:	2320      	movs	r3, #32
 8006812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006816:	f8cd 800c 	str.w	r8, [sp, #12]
 800681a:	2330      	movs	r3, #48	; 0x30
 800681c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069e0 <_vfiprintf_r+0x24c>
 8006820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006824:	f04f 0901 	mov.w	r9, #1
 8006828:	4623      	mov	r3, r4
 800682a:	469a      	mov	sl, r3
 800682c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006830:	b10a      	cbz	r2, 8006836 <_vfiprintf_r+0xa2>
 8006832:	2a25      	cmp	r2, #37	; 0x25
 8006834:	d1f9      	bne.n	800682a <_vfiprintf_r+0x96>
 8006836:	ebba 0b04 	subs.w	fp, sl, r4
 800683a:	d00b      	beq.n	8006854 <_vfiprintf_r+0xc0>
 800683c:	465b      	mov	r3, fp
 800683e:	4622      	mov	r2, r4
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff ff93 	bl	800676e <__sfputs_r>
 8006848:	3001      	adds	r0, #1
 800684a:	f000 80aa 	beq.w	80069a2 <_vfiprintf_r+0x20e>
 800684e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006850:	445a      	add	r2, fp
 8006852:	9209      	str	r2, [sp, #36]	; 0x24
 8006854:	f89a 3000 	ldrb.w	r3, [sl]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80a2 	beq.w	80069a2 <_vfiprintf_r+0x20e>
 800685e:	2300      	movs	r3, #0
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
 8006864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006868:	f10a 0a01 	add.w	sl, sl, #1
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	9307      	str	r3, [sp, #28]
 8006870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006874:	931a      	str	r3, [sp, #104]	; 0x68
 8006876:	4654      	mov	r4, sl
 8006878:	2205      	movs	r2, #5
 800687a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687e:	4858      	ldr	r0, [pc, #352]	; (80069e0 <_vfiprintf_r+0x24c>)
 8006880:	f7f9 fcde 	bl	8000240 <memchr>
 8006884:	9a04      	ldr	r2, [sp, #16]
 8006886:	b9d8      	cbnz	r0, 80068c0 <_vfiprintf_r+0x12c>
 8006888:	06d1      	lsls	r1, r2, #27
 800688a:	bf44      	itt	mi
 800688c:	2320      	movmi	r3, #32
 800688e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006892:	0713      	lsls	r3, r2, #28
 8006894:	bf44      	itt	mi
 8006896:	232b      	movmi	r3, #43	; 0x2b
 8006898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689c:	f89a 3000 	ldrb.w	r3, [sl]
 80068a0:	2b2a      	cmp	r3, #42	; 0x2a
 80068a2:	d015      	beq.n	80068d0 <_vfiprintf_r+0x13c>
 80068a4:	9a07      	ldr	r2, [sp, #28]
 80068a6:	4654      	mov	r4, sl
 80068a8:	2000      	movs	r0, #0
 80068aa:	f04f 0c0a 	mov.w	ip, #10
 80068ae:	4621      	mov	r1, r4
 80068b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b4:	3b30      	subs	r3, #48	; 0x30
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	d94e      	bls.n	8006958 <_vfiprintf_r+0x1c4>
 80068ba:	b1b0      	cbz	r0, 80068ea <_vfiprintf_r+0x156>
 80068bc:	9207      	str	r2, [sp, #28]
 80068be:	e014      	b.n	80068ea <_vfiprintf_r+0x156>
 80068c0:	eba0 0308 	sub.w	r3, r0, r8
 80068c4:	fa09 f303 	lsl.w	r3, r9, r3
 80068c8:	4313      	orrs	r3, r2
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	46a2      	mov	sl, r4
 80068ce:	e7d2      	b.n	8006876 <_vfiprintf_r+0xe2>
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	1d19      	adds	r1, r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	9103      	str	r1, [sp, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bfbb      	ittet	lt
 80068dc:	425b      	neglt	r3, r3
 80068de:	f042 0202 	orrlt.w	r2, r2, #2
 80068e2:	9307      	strge	r3, [sp, #28]
 80068e4:	9307      	strlt	r3, [sp, #28]
 80068e6:	bfb8      	it	lt
 80068e8:	9204      	strlt	r2, [sp, #16]
 80068ea:	7823      	ldrb	r3, [r4, #0]
 80068ec:	2b2e      	cmp	r3, #46	; 0x2e
 80068ee:	d10c      	bne.n	800690a <_vfiprintf_r+0x176>
 80068f0:	7863      	ldrb	r3, [r4, #1]
 80068f2:	2b2a      	cmp	r3, #42	; 0x2a
 80068f4:	d135      	bne.n	8006962 <_vfiprintf_r+0x1ce>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	1d1a      	adds	r2, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	9203      	str	r2, [sp, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfb8      	it	lt
 8006902:	f04f 33ff 	movlt.w	r3, #4294967295
 8006906:	3402      	adds	r4, #2
 8006908:	9305      	str	r3, [sp, #20]
 800690a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069f0 <_vfiprintf_r+0x25c>
 800690e:	7821      	ldrb	r1, [r4, #0]
 8006910:	2203      	movs	r2, #3
 8006912:	4650      	mov	r0, sl
 8006914:	f7f9 fc94 	bl	8000240 <memchr>
 8006918:	b140      	cbz	r0, 800692c <_vfiprintf_r+0x198>
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	eba0 000a 	sub.w	r0, r0, sl
 8006920:	fa03 f000 	lsl.w	r0, r3, r0
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	4303      	orrs	r3, r0
 8006928:	3401      	adds	r4, #1
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	482c      	ldr	r0, [pc, #176]	; (80069e4 <_vfiprintf_r+0x250>)
 8006932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006936:	2206      	movs	r2, #6
 8006938:	f7f9 fc82 	bl	8000240 <memchr>
 800693c:	2800      	cmp	r0, #0
 800693e:	d03f      	beq.n	80069c0 <_vfiprintf_r+0x22c>
 8006940:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <_vfiprintf_r+0x254>)
 8006942:	bb1b      	cbnz	r3, 800698c <_vfiprintf_r+0x1f8>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	3307      	adds	r3, #7
 8006948:	f023 0307 	bic.w	r3, r3, #7
 800694c:	3308      	adds	r3, #8
 800694e:	9303      	str	r3, [sp, #12]
 8006950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006952:	443b      	add	r3, r7
 8006954:	9309      	str	r3, [sp, #36]	; 0x24
 8006956:	e767      	b.n	8006828 <_vfiprintf_r+0x94>
 8006958:	fb0c 3202 	mla	r2, ip, r2, r3
 800695c:	460c      	mov	r4, r1
 800695e:	2001      	movs	r0, #1
 8006960:	e7a5      	b.n	80068ae <_vfiprintf_r+0x11a>
 8006962:	2300      	movs	r3, #0
 8006964:	3401      	adds	r4, #1
 8006966:	9305      	str	r3, [sp, #20]
 8006968:	4619      	mov	r1, r3
 800696a:	f04f 0c0a 	mov.w	ip, #10
 800696e:	4620      	mov	r0, r4
 8006970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006974:	3a30      	subs	r2, #48	; 0x30
 8006976:	2a09      	cmp	r2, #9
 8006978:	d903      	bls.n	8006982 <_vfiprintf_r+0x1ee>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0c5      	beq.n	800690a <_vfiprintf_r+0x176>
 800697e:	9105      	str	r1, [sp, #20]
 8006980:	e7c3      	b.n	800690a <_vfiprintf_r+0x176>
 8006982:	fb0c 2101 	mla	r1, ip, r1, r2
 8006986:	4604      	mov	r4, r0
 8006988:	2301      	movs	r3, #1
 800698a:	e7f0      	b.n	800696e <_vfiprintf_r+0x1da>
 800698c:	ab03      	add	r3, sp, #12
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	462a      	mov	r2, r5
 8006992:	4b16      	ldr	r3, [pc, #88]	; (80069ec <_vfiprintf_r+0x258>)
 8006994:	a904      	add	r1, sp, #16
 8006996:	4630      	mov	r0, r6
 8006998:	f3af 8000 	nop.w
 800699c:	4607      	mov	r7, r0
 800699e:	1c78      	adds	r0, r7, #1
 80069a0:	d1d6      	bne.n	8006950 <_vfiprintf_r+0x1bc>
 80069a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a4:	07d9      	lsls	r1, r3, #31
 80069a6:	d405      	bmi.n	80069b4 <_vfiprintf_r+0x220>
 80069a8:	89ab      	ldrh	r3, [r5, #12]
 80069aa:	059a      	lsls	r2, r3, #22
 80069ac:	d402      	bmi.n	80069b4 <_vfiprintf_r+0x220>
 80069ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b0:	f000 fc45 	bl	800723e <__retarget_lock_release_recursive>
 80069b4:	89ab      	ldrh	r3, [r5, #12]
 80069b6:	065b      	lsls	r3, r3, #25
 80069b8:	f53f af12 	bmi.w	80067e0 <_vfiprintf_r+0x4c>
 80069bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069be:	e711      	b.n	80067e4 <_vfiprintf_r+0x50>
 80069c0:	ab03      	add	r3, sp, #12
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <_vfiprintf_r+0x258>)
 80069c8:	a904      	add	r1, sp, #16
 80069ca:	4630      	mov	r0, r6
 80069cc:	f000 f880 	bl	8006ad0 <_printf_i>
 80069d0:	e7e4      	b.n	800699c <_vfiprintf_r+0x208>
 80069d2:	bf00      	nop
 80069d4:	08007860 	.word	0x08007860
 80069d8:	08007880 	.word	0x08007880
 80069dc:	08007840 	.word	0x08007840
 80069e0:	0800780d 	.word	0x0800780d
 80069e4:	08007817 	.word	0x08007817
 80069e8:	00000000 	.word	0x00000000
 80069ec:	0800676f 	.word	0x0800676f
 80069f0:	08007813 	.word	0x08007813

080069f4 <_printf_common>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	4616      	mov	r6, r2
 80069fa:	4699      	mov	r9, r3
 80069fc:	688a      	ldr	r2, [r1, #8]
 80069fe:	690b      	ldr	r3, [r1, #16]
 8006a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	bfb8      	it	lt
 8006a08:	4613      	movlt	r3, r2
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a10:	4607      	mov	r7, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	b10a      	cbz	r2, 8006a1a <_printf_common+0x26>
 8006a16:	3301      	adds	r3, #1
 8006a18:	6033      	str	r3, [r6, #0]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	0699      	lsls	r1, r3, #26
 8006a1e:	bf42      	ittt	mi
 8006a20:	6833      	ldrmi	r3, [r6, #0]
 8006a22:	3302      	addmi	r3, #2
 8006a24:	6033      	strmi	r3, [r6, #0]
 8006a26:	6825      	ldr	r5, [r4, #0]
 8006a28:	f015 0506 	ands.w	r5, r5, #6
 8006a2c:	d106      	bne.n	8006a3c <_printf_common+0x48>
 8006a2e:	f104 0a19 	add.w	sl, r4, #25
 8006a32:	68e3      	ldr	r3, [r4, #12]
 8006a34:	6832      	ldr	r2, [r6, #0]
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc26      	bgt.n	8006a8a <_printf_common+0x96>
 8006a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a40:	1e13      	subs	r3, r2, #0
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	bf18      	it	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	0692      	lsls	r2, r2, #26
 8006a4a:	d42b      	bmi.n	8006aa4 <_printf_common+0xb0>
 8006a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a50:	4649      	mov	r1, r9
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d01e      	beq.n	8006a98 <_printf_common+0xa4>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	68e5      	ldr	r5, [r4, #12]
 8006a5e:	6832      	ldr	r2, [r6, #0]
 8006a60:	f003 0306 	and.w	r3, r3, #6
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	bf08      	it	eq
 8006a68:	1aad      	subeq	r5, r5, r2
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	6922      	ldr	r2, [r4, #16]
 8006a6e:	bf0c      	ite	eq
 8006a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a74:	2500      	movne	r5, #0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	bfc4      	itt	gt
 8006a7a:	1a9b      	subgt	r3, r3, r2
 8006a7c:	18ed      	addgt	r5, r5, r3
 8006a7e:	2600      	movs	r6, #0
 8006a80:	341a      	adds	r4, #26
 8006a82:	42b5      	cmp	r5, r6
 8006a84:	d11a      	bne.n	8006abc <_printf_common+0xc8>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e008      	b.n	8006a9c <_printf_common+0xa8>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	4649      	mov	r1, r9
 8006a90:	4638      	mov	r0, r7
 8006a92:	47c0      	blx	r8
 8006a94:	3001      	adds	r0, #1
 8006a96:	d103      	bne.n	8006aa0 <_printf_common+0xac>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	e7c6      	b.n	8006a32 <_printf_common+0x3e>
 8006aa4:	18e1      	adds	r1, r4, r3
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	2030      	movs	r0, #48	; 0x30
 8006aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aae:	4422      	add	r2, r4
 8006ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ab8:	3302      	adds	r3, #2
 8006aba:	e7c7      	b.n	8006a4c <_printf_common+0x58>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c0      	blx	r8
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0e6      	beq.n	8006a98 <_printf_common+0xa4>
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7d9      	b.n	8006a82 <_printf_common+0x8e>
	...

08006ad0 <_printf_i>:
 8006ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	7e0f      	ldrb	r7, [r1, #24]
 8006ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ad8:	2f78      	cmp	r7, #120	; 0x78
 8006ada:	4691      	mov	r9, r2
 8006adc:	4680      	mov	r8, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	469a      	mov	sl, r3
 8006ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ae6:	d807      	bhi.n	8006af8 <_printf_i+0x28>
 8006ae8:	2f62      	cmp	r7, #98	; 0x62
 8006aea:	d80a      	bhi.n	8006b02 <_printf_i+0x32>
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	f000 80d8 	beq.w	8006ca2 <_printf_i+0x1d2>
 8006af2:	2f58      	cmp	r7, #88	; 0x58
 8006af4:	f000 80a3 	beq.w	8006c3e <_printf_i+0x16e>
 8006af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b00:	e03a      	b.n	8006b78 <_printf_i+0xa8>
 8006b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b06:	2b15      	cmp	r3, #21
 8006b08:	d8f6      	bhi.n	8006af8 <_printf_i+0x28>
 8006b0a:	a101      	add	r1, pc, #4	; (adr r1, 8006b10 <_printf_i+0x40>)
 8006b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b10:	08006b69 	.word	0x08006b69
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	08006af9 	.word	0x08006af9
 8006b1c:	08006af9 	.word	0x08006af9
 8006b20:	08006af9 	.word	0x08006af9
 8006b24:	08006af9 	.word	0x08006af9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006af9 	.word	0x08006af9
 8006b30:	08006af9 	.word	0x08006af9
 8006b34:	08006af9 	.word	0x08006af9
 8006b38:	08006af9 	.word	0x08006af9
 8006b3c:	08006c89 	.word	0x08006c89
 8006b40:	08006bad 	.word	0x08006bad
 8006b44:	08006c6b 	.word	0x08006c6b
 8006b48:	08006af9 	.word	0x08006af9
 8006b4c:	08006af9 	.word	0x08006af9
 8006b50:	08006cab 	.word	0x08006cab
 8006b54:	08006af9 	.word	0x08006af9
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006af9 	.word	0x08006af9
 8006b60:	08006af9 	.word	0x08006af9
 8006b64:	08006c73 	.word	0x08006c73
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	602a      	str	r2, [r5, #0]
 8006b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0a3      	b.n	8006cc4 <_printf_i+0x1f4>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	6829      	ldr	r1, [r5, #0]
 8006b80:	0606      	lsls	r6, r0, #24
 8006b82:	f101 0304 	add.w	r3, r1, #4
 8006b86:	d50a      	bpl.n	8006b9e <_printf_i+0xce>
 8006b88:	680e      	ldr	r6, [r1, #0]
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	2e00      	cmp	r6, #0
 8006b8e:	da03      	bge.n	8006b98 <_printf_i+0xc8>
 8006b90:	232d      	movs	r3, #45	; 0x2d
 8006b92:	4276      	negs	r6, r6
 8006b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b98:	485e      	ldr	r0, [pc, #376]	; (8006d14 <_printf_i+0x244>)
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	e019      	b.n	8006bd2 <_printf_i+0x102>
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ba6:	bf18      	it	ne
 8006ba8:	b236      	sxthne	r6, r6
 8006baa:	e7ef      	b.n	8006b8c <_printf_i+0xbc>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	6029      	str	r1, [r5, #0]
 8006bb4:	0601      	lsls	r1, r0, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xec>
 8006bb8:	681e      	ldr	r6, [r3, #0]
 8006bba:	e002      	b.n	8006bc2 <_printf_i+0xf2>
 8006bbc:	0646      	lsls	r6, r0, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xe8>
 8006bc0:	881e      	ldrh	r6, [r3, #0]
 8006bc2:	4854      	ldr	r0, [pc, #336]	; (8006d14 <_printf_i+0x244>)
 8006bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2308      	moveq	r3, #8
 8006bca:	230a      	movne	r3, #10
 8006bcc:	2100      	movs	r1, #0
 8006bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd2:	6865      	ldr	r5, [r4, #4]
 8006bd4:	60a5      	str	r5, [r4, #8]
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	bfa2      	ittt	ge
 8006bda:	6821      	ldrge	r1, [r4, #0]
 8006bdc:	f021 0104 	bicge.w	r1, r1, #4
 8006be0:	6021      	strge	r1, [r4, #0]
 8006be2:	b90e      	cbnz	r6, 8006be8 <_printf_i+0x118>
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	d04d      	beq.n	8006c84 <_printf_i+0x1b4>
 8006be8:	4615      	mov	r5, r2
 8006bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bee:	fb03 6711 	mls	r7, r3, r1, r6
 8006bf2:	5dc7      	ldrb	r7, [r0, r7]
 8006bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bf8:	4637      	mov	r7, r6
 8006bfa:	42bb      	cmp	r3, r7
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	d9f4      	bls.n	8006bea <_printf_i+0x11a>
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d10b      	bne.n	8006c1c <_printf_i+0x14c>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07de      	lsls	r6, r3, #31
 8006c08:	d508      	bpl.n	8006c1c <_printf_i+0x14c>
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	bfde      	ittt	le
 8006c12:	2330      	movle	r3, #48	; 0x30
 8006c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c1c:	1b52      	subs	r2, r2, r5
 8006c1e:	6122      	str	r2, [r4, #16]
 8006c20:	f8cd a000 	str.w	sl, [sp]
 8006c24:	464b      	mov	r3, r9
 8006c26:	aa03      	add	r2, sp, #12
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f7ff fee2 	bl	80069f4 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d14c      	bne.n	8006cce <_printf_i+0x1fe>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	b004      	add	sp, #16
 8006c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3e:	4835      	ldr	r0, [pc, #212]	; (8006d14 <_printf_i+0x244>)
 8006c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c44:	6829      	ldr	r1, [r5, #0]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c4c:	6029      	str	r1, [r5, #0]
 8006c4e:	061d      	lsls	r5, r3, #24
 8006c50:	d514      	bpl.n	8006c7c <_printf_i+0x1ac>
 8006c52:	07df      	lsls	r7, r3, #31
 8006c54:	bf44      	itt	mi
 8006c56:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5a:	6023      	strmi	r3, [r4, #0]
 8006c5c:	b91e      	cbnz	r6, 8006c66 <_printf_i+0x196>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f023 0320 	bic.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	2310      	movs	r3, #16
 8006c68:	e7b0      	b.n	8006bcc <_printf_i+0xfc>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f043 0320 	orr.w	r3, r3, #32
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	2378      	movs	r3, #120	; 0x78
 8006c74:	4828      	ldr	r0, [pc, #160]	; (8006d18 <_printf_i+0x248>)
 8006c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c7a:	e7e3      	b.n	8006c44 <_printf_i+0x174>
 8006c7c:	0659      	lsls	r1, r3, #25
 8006c7e:	bf48      	it	mi
 8006c80:	b2b6      	uxthmi	r6, r6
 8006c82:	e7e6      	b.n	8006c52 <_printf_i+0x182>
 8006c84:	4615      	mov	r5, r2
 8006c86:	e7bb      	b.n	8006c00 <_printf_i+0x130>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	6826      	ldr	r6, [r4, #0]
 8006c8c:	6961      	ldr	r1, [r4, #20]
 8006c8e:	1d18      	adds	r0, r3, #4
 8006c90:	6028      	str	r0, [r5, #0]
 8006c92:	0635      	lsls	r5, r6, #24
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	d501      	bpl.n	8006c9c <_printf_i+0x1cc>
 8006c98:	6019      	str	r1, [r3, #0]
 8006c9a:	e002      	b.n	8006ca2 <_printf_i+0x1d2>
 8006c9c:	0670      	lsls	r0, r6, #25
 8006c9e:	d5fb      	bpl.n	8006c98 <_printf_i+0x1c8>
 8006ca0:	8019      	strh	r1, [r3, #0]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	4615      	mov	r5, r2
 8006ca8:	e7ba      	b.n	8006c20 <_printf_i+0x150>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	1d1a      	adds	r2, r3, #4
 8006cae:	602a      	str	r2, [r5, #0]
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f7f9 fac2 	bl	8000240 <memchr>
 8006cbc:	b108      	cbz	r0, 8006cc2 <_printf_i+0x1f2>
 8006cbe:	1b40      	subs	r0, r0, r5
 8006cc0:	6060      	str	r0, [r4, #4]
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	e7a8      	b.n	8006c20 <_printf_i+0x150>
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	47d0      	blx	sl
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0ab      	beq.n	8006c34 <_printf_i+0x164>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	079b      	lsls	r3, r3, #30
 8006ce0:	d413      	bmi.n	8006d0a <_printf_i+0x23a>
 8006ce2:	68e0      	ldr	r0, [r4, #12]
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	bfb8      	it	lt
 8006cea:	4618      	movlt	r0, r3
 8006cec:	e7a4      	b.n	8006c38 <_printf_i+0x168>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	47d0      	blx	sl
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d09b      	beq.n	8006c34 <_printf_i+0x164>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	9903      	ldr	r1, [sp, #12]
 8006d02:	1a5b      	subs	r3, r3, r1
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dcf2      	bgt.n	8006cee <_printf_i+0x21e>
 8006d08:	e7eb      	b.n	8006ce2 <_printf_i+0x212>
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	f104 0619 	add.w	r6, r4, #25
 8006d10:	e7f5      	b.n	8006cfe <_printf_i+0x22e>
 8006d12:	bf00      	nop
 8006d14:	0800781e 	.word	0x0800781e
 8006d18:	0800782f 	.word	0x0800782f

08006d1c <_sbrk_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d06      	ldr	r5, [pc, #24]	; (8006d38 <_sbrk_r+0x1c>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	f7f9 ff9c 	bl	8000c64 <_sbrk>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_sbrk_r+0x1a>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_sbrk_r+0x1a>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	2000025c 	.word	0x2000025c

08006d3c <__swbuf_r>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	4614      	mov	r4, r2
 8006d42:	4605      	mov	r5, r0
 8006d44:	b118      	cbz	r0, 8006d4e <__swbuf_r+0x12>
 8006d46:	6983      	ldr	r3, [r0, #24]
 8006d48:	b90b      	cbnz	r3, 8006d4e <__swbuf_r+0x12>
 8006d4a:	f000 f9d9 	bl	8007100 <__sinit>
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <__swbuf_r+0x98>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d12b      	bne.n	8006dac <__swbuf_r+0x70>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	69a3      	ldr	r3, [r4, #24]
 8006d58:	60a3      	str	r3, [r4, #8]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	071a      	lsls	r2, r3, #28
 8006d5e:	d52f      	bpl.n	8006dc0 <__swbuf_r+0x84>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	b36b      	cbz	r3, 8006dc0 <__swbuf_r+0x84>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	6963      	ldr	r3, [r4, #20]
 8006d6c:	b2f6      	uxtb	r6, r6
 8006d6e:	4283      	cmp	r3, r0
 8006d70:	4637      	mov	r7, r6
 8006d72:	dc04      	bgt.n	8006d7e <__swbuf_r+0x42>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f92e 	bl	8006fd8 <_fflush_r>
 8006d7c:	bb30      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60a3      	str	r3, [r4, #8]
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	6022      	str	r2, [r4, #0]
 8006d8a:	701e      	strb	r6, [r3, #0]
 8006d8c:	6963      	ldr	r3, [r4, #20]
 8006d8e:	3001      	adds	r0, #1
 8006d90:	4283      	cmp	r3, r0
 8006d92:	d004      	beq.n	8006d9e <__swbuf_r+0x62>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d506      	bpl.n	8006da8 <__swbuf_r+0x6c>
 8006d9a:	2e0a      	cmp	r6, #10
 8006d9c:	d104      	bne.n	8006da8 <__swbuf_r+0x6c>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 f919 	bl	8006fd8 <_fflush_r>
 8006da6:	b988      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006da8:	4638      	mov	r0, r7
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <__swbuf_r+0x9c>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d101      	bne.n	8006db6 <__swbuf_r+0x7a>
 8006db2:	68ac      	ldr	r4, [r5, #8]
 8006db4:	e7cf      	b.n	8006d56 <__swbuf_r+0x1a>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <__swbuf_r+0xa0>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	bf08      	it	eq
 8006dbc:	68ec      	ldreq	r4, [r5, #12]
 8006dbe:	e7ca      	b.n	8006d56 <__swbuf_r+0x1a>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f80c 	bl	8006de0 <__swsetup_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0cb      	beq.n	8006d64 <__swbuf_r+0x28>
 8006dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd0:	e7ea      	b.n	8006da8 <__swbuf_r+0x6c>
 8006dd2:	bf00      	nop
 8006dd4:	08007860 	.word	0x08007860
 8006dd8:	08007880 	.word	0x08007880
 8006ddc:	08007840 	.word	0x08007840

08006de0 <__swsetup_r>:
 8006de0:	4b32      	ldr	r3, [pc, #200]	; (8006eac <__swsetup_r+0xcc>)
 8006de2:	b570      	push	{r4, r5, r6, lr}
 8006de4:	681d      	ldr	r5, [r3, #0]
 8006de6:	4606      	mov	r6, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	b125      	cbz	r5, 8006df6 <__swsetup_r+0x16>
 8006dec:	69ab      	ldr	r3, [r5, #24]
 8006dee:	b913      	cbnz	r3, 8006df6 <__swsetup_r+0x16>
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 f985 	bl	8007100 <__sinit>
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <__swsetup_r+0xd0>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	d10f      	bne.n	8006e1c <__swsetup_r+0x3c>
 8006dfc:	686c      	ldr	r4, [r5, #4]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e04:	0719      	lsls	r1, r3, #28
 8006e06:	d42c      	bmi.n	8006e62 <__swsetup_r+0x82>
 8006e08:	06dd      	lsls	r5, r3, #27
 8006e0a:	d411      	bmi.n	8006e30 <__swsetup_r+0x50>
 8006e0c:	2309      	movs	r3, #9
 8006e0e:	6033      	str	r3, [r6, #0]
 8006e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	e03e      	b.n	8006e9a <__swsetup_r+0xba>
 8006e1c:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <__swsetup_r+0xd4>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	d101      	bne.n	8006e26 <__swsetup_r+0x46>
 8006e22:	68ac      	ldr	r4, [r5, #8]
 8006e24:	e7eb      	b.n	8006dfe <__swsetup_r+0x1e>
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <__swsetup_r+0xd8>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	bf08      	it	eq
 8006e2c:	68ec      	ldreq	r4, [r5, #12]
 8006e2e:	e7e6      	b.n	8006dfe <__swsetup_r+0x1e>
 8006e30:	0758      	lsls	r0, r3, #29
 8006e32:	d512      	bpl.n	8006e5a <__swsetup_r+0x7a>
 8006e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e36:	b141      	cbz	r1, 8006e4a <__swsetup_r+0x6a>
 8006e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	d002      	beq.n	8006e46 <__swsetup_r+0x66>
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff fa41 	bl	80062c8 <_free_r>
 8006e46:	2300      	movs	r3, #0
 8006e48:	6363      	str	r3, [r4, #52]	; 0x34
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	2300      	movs	r3, #0
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	f043 0308 	orr.w	r3, r3, #8
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	b94b      	cbnz	r3, 8006e7a <__swsetup_r+0x9a>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e70:	d003      	beq.n	8006e7a <__swsetup_r+0x9a>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4630      	mov	r0, r6
 8006e76:	f000 fa09 	bl	800728c <__smakebuf_r>
 8006e7a:	89a0      	ldrh	r0, [r4, #12]
 8006e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e80:	f010 0301 	ands.w	r3, r0, #1
 8006e84:	d00a      	beq.n	8006e9c <__swsetup_r+0xbc>
 8006e86:	2300      	movs	r3, #0
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6963      	ldr	r3, [r4, #20]
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	61a3      	str	r3, [r4, #24]
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	b943      	cbnz	r3, 8006ea6 <__swsetup_r+0xc6>
 8006e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e98:	d1ba      	bne.n	8006e10 <__swsetup_r+0x30>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	0781      	lsls	r1, r0, #30
 8006e9e:	bf58      	it	pl
 8006ea0:	6963      	ldrpl	r3, [r4, #20]
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	e7f4      	b.n	8006e90 <__swsetup_r+0xb0>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e7f7      	b.n	8006e9a <__swsetup_r+0xba>
 8006eaa:	bf00      	nop
 8006eac:	200000a4 	.word	0x200000a4
 8006eb0:	08007860 	.word	0x08007860
 8006eb4:	08007880 	.word	0x08007880
 8006eb8:	08007840 	.word	0x08007840

08006ebc <abort>:
 8006ebc:	b508      	push	{r3, lr}
 8006ebe:	2006      	movs	r0, #6
 8006ec0:	f000 fab0 	bl	8007424 <raise>
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f7f9 fe55 	bl	8000b74 <_exit>
	...

08006ecc <__sflush_r>:
 8006ecc:	898a      	ldrh	r2, [r1, #12]
 8006ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	0710      	lsls	r0, r2, #28
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	d458      	bmi.n	8006f8c <__sflush_r+0xc0>
 8006eda:	684b      	ldr	r3, [r1, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dc05      	bgt.n	8006eec <__sflush_r+0x20>
 8006ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	dc02      	bgt.n	8006eec <__sflush_r+0x20>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	d0f9      	beq.n	8006ee6 <__sflush_r+0x1a>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ef8:	682f      	ldr	r7, [r5, #0]
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	d032      	beq.n	8006f64 <__sflush_r+0x98>
 8006efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	075a      	lsls	r2, r3, #29
 8006f04:	d505      	bpl.n	8006f12 <__sflush_r+0x46>
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	1ac0      	subs	r0, r0, r3
 8006f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f0c:	b10b      	cbz	r3, 8006f12 <__sflush_r+0x46>
 8006f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f10:	1ac0      	subs	r0, r0, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	4602      	mov	r2, r0
 8006f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f18:	6a21      	ldr	r1, [r4, #32]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b0      	blx	r6
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	d106      	bne.n	8006f32 <__sflush_r+0x66>
 8006f24:	6829      	ldr	r1, [r5, #0]
 8006f26:	291d      	cmp	r1, #29
 8006f28:	d82c      	bhi.n	8006f84 <__sflush_r+0xb8>
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <__sflush_r+0x108>)
 8006f2c:	40ca      	lsrs	r2, r1
 8006f2e:	07d6      	lsls	r6, r2, #31
 8006f30:	d528      	bpl.n	8006f84 <__sflush_r+0xb8>
 8006f32:	2200      	movs	r2, #0
 8006f34:	6062      	str	r2, [r4, #4]
 8006f36:	04d9      	lsls	r1, r3, #19
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	6022      	str	r2, [r4, #0]
 8006f3c:	d504      	bpl.n	8006f48 <__sflush_r+0x7c>
 8006f3e:	1c42      	adds	r2, r0, #1
 8006f40:	d101      	bne.n	8006f46 <__sflush_r+0x7a>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b903      	cbnz	r3, 8006f48 <__sflush_r+0x7c>
 8006f46:	6560      	str	r0, [r4, #84]	; 0x54
 8006f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f4a:	602f      	str	r7, [r5, #0]
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d0ca      	beq.n	8006ee6 <__sflush_r+0x1a>
 8006f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d002      	beq.n	8006f5e <__sflush_r+0x92>
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7ff f9b5 	bl	80062c8 <_free_r>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	6360      	str	r0, [r4, #52]	; 0x34
 8006f62:	e7c1      	b.n	8006ee8 <__sflush_r+0x1c>
 8006f64:	6a21      	ldr	r1, [r4, #32]
 8006f66:	2301      	movs	r3, #1
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b0      	blx	r6
 8006f6c:	1c41      	adds	r1, r0, #1
 8006f6e:	d1c7      	bne.n	8006f00 <__sflush_r+0x34>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0c4      	beq.n	8006f00 <__sflush_r+0x34>
 8006f76:	2b1d      	cmp	r3, #29
 8006f78:	d001      	beq.n	8006f7e <__sflush_r+0xb2>
 8006f7a:	2b16      	cmp	r3, #22
 8006f7c:	d101      	bne.n	8006f82 <__sflush_r+0xb6>
 8006f7e:	602f      	str	r7, [r5, #0]
 8006f80:	e7b1      	b.n	8006ee6 <__sflush_r+0x1a>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	e7ad      	b.n	8006ee8 <__sflush_r+0x1c>
 8006f8c:	690f      	ldr	r7, [r1, #16]
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	d0a9      	beq.n	8006ee6 <__sflush_r+0x1a>
 8006f92:	0793      	lsls	r3, r2, #30
 8006f94:	680e      	ldr	r6, [r1, #0]
 8006f96:	bf08      	it	eq
 8006f98:	694b      	ldreq	r3, [r1, #20]
 8006f9a:	600f      	str	r7, [r1, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2300      	movne	r3, #0
 8006fa0:	eba6 0807 	sub.w	r8, r6, r7
 8006fa4:	608b      	str	r3, [r1, #8]
 8006fa6:	f1b8 0f00 	cmp.w	r8, #0
 8006faa:	dd9c      	ble.n	8006ee6 <__sflush_r+0x1a>
 8006fac:	6a21      	ldr	r1, [r4, #32]
 8006fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b0      	blx	r6
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	dc06      	bgt.n	8006fca <__sflush_r+0xfe>
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	e78e      	b.n	8006ee8 <__sflush_r+0x1c>
 8006fca:	4407      	add	r7, r0
 8006fcc:	eba8 0800 	sub.w	r8, r8, r0
 8006fd0:	e7e9      	b.n	8006fa6 <__sflush_r+0xda>
 8006fd2:	bf00      	nop
 8006fd4:	20400001 	.word	0x20400001

08006fd8 <_fflush_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	690b      	ldr	r3, [r1, #16]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	b913      	cbnz	r3, 8006fe8 <_fflush_r+0x10>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	b118      	cbz	r0, 8006ff2 <_fflush_r+0x1a>
 8006fea:	6983      	ldr	r3, [r0, #24]
 8006fec:	b90b      	cbnz	r3, 8006ff2 <_fflush_r+0x1a>
 8006fee:	f000 f887 	bl	8007100 <__sinit>
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <_fflush_r+0x6c>)
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d11b      	bne.n	8007030 <_fflush_r+0x58>
 8006ff8:	686c      	ldr	r4, [r5, #4]
 8006ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ef      	beq.n	8006fe2 <_fflush_r+0xa>
 8007002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007004:	07d0      	lsls	r0, r2, #31
 8007006:	d404      	bmi.n	8007012 <_fflush_r+0x3a>
 8007008:	0599      	lsls	r1, r3, #22
 800700a:	d402      	bmi.n	8007012 <_fflush_r+0x3a>
 800700c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700e:	f000 f915 	bl	800723c <__retarget_lock_acquire_recursive>
 8007012:	4628      	mov	r0, r5
 8007014:	4621      	mov	r1, r4
 8007016:	f7ff ff59 	bl	8006ecc <__sflush_r>
 800701a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800701c:	07da      	lsls	r2, r3, #31
 800701e:	4605      	mov	r5, r0
 8007020:	d4e0      	bmi.n	8006fe4 <_fflush_r+0xc>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	059b      	lsls	r3, r3, #22
 8007026:	d4dd      	bmi.n	8006fe4 <_fflush_r+0xc>
 8007028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800702a:	f000 f908 	bl	800723e <__retarget_lock_release_recursive>
 800702e:	e7d9      	b.n	8006fe4 <_fflush_r+0xc>
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <_fflush_r+0x70>)
 8007032:	429c      	cmp	r4, r3
 8007034:	d101      	bne.n	800703a <_fflush_r+0x62>
 8007036:	68ac      	ldr	r4, [r5, #8]
 8007038:	e7df      	b.n	8006ffa <_fflush_r+0x22>
 800703a:	4b04      	ldr	r3, [pc, #16]	; (800704c <_fflush_r+0x74>)
 800703c:	429c      	cmp	r4, r3
 800703e:	bf08      	it	eq
 8007040:	68ec      	ldreq	r4, [r5, #12]
 8007042:	e7da      	b.n	8006ffa <_fflush_r+0x22>
 8007044:	08007860 	.word	0x08007860
 8007048:	08007880 	.word	0x08007880
 800704c:	08007840 	.word	0x08007840

08007050 <std>:
 8007050:	2300      	movs	r3, #0
 8007052:	b510      	push	{r4, lr}
 8007054:	4604      	mov	r4, r0
 8007056:	e9c0 3300 	strd	r3, r3, [r0]
 800705a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800705e:	6083      	str	r3, [r0, #8]
 8007060:	8181      	strh	r1, [r0, #12]
 8007062:	6643      	str	r3, [r0, #100]	; 0x64
 8007064:	81c2      	strh	r2, [r0, #14]
 8007066:	6183      	str	r3, [r0, #24]
 8007068:	4619      	mov	r1, r3
 800706a:	2208      	movs	r2, #8
 800706c:	305c      	adds	r0, #92	; 0x5c
 800706e:	f7fe ffe3 	bl	8006038 <memset>
 8007072:	4b05      	ldr	r3, [pc, #20]	; (8007088 <std+0x38>)
 8007074:	6263      	str	r3, [r4, #36]	; 0x24
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <std+0x3c>)
 8007078:	62a3      	str	r3, [r4, #40]	; 0x28
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <std+0x40>)
 800707c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <std+0x44>)
 8007080:	6224      	str	r4, [r4, #32]
 8007082:	6323      	str	r3, [r4, #48]	; 0x30
 8007084:	bd10      	pop	{r4, pc}
 8007086:	bf00      	nop
 8007088:	0800745d 	.word	0x0800745d
 800708c:	0800747f 	.word	0x0800747f
 8007090:	080074b7 	.word	0x080074b7
 8007094:	080074db 	.word	0x080074db

08007098 <_cleanup_r>:
 8007098:	4901      	ldr	r1, [pc, #4]	; (80070a0 <_cleanup_r+0x8>)
 800709a:	f000 b8af 	b.w	80071fc <_fwalk_reent>
 800709e:	bf00      	nop
 80070a0:	08006fd9 	.word	0x08006fd9

080070a4 <__sfmoreglue>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	2268      	movs	r2, #104	; 0x68
 80070a8:	1e4d      	subs	r5, r1, #1
 80070aa:	4355      	muls	r5, r2
 80070ac:	460e      	mov	r6, r1
 80070ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070b2:	f7ff f975 	bl	80063a0 <_malloc_r>
 80070b6:	4604      	mov	r4, r0
 80070b8:	b140      	cbz	r0, 80070cc <__sfmoreglue+0x28>
 80070ba:	2100      	movs	r1, #0
 80070bc:	e9c0 1600 	strd	r1, r6, [r0]
 80070c0:	300c      	adds	r0, #12
 80070c2:	60a0      	str	r0, [r4, #8]
 80070c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070c8:	f7fe ffb6 	bl	8006038 <memset>
 80070cc:	4620      	mov	r0, r4
 80070ce:	bd70      	pop	{r4, r5, r6, pc}

080070d0 <__sfp_lock_acquire>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__sfp_lock_acquire+0x8>)
 80070d2:	f000 b8b3 	b.w	800723c <__retarget_lock_acquire_recursive>
 80070d6:	bf00      	nop
 80070d8:	20000259 	.word	0x20000259

080070dc <__sfp_lock_release>:
 80070dc:	4801      	ldr	r0, [pc, #4]	; (80070e4 <__sfp_lock_release+0x8>)
 80070de:	f000 b8ae 	b.w	800723e <__retarget_lock_release_recursive>
 80070e2:	bf00      	nop
 80070e4:	20000259 	.word	0x20000259

080070e8 <__sinit_lock_acquire>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__sinit_lock_acquire+0x8>)
 80070ea:	f000 b8a7 	b.w	800723c <__retarget_lock_acquire_recursive>
 80070ee:	bf00      	nop
 80070f0:	2000025a 	.word	0x2000025a

080070f4 <__sinit_lock_release>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__sinit_lock_release+0x8>)
 80070f6:	f000 b8a2 	b.w	800723e <__retarget_lock_release_recursive>
 80070fa:	bf00      	nop
 80070fc:	2000025a 	.word	0x2000025a

08007100 <__sinit>:
 8007100:	b510      	push	{r4, lr}
 8007102:	4604      	mov	r4, r0
 8007104:	f7ff fff0 	bl	80070e8 <__sinit_lock_acquire>
 8007108:	69a3      	ldr	r3, [r4, #24]
 800710a:	b11b      	cbz	r3, 8007114 <__sinit+0x14>
 800710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007110:	f7ff bff0 	b.w	80070f4 <__sinit_lock_release>
 8007114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007118:	6523      	str	r3, [r4, #80]	; 0x50
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <__sinit+0x68>)
 800711c:	4a13      	ldr	r2, [pc, #76]	; (800716c <__sinit+0x6c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	62a2      	str	r2, [r4, #40]	; 0x28
 8007122:	42a3      	cmp	r3, r4
 8007124:	bf04      	itt	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	61a3      	streq	r3, [r4, #24]
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f820 	bl	8007170 <__sfp>
 8007130:	6060      	str	r0, [r4, #4]
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f81c 	bl	8007170 <__sfp>
 8007138:	60a0      	str	r0, [r4, #8]
 800713a:	4620      	mov	r0, r4
 800713c:	f000 f818 	bl	8007170 <__sfp>
 8007140:	2200      	movs	r2, #0
 8007142:	60e0      	str	r0, [r4, #12]
 8007144:	2104      	movs	r1, #4
 8007146:	6860      	ldr	r0, [r4, #4]
 8007148:	f7ff ff82 	bl	8007050 <std>
 800714c:	68a0      	ldr	r0, [r4, #8]
 800714e:	2201      	movs	r2, #1
 8007150:	2109      	movs	r1, #9
 8007152:	f7ff ff7d 	bl	8007050 <std>
 8007156:	68e0      	ldr	r0, [r4, #12]
 8007158:	2202      	movs	r2, #2
 800715a:	2112      	movs	r1, #18
 800715c:	f7ff ff78 	bl	8007050 <std>
 8007160:	2301      	movs	r3, #1
 8007162:	61a3      	str	r3, [r4, #24]
 8007164:	e7d2      	b.n	800710c <__sinit+0xc>
 8007166:	bf00      	nop
 8007168:	08007658 	.word	0x08007658
 800716c:	08007099 	.word	0x08007099

08007170 <__sfp>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	4607      	mov	r7, r0
 8007174:	f7ff ffac 	bl	80070d0 <__sfp_lock_acquire>
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <__sfp+0x84>)
 800717a:	681e      	ldr	r6, [r3, #0]
 800717c:	69b3      	ldr	r3, [r6, #24]
 800717e:	b913      	cbnz	r3, 8007186 <__sfp+0x16>
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ffbd 	bl	8007100 <__sinit>
 8007186:	3648      	adds	r6, #72	; 0x48
 8007188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800718c:	3b01      	subs	r3, #1
 800718e:	d503      	bpl.n	8007198 <__sfp+0x28>
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	b30b      	cbz	r3, 80071d8 <__sfp+0x68>
 8007194:	6836      	ldr	r6, [r6, #0]
 8007196:	e7f7      	b.n	8007188 <__sfp+0x18>
 8007198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800719c:	b9d5      	cbnz	r5, 80071d4 <__sfp+0x64>
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <__sfp+0x88>)
 80071a0:	60e3      	str	r3, [r4, #12]
 80071a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071a6:	6665      	str	r5, [r4, #100]	; 0x64
 80071a8:	f000 f847 	bl	800723a <__retarget_lock_init_recursive>
 80071ac:	f7ff ff96 	bl	80070dc <__sfp_lock_release>
 80071b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071b8:	6025      	str	r5, [r4, #0]
 80071ba:	61a5      	str	r5, [r4, #24]
 80071bc:	2208      	movs	r2, #8
 80071be:	4629      	mov	r1, r5
 80071c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071c4:	f7fe ff38 	bl	8006038 <memset>
 80071c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071d0:	4620      	mov	r0, r4
 80071d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d4:	3468      	adds	r4, #104	; 0x68
 80071d6:	e7d9      	b.n	800718c <__sfp+0x1c>
 80071d8:	2104      	movs	r1, #4
 80071da:	4638      	mov	r0, r7
 80071dc:	f7ff ff62 	bl	80070a4 <__sfmoreglue>
 80071e0:	4604      	mov	r4, r0
 80071e2:	6030      	str	r0, [r6, #0]
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1d5      	bne.n	8007194 <__sfp+0x24>
 80071e8:	f7ff ff78 	bl	80070dc <__sfp_lock_release>
 80071ec:	230c      	movs	r3, #12
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	e7ee      	b.n	80071d0 <__sfp+0x60>
 80071f2:	bf00      	nop
 80071f4:	08007658 	.word	0x08007658
 80071f8:	ffff0001 	.word	0xffff0001

080071fc <_fwalk_reent>:
 80071fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007200:	4606      	mov	r6, r0
 8007202:	4688      	mov	r8, r1
 8007204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007208:	2700      	movs	r7, #0
 800720a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800720e:	f1b9 0901 	subs.w	r9, r9, #1
 8007212:	d505      	bpl.n	8007220 <_fwalk_reent+0x24>
 8007214:	6824      	ldr	r4, [r4, #0]
 8007216:	2c00      	cmp	r4, #0
 8007218:	d1f7      	bne.n	800720a <_fwalk_reent+0xe>
 800721a:	4638      	mov	r0, r7
 800721c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007220:	89ab      	ldrh	r3, [r5, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d907      	bls.n	8007236 <_fwalk_reent+0x3a>
 8007226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800722a:	3301      	adds	r3, #1
 800722c:	d003      	beq.n	8007236 <_fwalk_reent+0x3a>
 800722e:	4629      	mov	r1, r5
 8007230:	4630      	mov	r0, r6
 8007232:	47c0      	blx	r8
 8007234:	4307      	orrs	r7, r0
 8007236:	3568      	adds	r5, #104	; 0x68
 8007238:	e7e9      	b.n	800720e <_fwalk_reent+0x12>

0800723a <__retarget_lock_init_recursive>:
 800723a:	4770      	bx	lr

0800723c <__retarget_lock_acquire_recursive>:
 800723c:	4770      	bx	lr

0800723e <__retarget_lock_release_recursive>:
 800723e:	4770      	bx	lr

08007240 <__swhatbuf_r>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	460e      	mov	r6, r1
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	2900      	cmp	r1, #0
 800724a:	b096      	sub	sp, #88	; 0x58
 800724c:	4614      	mov	r4, r2
 800724e:	461d      	mov	r5, r3
 8007250:	da08      	bge.n	8007264 <__swhatbuf_r+0x24>
 8007252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	061a      	lsls	r2, r3, #24
 800725c:	d410      	bmi.n	8007280 <__swhatbuf_r+0x40>
 800725e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007262:	e00e      	b.n	8007282 <__swhatbuf_r+0x42>
 8007264:	466a      	mov	r2, sp
 8007266:	f000 f95f 	bl	8007528 <_fstat_r>
 800726a:	2800      	cmp	r0, #0
 800726c:	dbf1      	blt.n	8007252 <__swhatbuf_r+0x12>
 800726e:	9a01      	ldr	r2, [sp, #4]
 8007270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007278:	425a      	negs	r2, r3
 800727a:	415a      	adcs	r2, r3
 800727c:	602a      	str	r2, [r5, #0]
 800727e:	e7ee      	b.n	800725e <__swhatbuf_r+0x1e>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	2000      	movs	r0, #0
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	b016      	add	sp, #88	; 0x58
 8007288:	bd70      	pop	{r4, r5, r6, pc}
	...

0800728c <__smakebuf_r>:
 800728c:	898b      	ldrh	r3, [r1, #12]
 800728e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007290:	079d      	lsls	r5, r3, #30
 8007292:	4606      	mov	r6, r0
 8007294:	460c      	mov	r4, r1
 8007296:	d507      	bpl.n	80072a8 <__smakebuf_r+0x1c>
 8007298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	2301      	movs	r3, #1
 80072a2:	6163      	str	r3, [r4, #20]
 80072a4:	b002      	add	sp, #8
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	ab01      	add	r3, sp, #4
 80072aa:	466a      	mov	r2, sp
 80072ac:	f7ff ffc8 	bl	8007240 <__swhatbuf_r>
 80072b0:	9900      	ldr	r1, [sp, #0]
 80072b2:	4605      	mov	r5, r0
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff f873 	bl	80063a0 <_malloc_r>
 80072ba:	b948      	cbnz	r0, 80072d0 <__smakebuf_r+0x44>
 80072bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c0:	059a      	lsls	r2, r3, #22
 80072c2:	d4ef      	bmi.n	80072a4 <__smakebuf_r+0x18>
 80072c4:	f023 0303 	bic.w	r3, r3, #3
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	e7e3      	b.n	8007298 <__smakebuf_r+0xc>
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <__smakebuf_r+0x7c>)
 80072d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	6020      	str	r0, [r4, #0]
 80072d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	6163      	str	r3, [r4, #20]
 80072e2:	9b01      	ldr	r3, [sp, #4]
 80072e4:	6120      	str	r0, [r4, #16]
 80072e6:	b15b      	cbz	r3, 8007300 <__smakebuf_r+0x74>
 80072e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f92d 	bl	800754c <_isatty_r>
 80072f2:	b128      	cbz	r0, 8007300 <__smakebuf_r+0x74>
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	89a0      	ldrh	r0, [r4, #12]
 8007302:	4305      	orrs	r5, r0
 8007304:	81a5      	strh	r5, [r4, #12]
 8007306:	e7cd      	b.n	80072a4 <__smakebuf_r+0x18>
 8007308:	08007099 	.word	0x08007099

0800730c <memcpy>:
 800730c:	440a      	add	r2, r1
 800730e:	4291      	cmp	r1, r2
 8007310:	f100 33ff 	add.w	r3, r0, #4294967295
 8007314:	d100      	bne.n	8007318 <memcpy+0xc>
 8007316:	4770      	bx	lr
 8007318:	b510      	push	{r4, lr}
 800731a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007322:	4291      	cmp	r1, r2
 8007324:	d1f9      	bne.n	800731a <memcpy+0xe>
 8007326:	bd10      	pop	{r4, pc}

08007328 <memmove>:
 8007328:	4288      	cmp	r0, r1
 800732a:	b510      	push	{r4, lr}
 800732c:	eb01 0402 	add.w	r4, r1, r2
 8007330:	d902      	bls.n	8007338 <memmove+0x10>
 8007332:	4284      	cmp	r4, r0
 8007334:	4623      	mov	r3, r4
 8007336:	d807      	bhi.n	8007348 <memmove+0x20>
 8007338:	1e43      	subs	r3, r0, #1
 800733a:	42a1      	cmp	r1, r4
 800733c:	d008      	beq.n	8007350 <memmove+0x28>
 800733e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007346:	e7f8      	b.n	800733a <memmove+0x12>
 8007348:	4402      	add	r2, r0
 800734a:	4601      	mov	r1, r0
 800734c:	428a      	cmp	r2, r1
 800734e:	d100      	bne.n	8007352 <memmove+0x2a>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800735a:	e7f7      	b.n	800734c <memmove+0x24>

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff bf6d 	b.w	800723c <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20000258 	.word	0x20000258

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff bf68 	b.w	800723e <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20000258 	.word	0x20000258

08007374 <_realloc_r>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	4680      	mov	r8, r0
 800737a:	4614      	mov	r4, r2
 800737c:	460e      	mov	r6, r1
 800737e:	b921      	cbnz	r1, 800738a <_realloc_r+0x16>
 8007380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	4611      	mov	r1, r2
 8007386:	f7ff b80b 	b.w	80063a0 <_malloc_r>
 800738a:	b92a      	cbnz	r2, 8007398 <_realloc_r+0x24>
 800738c:	f7fe ff9c 	bl	80062c8 <_free_r>
 8007390:	4625      	mov	r5, r4
 8007392:	4628      	mov	r0, r5
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	f000 f8fa 	bl	8007590 <_malloc_usable_size_r>
 800739c:	4284      	cmp	r4, r0
 800739e:	4607      	mov	r7, r0
 80073a0:	d802      	bhi.n	80073a8 <_realloc_r+0x34>
 80073a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a6:	d812      	bhi.n	80073ce <_realloc_r+0x5a>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4640      	mov	r0, r8
 80073ac:	f7fe fff8 	bl	80063a0 <_malloc_r>
 80073b0:	4605      	mov	r5, r0
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d0ed      	beq.n	8007392 <_realloc_r+0x1e>
 80073b6:	42bc      	cmp	r4, r7
 80073b8:	4622      	mov	r2, r4
 80073ba:	4631      	mov	r1, r6
 80073bc:	bf28      	it	cs
 80073be:	463a      	movcs	r2, r7
 80073c0:	f7ff ffa4 	bl	800730c <memcpy>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7fe ff7e 	bl	80062c8 <_free_r>
 80073cc:	e7e1      	b.n	8007392 <_realloc_r+0x1e>
 80073ce:	4635      	mov	r5, r6
 80073d0:	e7df      	b.n	8007392 <_realloc_r+0x1e>

080073d2 <_raise_r>:
 80073d2:	291f      	cmp	r1, #31
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	d904      	bls.n	80073e6 <_raise_r+0x14>
 80073dc:	2316      	movs	r3, #22
 80073de:	6003      	str	r3, [r0, #0]
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073e8:	b112      	cbz	r2, 80073f0 <_raise_r+0x1e>
 80073ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073ee:	b94b      	cbnz	r3, 8007404 <_raise_r+0x32>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f831 	bl	8007458 <_getpid_r>
 80073f6:	462a      	mov	r2, r5
 80073f8:	4601      	mov	r1, r0
 80073fa:	4620      	mov	r0, r4
 80073fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007400:	f000 b818 	b.w	8007434 <_kill_r>
 8007404:	2b01      	cmp	r3, #1
 8007406:	d00a      	beq.n	800741e <_raise_r+0x4c>
 8007408:	1c59      	adds	r1, r3, #1
 800740a:	d103      	bne.n	8007414 <_raise_r+0x42>
 800740c:	2316      	movs	r3, #22
 800740e:	6003      	str	r3, [r0, #0]
 8007410:	2001      	movs	r0, #1
 8007412:	e7e7      	b.n	80073e4 <_raise_r+0x12>
 8007414:	2400      	movs	r4, #0
 8007416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800741a:	4628      	mov	r0, r5
 800741c:	4798      	blx	r3
 800741e:	2000      	movs	r0, #0
 8007420:	e7e0      	b.n	80073e4 <_raise_r+0x12>
	...

08007424 <raise>:
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <raise+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	f7ff bfd2 	b.w	80073d2 <_raise_r>
 800742e:	bf00      	nop
 8007430:	200000a4 	.word	0x200000a4

08007434 <_kill_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d07      	ldr	r5, [pc, #28]	; (8007454 <_kill_r+0x20>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	f7f9 fb87 	bl	8000b54 <_kill>
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	d102      	bne.n	8007450 <_kill_r+0x1c>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	b103      	cbz	r3, 8007450 <_kill_r+0x1c>
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	bd38      	pop	{r3, r4, r5, pc}
 8007452:	bf00      	nop
 8007454:	2000025c 	.word	0x2000025c

08007458 <_getpid_r>:
 8007458:	f7f9 bb74 	b.w	8000b44 <_getpid>

0800745c <__sread>:
 800745c:	b510      	push	{r4, lr}
 800745e:	460c      	mov	r4, r1
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	f000 f89c 	bl	80075a0 <_read_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	bfab      	itete	ge
 800746c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800746e:	89a3      	ldrhlt	r3, [r4, #12]
 8007470:	181b      	addge	r3, r3, r0
 8007472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007476:	bfac      	ite	ge
 8007478:	6563      	strge	r3, [r4, #84]	; 0x54
 800747a:	81a3      	strhlt	r3, [r4, #12]
 800747c:	bd10      	pop	{r4, pc}

0800747e <__swrite>:
 800747e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	461f      	mov	r7, r3
 8007484:	898b      	ldrh	r3, [r1, #12]
 8007486:	05db      	lsls	r3, r3, #23
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	4616      	mov	r6, r2
 800748e:	d505      	bpl.n	800749c <__swrite+0x1e>
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	2302      	movs	r3, #2
 8007496:	2200      	movs	r2, #0
 8007498:	f000 f868 	bl	800756c <_lseek_r>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	4632      	mov	r2, r6
 80074aa:	463b      	mov	r3, r7
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	f000 b817 	b.w	80074e4 <_write_r>

080074b6 <__sseek>:
 80074b6:	b510      	push	{r4, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074be:	f000 f855 	bl	800756c <_lseek_r>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	bf15      	itete	ne
 80074c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074d2:	81a3      	strheq	r3, [r4, #12]
 80074d4:	bf18      	it	ne
 80074d6:	81a3      	strhne	r3, [r4, #12]
 80074d8:	bd10      	pop	{r4, pc}

080074da <__sclose>:
 80074da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074de:	f000 b813 	b.w	8007508 <_close_r>
	...

080074e4 <_write_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_write_r+0x20>)
 80074e8:	4604      	mov	r4, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7f9 fb65 	bl	8000bc2 <_write>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_write_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_write_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	2000025c 	.word	0x2000025c

08007508 <_close_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_close_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7f9 fb71 	bl	8000bfa <_close>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_close_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_close_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	2000025c 	.word	0x2000025c

08007528 <_fstat_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_fstat_r+0x20>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f7f9 fb6c 	bl	8000c12 <_fstat>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d102      	bne.n	8007544 <_fstat_r+0x1c>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b103      	cbz	r3, 8007544 <_fstat_r+0x1c>
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	2000025c 	.word	0x2000025c

0800754c <_isatty_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d06      	ldr	r5, [pc, #24]	; (8007568 <_isatty_r+0x1c>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7f9 fb6b 	bl	8000c32 <_isatty>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_isatty_r+0x1a>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_isatty_r+0x1a>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	2000025c 	.word	0x2000025c

0800756c <_lseek_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_lseek_r+0x20>)
 8007570:	4604      	mov	r4, r0
 8007572:	4608      	mov	r0, r1
 8007574:	4611      	mov	r1, r2
 8007576:	2200      	movs	r2, #0
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f7f9 fb64 	bl	8000c48 <_lseek>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_lseek_r+0x1e>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_lseek_r+0x1e>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	2000025c 	.word	0x2000025c

08007590 <_malloc_usable_size_r>:
 8007590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007594:	1f18      	subs	r0, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfbc      	itt	lt
 800759a:	580b      	ldrlt	r3, [r1, r0]
 800759c:	18c0      	addlt	r0, r0, r3
 800759e:	4770      	bx	lr

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_read_r+0x20>)
 80075a4:	4604      	mov	r4, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7f9 faea 	bl	8000b88 <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	2000025c 	.word	0x2000025c

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
