
TP_systeme_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007788  08007788  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08007898  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007898  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a5b  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  00034b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00037528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00038650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027606  00000000  00000000  00039660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b15  00000000  00000000  00060c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd406  00000000  00000000  0007577b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  00172bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080074ac 	.word	0x080074ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080074ac 	.word	0x080074ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f912 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f90c 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f000 ff7c 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f000 ff6e 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 ff5f 	bl	800156c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 fe65 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 fe7c 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09e      	sub	sp, #120	; 0x78
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
	int			speedValue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fce0 	bl	80010a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f949 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f7ff ff7b 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006ee:	f000 faed 	bl	8000ccc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006f2:	f000 fc03 	bl	8000efc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80006f6:	4891      	ldr	r0, [pc, #580]	; (800093c <main+0x26c>)
 80006f8:	f002 f984 	bl	8002a04 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006fc:	2100      	movs	r1, #0
 80006fe:	488f      	ldr	r0, [pc, #572]	; (800093c <main+0x26c>)
 8000700:	f002 fa52 	bl	8002ba8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000704:	2104      	movs	r1, #4
 8000706:	488d      	ldr	r0, [pc, #564]	; (800093c <main+0x26c>)
 8000708:	f002 fa4e 	bl	8002ba8 <HAL_TIM_PWM_Start>

  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800070c:	463b      	mov	r3, r7
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 fc04 	bl	8005f20 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f005 fbfd 	bl	8005f20 <memset>
 8000726:	4b86      	ldr	r3, [pc, #536]	; (8000940 <main+0x270>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800072c:	2240      	movs	r2, #64	; 0x40
 800072e:	2100      	movs	r1, #0
 8000730:	4884      	ldr	r0, [pc, #528]	; (8000944 <main+0x274>)
 8000732:	f005 fbf5 	bl	8005f20 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000736:	2201      	movs	r2, #1
 8000738:	4981      	ldr	r1, [pc, #516]	; (8000940 <main+0x270>)
 800073a:	4883      	ldr	r0, [pc, #524]	; (8000948 <main+0x278>)
 800073c:	f003 fc32 	bl	8003fa4 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fd21 	bl	8001188 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2266      	movs	r2, #102	; 0x66
 800074c:	497f      	ldr	r1, [pc, #508]	; (800094c <main+0x27c>)
 800074e:	487e      	ldr	r0, [pc, #504]	; (8000948 <main+0x278>)
 8000750:	f003 fb92 	bl	8003e78 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	2218      	movs	r2, #24
 800075a:	497d      	ldr	r1, [pc, #500]	; (8000950 <main+0x280>)
 800075c:	487a      	ldr	r0, [pc, #488]	; (8000948 <main+0x278>)
 800075e:	f003 fb8b 	bl	8003e78 <HAL_UART_Transmit>
		HAL_Delay(1000);
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
		// uartRxReceived is set to 1 when a new character is received on uart 1


		if(uartRxReceived){
 8000762:	4b7c      	ldr	r3, [pc, #496]	; (8000954 <main+0x284>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 808d 	beq.w	8000886 <main+0x1b6>
			switch(uartRxBuffer[0]){
 800076c:	4b74      	ldr	r3, [pc, #464]	; (8000940 <main+0x270>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b0d      	cmp	r3, #13
 8000772:	d002      	beq.n	800077a <main+0xaa>
 8000774:	2b7f      	cmp	r3, #127	; 0x7f
 8000776:	d063      	beq.n	8000840 <main+0x170>
 8000778:	e072      	b.n	8000860 <main+0x190>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2203      	movs	r2, #3
 8000780:	4975      	ldr	r1, [pc, #468]	; (8000958 <main+0x288>)
 8000782:	4871      	ldr	r0, [pc, #452]	; (8000948 <main+0x278>)
 8000784:	f003 fb78 	bl	8003e78 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000788:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800078c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	496f      	ldr	r1, [pc, #444]	; (800095c <main+0x28c>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fbe6 	bl	8005f70 <strtok>
 80007a4:	4603      	mov	r3, r0
 80007a6:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007a8:	e00e      	b.n	80007c8 <main+0xf8>
					argv[argc++] = token;
 80007aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	673a      	str	r2, [r7, #112]	; 0x70
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	3378      	adds	r3, #120	; 0x78
 80007b4:	443b      	add	r3, r7
 80007b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007b8:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80007bc:	4967      	ldr	r1, [pc, #412]	; (800095c <main+0x28c>)
 80007be:	2000      	movs	r0, #0
 80007c0:	f005 fbd6 	bl	8005f70 <strtok>
 80007c4:	4603      	mov	r3, r0
 80007c6:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(token!=NULL){
 80007c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1ed      	bne.n	80007aa <main+0xda>





				if (argv[0] == "speed=")
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	4a63      	ldr	r2, [pc, #396]	; (8000960 <main+0x290>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d104      	bne.n	80007e0 <main+0x110>
				{
					HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2108      	movs	r1, #8
 80007da:	4862      	ldr	r0, [pc, #392]	; (8000964 <main+0x294>)
 80007dc:	f001 f848 	bl	8001870 <HAL_GPIO_WritePin>
				}

				if (argv[0] == "speed=")
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	4a5f      	ldr	r2, [pc, #380]	; (8000960 <main+0x290>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d126      	bne.n	8000836 <main+0x166>
				{
					speedValue = 1000*(argv[1][0]-'0')+100*(argv[1][1]-'0')+10*(argv[1][2]-'0')+(argv[1][3]-'0');
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3b30      	subs	r3, #48	; 0x30
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	fb03 f202 	mul.w	r2, r3, r2
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3b30      	subs	r3, #48	; 0x30
 80007fe:	2164      	movs	r1, #100	; 0x64
 8000800:	fb01 f303 	mul.w	r3, r1, r3
 8000804:	18d1      	adds	r1, r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3302      	adds	r3, #2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	18ca      	adds	r2, r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3303      	adds	r3, #3
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b30      	subs	r3, #48	; 0x30
 8000822:	4413      	add	r3, r2
 8000824:	667b      	str	r3, [r7, #100]	; 0x64

					if (speedValue > MAX_SPEED_VALUE)
 8000826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000828:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800082c:	4293      	cmp	r3, r2
 800082e:	dd02      	ble.n	8000836 <main+0x166>
					{
						speedValue = MAX_SPEED_VALUE;
 8000830:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000834:	667b      	str	r3, [r7, #100]	; 0x64





				idx_cmd = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 800083e:	e01f      	b.n	8000880 <main+0x1b0>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	677a      	str	r2, [r7, #116]	; 0x74
 8000846:	3378      	adds	r3, #120	; 0x78
 8000848:	443b      	add	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2201      	movs	r2, #1
 8000856:	493a      	ldr	r1, [pc, #232]	; (8000940 <main+0x270>)
 8000858:	483b      	ldr	r0, [pc, #236]	; (8000948 <main+0x278>)
 800085a:	f003 fb0d 	bl	8003e78 <HAL_UART_Transmit>
				break;
 800085e:	e00f      	b.n	8000880 <main+0x1b0>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	677a      	str	r2, [r7, #116]	; 0x74
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <main+0x270>)
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	3378      	adds	r3, #120	; 0x78
 800086c:	443b      	add	r3, r7
 800086e:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2201      	movs	r2, #1
 8000878:	4931      	ldr	r1, [pc, #196]	; (8000940 <main+0x270>)
 800087a:	4833      	ldr	r0, [pc, #204]	; (8000948 <main+0x278>)
 800087c:	f003 fafc 	bl	8003e78 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000880:	4b34      	ldr	r3, [pc, #208]	; (8000954 <main+0x284>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000888:	2b00      	cmp	r3, #0
 800088a:	f43f af6a 	beq.w	8000762 <main+0x92>
			if(strcmp(argv[0],"set")==0){
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	4935      	ldr	r1, [pc, #212]	; (8000968 <main+0x298>)
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fcc4 	bl	8000220 <strcmp>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d12d      	bne.n	80008fa <main+0x22a>
				if(strcmp(argv[1],"PA5")==0){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4932      	ldr	r1, [pc, #200]	; (800096c <main+0x29c>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fcbc 	bl	8000220 <strcmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d11d      	bne.n	80008ea <main+0x21a>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 fb07 	bl	8005ec4 <atoi>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2120      	movs	r1, #32
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 ffd5 	bl	8001870 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 fafb 	bl	8005ec4 <atoi>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	4927      	ldr	r1, [pc, #156]	; (8000970 <main+0x2a0>)
 80008d4:	481b      	ldr	r0, [pc, #108]	; (8000944 <main+0x274>)
 80008d6:	f005 fb2b 	bl	8005f30 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	2220      	movs	r2, #32
 80008e0:	4918      	ldr	r1, [pc, #96]	; (8000944 <main+0x274>)
 80008e2:	4819      	ldr	r0, [pc, #100]	; (8000948 <main+0x278>)
 80008e4:	f003 fac8 	bl	8003e78 <HAL_UART_Transmit>
 80008e8:	e01e      	b.n	8000928 <main+0x258>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	2214      	movs	r2, #20
 80008f0:	4920      	ldr	r1, [pc, #128]	; (8000974 <main+0x2a4>)
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <main+0x278>)
 80008f4:	f003 fac0 	bl	8003e78 <HAL_UART_Transmit>
 80008f8:	e016      	b.n	8000928 <main+0x258>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	491e      	ldr	r1, [pc, #120]	; (8000978 <main+0x2a8>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc8e 	bl	8000220 <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d107      	bne.n	800091a <main+0x24a>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	2214      	movs	r2, #20
 8000910:	4918      	ldr	r1, [pc, #96]	; (8000974 <main+0x2a4>)
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <main+0x278>)
 8000914:	f003 fab0 	bl	8003e78 <HAL_UART_Transmit>
 8000918:	e006      	b.n	8000928 <main+0x258>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	2214      	movs	r2, #20
 8000920:	4914      	ldr	r1, [pc, #80]	; (8000974 <main+0x2a4>)
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <main+0x278>)
 8000924:	f003 faa8 	bl	8003e78 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	2218      	movs	r2, #24
 800092e:	4908      	ldr	r1, [pc, #32]	; (8000950 <main+0x280>)
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <main+0x278>)
 8000932:	f003 faa1 	bl	8003e78 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800093a:	e712      	b.n	8000762 <main+0x92>
 800093c:	20000170 	.word	0x20000170
 8000940:	20000128 	.word	0x20000128
 8000944:	2000012c 	.word	0x2000012c
 8000948:	200001bc 	.word	0x200001bc
 800094c:	20000018 	.word	0x20000018
 8000950:	20000000 	.word	0x20000000
 8000954:	20000124 	.word	0x20000124
 8000958:	20000080 	.word	0x20000080
 800095c:	080074c4 	.word	0x080074c4
 8000960:	080074c8 	.word	0x080074c8
 8000964:	48000800 	.word	0x48000800
 8000968:	080074d0 	.word	0x080074d0
 800096c:	080074d4 	.word	0x080074d4
 8000970:	080074d8 	.word	0x080074d8
 8000974:	20000084 	.word	0x20000084
 8000978:	080074f4 	.word	0x080074f4

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	2238      	movs	r2, #56	; 0x38
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fac8 	bl	8005f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 ffa2 	bl	80018e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2340      	movs	r3, #64	; 0x40
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009be:	2355      	movs	r3, #85	; 0x55
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f83c 	bl	8001a50 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009de:	f000 f82f 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fb40 	bl	8002080 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a06:	f000 f81b 	bl	8000a40 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_UART_RxCpltCallback+0x20>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a22:	2201      	movs	r2, #1
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <HAL_UART_RxCpltCallback+0x24>)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_UART_RxCpltCallback+0x28>)
 8000a28:	f003 fabc 	bl	8003fa4 <HAL_UART_Receive_IT>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000124 	.word	0x20000124
 8000a38:	20000128 	.word	0x20000128
 8000a3c:	200001bc 	.word	0x200001bc

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a82:	f000 ffd5 	bl	8001a30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 fb34 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	f003 faaf 	bl	8004050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001bc 	.word	0x200001bc

08000afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <EXTI15_10_IRQHandler+0x1c>)
 8000b06:	f000 feb3 	bl	8001870 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000b0a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b0e:	f000 fec7 	bl	80018a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	48000800 	.word	0x48000800

08000b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	return 1;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_kill>:

int _kill(int pid, int sig)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b36:	f005 f9c9 	bl	8005ecc <__errno>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_exit>:

void _exit (int status)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffe7 	bl	8000b2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b5e:	e7fe      	b.n	8000b5e <_exit+0x12>

08000b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
	}

return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
	}
	return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f005 f92e 	bl	8005ecc <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	2000016c 	.word	0x2000016c
 8000ca4:	20000260 	.word	0x20000260

08000ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2234      	movs	r2, #52	; 0x34
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 f90a 	bl	8005f20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d0e:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <MX_TIM1_Init+0x178>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d12:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10625;
 8000d1e:	4b48      	ldr	r3, [pc, #288]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d20:	f642 1281 	movw	r2, #10625	; 0x2981
 8000d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d38:	4841      	ldr	r0, [pc, #260]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d3a:	f001 fe0b 	bl	8002954 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f7ff fe7c 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d52:	4619      	mov	r1, r3
 8000d54:	483a      	ldr	r0, [pc, #232]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d56:	f002 f94d 	bl	8002ff4 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d60:	f7ff fe6e 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d64:	4836      	ldr	r0, [pc, #216]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d66:	f001 febd 	bl	8002ae4 <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d70:	f7ff fe66 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d84:	4619      	mov	r1, r3
 8000d86:	482e      	ldr	r0, [pc, #184]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000d88:	f002 fede 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d92:	f7ff fe55 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <MX_TIM1_Init+0x17c>)
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 6375;
 8000d9a:	f641 03e7 	movw	r3, #6375	; 0x18e7
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4820      	ldr	r0, [pc, #128]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000dbe:	f002 f805 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000dc8:	f7ff fe3a 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481a      	ldr	r0, [pc, #104]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000dd6:	f001 fff9 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000de0:	f7ff fe2e 	bl	8000a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8000df0:	23cb      	movs	r3, #203	; 0xcb
 8000df2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000e24:	f002 ff26 	bl	8003c74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8000e2e:	f7ff fe07 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_TIM1_Init+0x174>)
 8000e34:	f000 f82a 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000e38:	bf00      	nop
 8000e3a:	3770      	adds	r7, #112	; 0x70
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000170 	.word	0x20000170
 8000e44:	40012c00 	.word	0x40012c00
 8000e48:	00010060 	.word	0x00010060

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x38>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10b      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11d      	bne.n	8000eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000ec6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f000 fb41 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40012c00 	.word	0x40012c00
 8000ef8:	40021000 	.word	0x40021000

08000efc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f46:	f002 ff47 	bl	8003dd8 <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f50:	f7ff fd76 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f58:	f004 fee9 	bl	8005d2e <HAL_UARTEx_SetTxFifoThreshold>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f62:	f7ff fd6d 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f6a:	f004 ff1e 	bl	8005daa <HAL_UARTEx_SetRxFifoThreshold>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f7ff fd64 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_USART2_UART_Init+0x90>)
 8000f7a:	f004 fe9f 	bl	8005cbc <HAL_UARTEx_DisableFifoMode>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f7ff fd5c 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200001bc 	.word	0x200001bc
 8000f90:	40004400 	.word	0x40004400

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09e      	sub	sp, #120	; 0x78
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2254      	movs	r2, #84	; 0x54
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 ffb3 	bl	8005f20 <memset>
  if(uartHandle->Instance==USART2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d13e      	bne.n	8001042 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fa71 	bl	80024b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff fd30 	bl	8000a40 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_UART_MspInit+0xbc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	230c      	movs	r3, #12
 8001012:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001020:	2307      	movs	r3, #7
 8001022:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f000 fa9d 	bl	800156c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2026      	movs	r0, #38	; 0x26
 8001038:	f000 f9a3 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103c:	2026      	movs	r0, #38	; 0x26
 800103e:	f000 f9ba 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3778      	adds	r7, #120	; 0x78
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107e:	f7ff fe13 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 ff29 	bl	8005ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fb23 	bl	80006d0 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001098:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 800109c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80010a0:	20000260 	.word	0x20000260

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>

080010a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f95b 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f80e 	bl	80010d8 <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	e001      	b.n	80010cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c8:	f7ff fcc0 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010cc:	79fb      	ldrb	r3, [r7, #7]

}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_InitTick+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d022      	beq.n	8001132 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_InitTick+0x6c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_InitTick+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f966 	bl	80013d2 <HAL_SYSTICK_Config>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10f      	bne.n	800112c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	d809      	bhi.n	8001126 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001112:	2200      	movs	r2, #0
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	f000 f932 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_InitTick+0x70>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e007      	b.n	8001136 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e004      	b.n	8001136 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e001      	b.n	8001136 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000a0 	.word	0x200000a0
 8001144:	20000098 	.word	0x20000098
 8001148:	2000009c 	.word	0x2000009c

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a03      	ldr	r2, [pc, #12]	; (8001168 <HAL_IncTick+0x1c>)
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	2000024c 	.word	0x2000024c
 800116c:	200000a0 	.word	0x200000a0

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000024c 	.word	0x2000024c

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d004      	beq.n	80011ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_Delay+0x40>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ac:	bf00      	nop
 80011ae:	f7ff ffdf 	bl	8001170 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d8f7      	bhi.n	80011ae <HAL_Delay+0x26>
  {
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000a0 	.word	0x200000a0

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d005      	beq.n	800140e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2204      	movs	r2, #4
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e037      	b.n	800147e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 020e 	bic.w	r2, r2, #14
 800141c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800142c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 021f 	and.w	r2, r3, #31
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800145a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800147c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d00d      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2204      	movs	r2, #4
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e047      	b.n	8001560 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020e 	bic.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800151c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001534:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800153e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
    }
  }
  return status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800157a:	e15a      	b.n	8001832 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 814c 	beq.w	800182c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d005      	beq.n	80015ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d130      	bne.n	800160e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e2:	2201      	movs	r2, #1
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 0201 	and.w	r2, r3, #1
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b03      	cmp	r3, #3
 8001618:	d017      	beq.n	800164a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d123      	bne.n	800169e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80a6 	beq.w	800182c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6613      	str	r3, [r2, #96]	; 0x60
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001722:	d01f      	beq.n	8001764 <HAL_GPIO_Init+0x1f8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d019      	beq.n	8001760 <HAL_GPIO_Init+0x1f4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a4b      	ldr	r2, [pc, #300]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_GPIO_Init+0x1f0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <HAL_GPIO_Init+0x2f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1ec>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_GPIO_Init+0x2f8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1e8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1e4>
 800174c:	2305      	movs	r3, #5
 800174e:	e00a      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001750:	2306      	movs	r3, #6
 8001752:	e008      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001754:	2304      	movs	r3, #4
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001758:	2303      	movs	r3, #3
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001764:	2300      	movs	r3, #0
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001776:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_GPIO_Init+0x300>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a8:	4a30      	ldr	r2, [pc, #192]	; (800186c <HAL_GPIO_Init+0x300>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_GPIO_Init+0x300>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_GPIO_Init+0x300>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_GPIO_Init+0x300>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_GPIO_Init+0x300>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x300>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_GPIO_Init+0x300>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f ae9d 	bne.w	800157c <HAL_GPIO_Init+0x10>
  }
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48000c00 	.word	0x48000c00
 8001864:	48001000 	.word	0x48001000
 8001868:	48001400 	.word	0x48001400
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800188c:	e002      	b.n	8001894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f806 	bl	80018d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d141      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018f6:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001902:	d131      	bne.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800190a:	4a46      	ldr	r2, [pc, #280]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001910:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800191c:	4a41      	ldr	r2, [pc, #260]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001924:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2232      	movs	r2, #50	; 0x32
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	4a3f      	ldr	r2, [pc, #252]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193a:	e002      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3b01      	subs	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194e:	d102      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f2      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001962:	d158      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e057      	b.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800196e:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001978:	e04d      	b.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d141      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	d131      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2232      	movs	r2, #50	; 0x32
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c6:	e002      	b.n	80019ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019da:	d102      	bne.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f2      	bne.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	d112      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e011      	b.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a04:	e007      	b.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40007000 	.word	0x40007000
 8001a28:	20000098 	.word	0x20000098
 8001a2c:	431bde83 	.word	0x431bde83

08001a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6093      	str	r3, [r2, #8]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e306      	b.n	8002070 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d075      	beq.n	8001b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6e:	4b97      	ldr	r3, [pc, #604]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3e>
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_OscConfig+0x44>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d10b      	bne.n	8001aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d05b      	beq.n	8001b58 <HAL_RCC_OscConfig+0x108>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d157      	bne.n	8001b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e2e1      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x74>
 8001ab6:	4b85      	ldr	r3, [pc, #532]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a84      	ldr	r2, [pc, #528]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xb0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x98>
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7b      	ldr	r2, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a74      	ldr	r2, [pc, #464]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fb32 	bl	8001170 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fb2e 	bl	8001170 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e2a6      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b22:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xc0>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb1e 	bl	8001170 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb1a 	bl	8001170 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e292      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4a:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0xe8>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x136>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_OscConfig+0x13c>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d11f      	bne.n	8001bcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x154>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e265      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	4946      	ldr	r1, [pc, #280]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <HAL_RCC_OscConfig+0x280>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fa8b 	bl	80010d8 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e251      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d023      	beq.n	8001c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fac6 	bl	8001170 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fac2 	bl	8001170 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e23a      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	492d      	ldr	r1, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
 8001c1a:	e01a      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff faa2 	bl	8001170 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fa9e 	bl	8001170 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e216      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1e0>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d041      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa7b 	bl	8001170 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fa77 	bl	8001170 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1ef      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ef      	beq.n	8001c7e <HAL_RCC_OscConfig+0x22e>
 8001c9e:	e020      	b.n	8001ce2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fa5e 	bl	8001170 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb6:	e00d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fa5a 	bl	8001170 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d906      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1d2      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ea      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a6 	beq.w	8001e3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2b4>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x2b6>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d26:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <HAL_RCC_OscConfig+0x4bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x4bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a75      	ldr	r2, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4bc>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa17 	bl	8001170 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fa13 	bl	8001170 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e18b      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x4bc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_RCC_OscConfig+0x32e>
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7c:	e024      	b.n	8001dc8 <HAL_RCC_OscConfig+0x378>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d110      	bne.n	8001da8 <HAL_RCC_OscConfig+0x358>
 8001d86:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	4a5a      	ldr	r2, [pc, #360]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x378>
 8001da8:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a56      	ldr	r2, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d016      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7ff f9ce 	bl	8001170 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f9ca 	bl	8001170 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e140      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ed      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x388>
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f9b7 	bl	8001170 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff f9b3 	bl	8001170 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e129      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ed      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e56:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f986 	bl	8001170 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e68:	f7ff f982 	bl	8001170 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0fa      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ef      	beq.n	8001e68 <HAL_RCC_OscConfig+0x418>
 8001e88:	e01b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f969 	bl	8001170 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea2:	f7ff f965 	bl	8001170 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0dd      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ef      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80d1 	beq.w	800206e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	f000 808b 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d15e      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7ff f93f 	bl	8001170 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	e00c      	b.n	8001f10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff f93b 	bl	8001170 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d905      	bls.n	8001f10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0b3      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ec      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	4b56      	ldr	r3, [pc, #344]	; (800207c <HAL_RCC_OscConfig+0x62c>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6a11      	ldr	r1, [r2, #32]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f36:	0212      	lsls	r2, r2, #8
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f3e:	0852      	lsrs	r2, r2, #1
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0552      	lsls	r2, r2, #21
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4a:	0852      	lsrs	r2, r2, #1
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	0652      	lsls	r2, r2, #25
 8001f50:	4311      	orrs	r1, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f56:	06d2      	lsls	r2, r2, #27
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	4947      	ldr	r1, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a44      	ldr	r2, [pc, #272]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a41      	ldr	r2, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f8fa 	bl	8001170 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f8f6 	bl	8001170 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e06e      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x530>
 8001f9e:	e066      	b.n	800206e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fbe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f8d2 	bl	8001170 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f8ce 	bl	8001170 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e046      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x580>
 8001fee:	e03e      	b.n	800206e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e039      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_OscConfig+0x628>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d12c      	bne.n	800206a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d123      	bne.n	800206a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d11b      	bne.n	800206a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d113      	bne.n	800206a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d109      	bne.n	800206a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	019f800c 	.word	0x019f800c

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e11e      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b8e      	ldr	r3, [pc, #568]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 020f 	bic.w	r2, r3, #15
 80020ae:	498c      	ldr	r1, [pc, #560]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e106      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d073      	beq.n	80021bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d129      	bne.n	8002130 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0f4      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020ec:	f000 f99e 	bl	800242c <RCC_GetSysClockFreqFromPLLSource>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4a7c      	ldr	r2, [pc, #496]	; (80022e8 <HAL_RCC_ClockConfig+0x268>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d93f      	bls.n	800217a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020fa:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	d033      	beq.n	800217a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12f      	bne.n	800217a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800211a:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002122:	4a70      	ldr	r2, [pc, #448]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e024      	b.n	800217a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0c6      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0be      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002158:	f000 f8ce 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 800215c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_RCC_ClockConfig+0x268>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d909      	bls.n	800217a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216e:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4957      	ldr	r1, [pc, #348]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7fe fff0 	bl	8001170 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7fe ffec 	bl	8001170 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e095      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021f4:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
 800220e:	e008      	b.n	8002222 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d105      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800221c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002220:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d21d      	bcs.n	800226c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 020f 	bic.w	r2, r3, #15
 8002238:	4929      	ldr	r1, [pc, #164]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002240:	f7fe ff96 	bl	8001170 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe ff92 	bl	8001170 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e03b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x260>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d1ed      	bne.n	8002248 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4917      	ldr	r1, [pc, #92]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	490f      	ldr	r1, [pc, #60]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022aa:	f000 f825 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	490c      	ldr	r1, [pc, #48]	; (80022ec <HAL_RCC_ClockConfig+0x26c>)
 80022bc:	5ccb      	ldrb	r3, [r1, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x270>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ff02 	bl	80010d8 <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	04c4b400 	.word	0x04c4b400
 80022ec:	080074f8 	.word	0x080074f8
 80022f0:	20000098 	.word	0x20000098
 80022f4:	2000009c 	.word	0x2000009c

080022f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022fe:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d102      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e047      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d102      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e03e      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d136      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
      break;
 8002364:	e00c      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
      break;
 800237e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e001      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023a0:	693b      	ldr	r3, [r7, #16]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	016e3600 	.word	0x016e3600

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000098 	.word	0x20000098

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08007508 	.word	0x08007508

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002404:	f7ff ffda 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4904      	ldr	r1, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08007508 	.word	0x08007508

0800242c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3301      	adds	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d10c      	bne.n	800246a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245a:	68d2      	ldr	r2, [r2, #12]
 800245c:	0a12      	lsrs	r2, r2, #8
 800245e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
    break;
 8002468:	e00c      	b.n	8002484 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	0a12      	lsrs	r2, r2, #8
 8002478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    break;
 8002482:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0e5b      	lsrs	r3, r3, #25
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	016e3600 	.word	0x016e3600
 80024b4:	00f42400 	.word	0x00f42400

080024b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c0:	2300      	movs	r3, #0
 80024c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c4:	2300      	movs	r3, #0
 80024c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8098 	beq.w	8002606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a39      	ldr	r2, [pc, #228]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800250e:	f7fe fe2f 	bl	8001170 <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002514:	e009      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe fe2b 	bl	8001170 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d902      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	74fb      	strb	r3, [r7, #19]
        break;
 8002528:	e005      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ef      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d159      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01e      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	d019      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fdeb 	bl	8001170 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259c:	e00b      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fde7 	bl	8001170 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d902      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	74fb      	strb	r3, [r7, #19]
            break;
 80025b4:	e006      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ec      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e0:	e008      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	74bb      	strb	r3, [r7, #18]
 80025e6:	e005      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f4:	7c7b      	ldrb	r3, [r7, #17]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4ba7      	ldr	r3, [pc, #668]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4aa6      	ldr	r2, [pc, #664]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002612:	4ba1      	ldr	r3, [pc, #644]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f023 0203 	bic.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	499d      	ldr	r1, [pc, #628]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002634:	4b98      	ldr	r3, [pc, #608]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 020c 	bic.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4995      	ldr	r1, [pc, #596]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002656:	4b90      	ldr	r3, [pc, #576]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	498c      	ldr	r1, [pc, #560]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002678:	4b87      	ldr	r3, [pc, #540]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4984      	ldr	r1, [pc, #528]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800269a:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	497b      	ldr	r1, [pc, #492]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4973      	ldr	r1, [pc, #460]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	496a      	ldr	r1, [pc, #424]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4962      	ldr	r1, [pc, #392]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	4959      	ldr	r1, [pc, #356]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002744:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	4951      	ldr	r1, [pc, #324]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002766:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	4948      	ldr	r1, [pc, #288]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4940      	ldr	r1, [pc, #256]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a6:	d105      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	4932      	ldr	r1, [pc, #200]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d105      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	4924      	ldr	r1, [pc, #144]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002816:	d105      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284e:	d105      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d019      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a02      	ldr	r2, [pc, #8]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
 8002894:	e002      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4926      	ldr	r1, [pc, #152]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	4918      	ldr	r1, [pc, #96]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800291a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	490a      	ldr	r1, [pc, #40]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002944:	7cbb      	ldrb	r3, [r7, #18]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e049      	b.n	80029fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fa66 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fc44 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04c      	b.n	8002ab6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_TIM_Base_Start+0xc0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d01d      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_TIM_Base_Start+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <HAL_TIM_Base_Start+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_TIM_Base_Start+0xcc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_Base_Start+0xd0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_TIM_Base_Start+0xd4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_Base_Start+0x70>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIM_Base_Start+0xd8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d115      	bne.n	8002aa0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_TIM_Base_Start+0xdc>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d015      	beq.n	8002ab2 <HAL_TIM_Base_Start+0xae>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d011      	beq.n	8002ab2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	e008      	b.n	8002ab2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e000      	b.n	8002ab4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40013400 	.word	0x40013400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40015000 	.word	0x40015000
 8002ae0:	00010007 	.word	0x00010007

08002ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e049      	b.n	8002b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f841 	bl	8002b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fb7c 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x24>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e03c      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d109      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x3e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e02f      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d109      	bne.n	8002c00 <HAL_TIM_PWM_Start+0x58>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e022      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d109      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e015      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x8c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0a6      	b.n	8002d9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xb6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	e023      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xc6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	e01b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	e013      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xe6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0xf6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9c:	e003      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 ff24 	bl	8003afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_TIM_PWM_Start+0x1fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_TIM_PWM_Start+0x200>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_TIM_PWM_Start+0x204>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <HAL_TIM_PWM_Start+0x208>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <HAL_TIM_PWM_Start+0x20c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_TIM_PWM_Start+0x210>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_PWM_Start+0x14c>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x14e>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_TIM_PWM_Start+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d01d      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <HAL_TIM_PWM_Start+0x214>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_TIM_PWM_Start+0x218>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_TIM_PWM_Start+0x21c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_TIM_PWM_Start+0x200>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_PWM_Start+0x204>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_TIM_PWM_Start+0x210>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d115      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_TIM_PWM_Start+0x220>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d015      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d011      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e008      	b.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e000      	b.n	8002d9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800
 8002db8:	40015000 	.word	0x40015000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	00010007 	.word	0x00010007

08002dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0ff      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b14      	cmp	r3, #20
 8002df6:	f200 80f0 	bhi.w	8002fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002fdb 	.word	0x08002fdb
 8002e08:	08002fdb 	.word	0x08002fdb
 8002e0c:	08002fdb 	.word	0x08002fdb
 8002e10:	08002e95 	.word	0x08002e95
 8002e14:	08002fdb 	.word	0x08002fdb
 8002e18:	08002fdb 	.word	0x08002fdb
 8002e1c:	08002fdb 	.word	0x08002fdb
 8002e20:	08002ed7 	.word	0x08002ed7
 8002e24:	08002fdb 	.word	0x08002fdb
 8002e28:	08002fdb 	.word	0x08002fdb
 8002e2c:	08002fdb 	.word	0x08002fdb
 8002e30:	08002f17 	.word	0x08002f17
 8002e34:	08002fdb 	.word	0x08002fdb
 8002e38:	08002fdb 	.word	0x08002fdb
 8002e3c:	08002fdb 	.word	0x08002fdb
 8002e40:	08002f59 	.word	0x08002f59
 8002e44:	08002fdb 	.word	0x08002fdb
 8002e48:	08002fdb 	.word	0x08002fdb
 8002e4c:	08002fdb 	.word	0x08002fdb
 8002e50:	08002f99 	.word	0x08002f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fa88 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
      break;
 8002e92:	e0a5      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fb02 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      break;
 8002ed4:	e084      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fb75 	bl	80035cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0208 	orr.w	r2, r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0204 	bic.w	r2, r2, #4
 8002f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e064      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fbe7 	bl	80036f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      break;
 8002f56:	e043      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fc5a 	bl	8003818 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002f96:	e023      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fca4 	bl	80038ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8002fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop

08002ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e0f6      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x20a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800302e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_TIM_ConfigClockSource+0x214>)
 800304a:	4293      	cmp	r3, r2
 800304c:	f000 80c1 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003050:	4a6d      	ldr	r2, [pc, #436]	; (8003208 <HAL_TIM_ConfigClockSource+0x214>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f200 80c6 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003058:	4a6c      	ldr	r2, [pc, #432]	; (800320c <HAL_TIM_ConfigClockSource+0x218>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f000 80b9 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003060:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_TIM_ConfigClockSource+0x218>)
 8003062:	4293      	cmp	r3, r2
 8003064:	f200 80be 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003068:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_TIM_ConfigClockSource+0x21c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f000 80b1 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003070:	4a67      	ldr	r2, [pc, #412]	; (8003210 <HAL_TIM_ConfigClockSource+0x21c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f200 80b6 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003078:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_TIM_ConfigClockSource+0x220>)
 800307a:	4293      	cmp	r3, r2
 800307c:	f000 80a9 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003080:	4a64      	ldr	r2, [pc, #400]	; (8003214 <HAL_TIM_ConfigClockSource+0x220>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f200 80ae 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003088:	4a63      	ldr	r2, [pc, #396]	; (8003218 <HAL_TIM_ConfigClockSource+0x224>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f000 80a1 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003090:	4a61      	ldr	r2, [pc, #388]	; (8003218 <HAL_TIM_ConfigClockSource+0x224>)
 8003092:	4293      	cmp	r3, r2
 8003094:	f200 80a6 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003098:	4a60      	ldr	r2, [pc, #384]	; (800321c <HAL_TIM_ConfigClockSource+0x228>)
 800309a:	4293      	cmp	r3, r2
 800309c:	f000 8099 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 80030a0:	4a5e      	ldr	r2, [pc, #376]	; (800321c <HAL_TIM_ConfigClockSource+0x228>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	f200 809e 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80030ac:	f000 8091 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 80030b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80030b4:	f200 8096 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030bc:	f000 8089 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 80030c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c4:	f200 808e 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d03e      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x158>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	f200 8087 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	f000 8086 	beq.w	80031ea <HAL_TIM_ConfigClockSource+0x1f6>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d87f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d01a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x12a>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d87b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d050      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x19e>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d877      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d03c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x17e>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d873      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d058      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x1be>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d86f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d064      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d86b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d060      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d867      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d05a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x1de>
 800311c:	e062      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fcc5 	bl	8003abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04f      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 fcae 	bl	8003abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e03c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fc20 	bl	80039c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fc79 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 8003190:	e02c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fc3f 	bl	8003a22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fc69 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fc00 	bl	80039c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc59 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e00c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fc50 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80031e2:	e003      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80031ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	00100070 	.word	0x00100070
 800320c:	00100060 	.word	0x00100060
 8003210:	00100050 	.word	0x00100050
 8003214:	00100040 	.word	0x00100040
 8003218:	00100030 	.word	0x00100030
 800321c:	00100020 	.word	0x00100020

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a46      	ldr	r2, [pc, #280]	; (800334c <TIM_Base_SetConfig+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d017      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d013      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a43      	ldr	r2, [pc, #268]	; (8003350 <TIM_Base_SetConfig+0x130>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <TIM_Base_SetConfig+0x134>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a41      	ldr	r2, [pc, #260]	; (8003358 <TIM_Base_SetConfig+0x138>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	; (800335c <TIM_Base_SetConfig+0x13c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x48>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <TIM_Base_SetConfig+0x140>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a33      	ldr	r2, [pc, #204]	; (800334c <TIM_Base_SetConfig+0x12c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d023      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d01f      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a30      	ldr	r2, [pc, #192]	; (8003350 <TIM_Base_SetConfig+0x130>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01b      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <TIM_Base_SetConfig+0x134>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d017      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <TIM_Base_SetConfig+0x138>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	; (800335c <TIM_Base_SetConfig+0x13c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <TIM_Base_SetConfig+0x144>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <TIM_Base_SetConfig+0x148>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	; (800336c <TIM_Base_SetConfig+0x14c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0xaa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <TIM_Base_SetConfig+0x140>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <TIM_Base_SetConfig+0x12c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <TIM_Base_SetConfig+0x110>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a14      	ldr	r2, [pc, #80]	; (800335c <TIM_Base_SetConfig+0x13c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00f      	beq.n	8003330 <TIM_Base_SetConfig+0x110>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <TIM_Base_SetConfig+0x144>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_Base_SetConfig+0x110>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a13      	ldr	r2, [pc, #76]	; (8003368 <TIM_Base_SetConfig+0x148>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_Base_SetConfig+0x110>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <TIM_Base_SetConfig+0x14c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_Base_SetConfig+0x110>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <TIM_Base_SetConfig+0x140>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40015000 	.word	0x40015000
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0302 	bic.w	r3, r3, #2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a30      	ldr	r2, [pc, #192]	; (800348c <TIM_OC1_SetConfig+0x11c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <TIM_OC1_SetConfig+0x88>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <TIM_OC1_SetConfig+0x120>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00f      	beq.n	80033f8 <TIM_OC1_SetConfig+0x88>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a2e      	ldr	r2, [pc, #184]	; (8003494 <TIM_OC1_SetConfig+0x124>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_OC1_SetConfig+0x88>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <TIM_OC1_SetConfig+0x128>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_OC1_SetConfig+0x88>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a2c      	ldr	r2, [pc, #176]	; (800349c <TIM_OC1_SetConfig+0x12c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC1_SetConfig+0x88>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <TIM_OC1_SetConfig+0x130>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10c      	bne.n	8003412 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0308 	bic.w	r3, r3, #8
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <TIM_OC1_SetConfig+0x11c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <TIM_OC1_SetConfig+0xd2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <TIM_OC1_SetConfig+0x120>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_OC1_SetConfig+0xd2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <TIM_OC1_SetConfig+0x124>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_OC1_SetConfig+0xd2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <TIM_OC1_SetConfig+0x128>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_OC1_SetConfig+0xd2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <TIM_OC1_SetConfig+0x12c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC1_SetConfig+0xd2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <TIM_OC1_SetConfig+0x130>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800
 80034a0:	40015000 	.word	0x40015000

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0210 	bic.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0320 	bic.w	r3, r3, #32
 80034f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <TIM_OC2_SetConfig+0x110>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_OC2_SetConfig+0x74>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <TIM_OC2_SetConfig+0x114>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC2_SetConfig+0x74>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <TIM_OC2_SetConfig+0x118>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10d      	bne.n	8003534 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <TIM_OC2_SetConfig+0x110>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <TIM_OC2_SetConfig+0xc0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <TIM_OC2_SetConfig+0x114>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00f      	beq.n	8003564 <TIM_OC2_SetConfig+0xc0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <TIM_OC2_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_OC2_SetConfig+0xc0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_OC2_SetConfig+0x120>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_OC2_SetConfig+0xc0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <TIM_OC2_SetConfig+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC2_SetConfig+0xc0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <TIM_OC2_SetConfig+0x118>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d113      	bne.n	800358c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40015000 	.word	0x40015000
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <TIM_OC3_SetConfig+0x10c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_OC3_SetConfig+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <TIM_OC3_SetConfig+0x110>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC3_SetConfig+0x72>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <TIM_OC3_SetConfig+0x114>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10d      	bne.n	800365a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <TIM_OC3_SetConfig+0x10c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <TIM_OC3_SetConfig+0xbe>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <TIM_OC3_SetConfig+0x110>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00f      	beq.n	800368a <TIM_OC3_SetConfig+0xbe>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <TIM_OC3_SetConfig+0x118>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_OC3_SetConfig+0xbe>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <TIM_OC3_SetConfig+0x11c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_OC3_SetConfig+0xbe>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <TIM_OC3_SetConfig+0x120>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_OC3_SetConfig+0xbe>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <TIM_OC3_SetConfig+0x114>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d113      	bne.n	80036b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40013400 	.word	0x40013400
 80036e0:	40015000 	.word	0x40015000
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800

080036f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800373e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	031b      	lsls	r3, r3, #12
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <TIM_OC4_SetConfig+0x110>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_OC4_SetConfig+0x74>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <TIM_OC4_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC4_SetConfig+0x74>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <TIM_OC4_SetConfig+0x118>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10d      	bne.n	8003780 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800376a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	031b      	lsls	r3, r3, #12
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <TIM_OC4_SetConfig+0x110>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <TIM_OC4_SetConfig+0xc0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <TIM_OC4_SetConfig+0x114>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00f      	beq.n	80037b0 <TIM_OC4_SetConfig+0xc0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <TIM_OC4_SetConfig+0x11c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_OC4_SetConfig+0xc0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <TIM_OC4_SetConfig+0x120>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_OC4_SetConfig+0xc0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <TIM_OC4_SetConfig+0x124>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_OC4_SetConfig+0xc0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC4_SetConfig+0x118>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d113      	bne.n	80037d8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40015000 	.word	0x40015000
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800

08003818 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800385c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <TIM_OC5_SetConfig+0xbc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <TIM_OC5_SetConfig+0x82>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <TIM_OC5_SetConfig+0xc0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <TIM_OC5_SetConfig+0x82>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <TIM_OC5_SetConfig+0xc4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_OC5_SetConfig+0x82>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <TIM_OC5_SetConfig+0xc8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC5_SetConfig+0x82>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <TIM_OC5_SetConfig+0xcc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC5_SetConfig+0x82>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <TIM_OC5_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d109      	bne.n	80038ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40013400 	.word	0x40013400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	40015000 	.word	0x40015000

080038ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <TIM_OC6_SetConfig+0xc0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <TIM_OC6_SetConfig+0x84>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <TIM_OC6_SetConfig+0xc4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_OC6_SetConfig+0x84>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <TIM_OC6_SetConfig+0xc8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_OC6_SetConfig+0x84>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <TIM_OC6_SetConfig+0xcc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_OC6_SetConfig+0x84>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <TIM_OC6_SetConfig+0xd0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC6_SetConfig+0x84>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <TIM_OC6_SetConfig+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800
 80039c0:	40015000 	.word	0x40015000

080039c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0201 	bic.w	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 030a 	bic.w	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b087      	sub	sp, #28
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0210 	bic.w	r2, r3, #16
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	031b      	lsls	r3, r3, #12
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f043 0307 	orr.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2201      	movs	r2, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	401a      	ands	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e074      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a33      	ldr	r2, [pc, #204]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ba4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d01d      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40015000 	.word	0x40015000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000

08003c74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e096      	b.n	8003dbe <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d106      	bne.n	8003d36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d12b      	bne.n	8003dac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	051b      	lsls	r3, r3, #20
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d106      	bne.n	8003dac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40013400 	.word	0x40013400
 8003dd4:	40015000 	.word	0x40015000

08003dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fd f8c9 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fc50 	bl	80046c0 <UART_SetConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff40 	bl	8004cb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 ffc7 	bl	8004dfc <UART_CheckIdleState>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	f040 8083 	bne.w	8003f9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_Transmit+0x28>
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e07b      	b.n	8003f9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Transmit+0x3a>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e074      	b.n	8003f9c <HAL_UART_Transmit+0x124>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd f951 	bl	8001170 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x84>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003f0c:	e02c      	b.n	8003f68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ffba 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e039      	b.n	8003f9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e007      	b.n	8003f56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1cc      	bne.n	8003f0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 ff87 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d142      	bne.n	8004042 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Receive_IT+0x24>
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e03b      	b.n	8004044 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Receive_IT+0x36>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e034      	b.n	8004044 <HAL_UART_Receive_IT+0xa0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_UART_Receive_IT+0xa8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d018      	beq.n	8004032 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	613b      	str	r3, [r7, #16]
   return(result);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	69f9      	ldr	r1, [r7, #28]
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	61bb      	str	r3, [r7, #24]
   return(result);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	461a      	mov	r2, r3
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fff3 	bl	8005024 <UART_Start_Receive_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	e000      	b.n	8004044 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40008000 	.word	0x40008000

08004050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b0ba      	sub	sp, #232	; 0xe8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800407a:	f640 030f 	movw	r3, #2063	; 0x80f
 800407e:	4013      	ands	r3, r2
 8004080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11b      	bne.n	80040c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 82d6 	beq.w	8004666 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      }
      return;
 80040c2:	e2d0      	b.n	8004666 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 811f 	beq.w	800430c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_UART_IRQHandler+0x2b0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040de:	4b89      	ldr	r3, [pc, #548]	; (8004304 <HAL_UART_IRQHandler+0x2b4>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8112 	beq.w	800430c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d011      	beq.n	8004118 <HAL_UART_IRQHandler+0xc8>
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <HAL_UART_IRQHandler+0xf8>
 8004124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2202      	movs	r2, #2
 8004136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <HAL_UART_IRQHandler+0x128>
 8004154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2204      	movs	r2, #4
 8004166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416e:	f043 0202 	orr.w	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004190:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004194:	4b5a      	ldr	r3, [pc, #360]	; (8004300 <HAL_UART_IRQHandler+0x2b0>)
 8004196:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2208      	movs	r2, #8
 80041a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041aa:	f043 0208 	orr.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_UART_IRQHandler+0x196>
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 823c 	beq.w	800466a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d105      	bne.n	8004216 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800420a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04f      	beq.n	80042ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 f814 	bl	8005278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d141      	bne.n	80042e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800428a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d013      	beq.n	80042da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_UART_IRQHandler+0x2b8>)
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd f8ec 	bl	800149c <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00f      	b.n	80042fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9da 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00b      	b.n	80042fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9d6 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e007      	b.n	80042fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9d2 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80042f8:	e1b7      	b.n	800466a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fa:	bf00      	nop
    return;
 80042fc:	e1b5      	b.n	800466a <HAL_UART_IRQHandler+0x61a>
 80042fe:	bf00      	nop
 8004300:	10000001 	.word	0x10000001
 8004304:	04000120 	.word	0x04000120
 8004308:	08005345 	.word	0x08005345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 814a 	bne.w	80045aa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8143 	beq.w	80045aa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 813c 	beq.w	80045aa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2210      	movs	r2, #16
 8004338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	f040 80b5 	bne.w	80044b4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8187 	beq.w	800466e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436a:	429a      	cmp	r2, r3
 800436c:	f080 817f 	bcs.w	800466e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004376:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 8086 	bne.w	8004498 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1da      	bne.n	800438c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3308      	adds	r3, #8
 80043f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800440c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e1      	bne.n	80043d6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3308      	adds	r3, #8
 8004418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800443c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e3      	bne.n	8004412 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004468:	f023 0310 	bic.w	r3, r3, #16
 800446c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447a:	65bb      	str	r3, [r7, #88]	; 0x58
 800447c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e4      	bne.n	8004458 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc ffa9 	bl	80013ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8fb 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044b2:	e0dc      	b.n	800466e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80ce 	beq.w	8004672 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80044d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80c9 	beq.w	8004672 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004502:	647b      	str	r3, [r7, #68]	; 0x44
 8004504:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e4      	bne.n	80044e0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	623b      	str	r3, [r7, #32]
   return(result);
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800453e:	633a      	str	r2, [r7, #48]	; 0x30
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e1      	bne.n	8004516 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	60fb      	str	r3, [r7, #12]
   return(result);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	69b9      	ldr	r1, [r7, #24]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	617b      	str	r3, [r7, #20]
   return(result);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e4      	bne.n	8004566 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f880 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a8:	e063      	b.n	8004672 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <HAL_UART_IRQHandler+0x584>
 80045b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f001 fb57 	bl	8005c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045d2:	e051      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d014      	beq.n	800460a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d03a      	beq.n	8004676 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
    }
    return;
 8004608:	e035      	b.n	8004676 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_UART_IRQHandler+0x5da>
 8004616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fea4 	bl	8005370 <UART_EndTransmit_IT>
    return;
 8004628:	e026      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_UART_IRQHandler+0x5fa>
 8004636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 fb30 	bl	8005ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004648:	e016      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_UART_IRQHandler+0x628>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	2b00      	cmp	r3, #0
 800465c:	da0c      	bge.n	8004678 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fb18 	bl	8005c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004664:	e008      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
      return;
 8004666:	bf00      	nop
 8004668:	e006      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
    return;
 800466a:	bf00      	nop
 800466c:	e004      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
      return;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
      return;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_UART_IRQHandler+0x628>
    return;
 8004676:	bf00      	nop
  }
}
 8004678:	37e8      	adds	r7, #232	; 0xe8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop

08004680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c4:	b08c      	sub	sp, #48	; 0x30
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4baa      	ldr	r3, [pc, #680]	; (8004998 <UART_SetConfig+0x2d8>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a9f      	ldr	r2, [pc, #636]	; (800499c <UART_SetConfig+0x2dc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004728:	4313      	orrs	r3, r2
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004736:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004740:	430b      	orrs	r3, r1
 8004742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	f023 010f 	bic.w	r1, r3, #15
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a90      	ldr	r2, [pc, #576]	; (80049a0 <UART_SetConfig+0x2e0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d125      	bne.n	80047b0 <UART_SetConfig+0xf0>
 8004764:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <UART_SetConfig+0x2e4>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d81a      	bhi.n	80047a8 <UART_SetConfig+0xe8>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0xb8>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	08004789 	.word	0x08004789
 800477c:	08004799 	.word	0x08004799
 8004780:	08004791 	.word	0x08004791
 8004784:	080047a1 	.word	0x080047a1
 8004788:	2301      	movs	r3, #1
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478e:	e116      	b.n	80049be <UART_SetConfig+0x2fe>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004796:	e112      	b.n	80049be <UART_SetConfig+0x2fe>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479e:	e10e      	b.n	80049be <UART_SetConfig+0x2fe>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a6:	e10a      	b.n	80049be <UART_SetConfig+0x2fe>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e106      	b.n	80049be <UART_SetConfig+0x2fe>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <UART_SetConfig+0x2e8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d138      	bne.n	800482c <UART_SetConfig+0x16c>
 80047ba:	4b7a      	ldr	r3, [pc, #488]	; (80049a4 <UART_SetConfig+0x2e4>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d82d      	bhi.n	8004824 <UART_SetConfig+0x164>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x110>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004825 	.word	0x08004825
 80047d8:	08004825 	.word	0x08004825
 80047dc:	08004825 	.word	0x08004825
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	08004825 	.word	0x08004825
 80047f8:	08004825 	.word	0x08004825
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800481d 	.word	0x0800481d
 8004804:	2300      	movs	r3, #0
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e0d8      	b.n	80049be <UART_SetConfig+0x2fe>
 800480c:	2302      	movs	r3, #2
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004812:	e0d4      	b.n	80049be <UART_SetConfig+0x2fe>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481a:	e0d0      	b.n	80049be <UART_SetConfig+0x2fe>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004822:	e0cc      	b.n	80049be <UART_SetConfig+0x2fe>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482a:	e0c8      	b.n	80049be <UART_SetConfig+0x2fe>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5e      	ldr	r2, [pc, #376]	; (80049ac <UART_SetConfig+0x2ec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d125      	bne.n	8004882 <UART_SetConfig+0x1c2>
 8004836:	4b5b      	ldr	r3, [pc, #364]	; (80049a4 <UART_SetConfig+0x2e4>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d016      	beq.n	8004872 <UART_SetConfig+0x1b2>
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d818      	bhi.n	800487a <UART_SetConfig+0x1ba>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d00a      	beq.n	8004862 <UART_SetConfig+0x1a2>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d814      	bhi.n	800487a <UART_SetConfig+0x1ba>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <UART_SetConfig+0x19a>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d008      	beq.n	800486a <UART_SetConfig+0x1aa>
 8004858:	e00f      	b.n	800487a <UART_SetConfig+0x1ba>
 800485a:	2300      	movs	r3, #0
 800485c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004860:	e0ad      	b.n	80049be <UART_SetConfig+0x2fe>
 8004862:	2302      	movs	r3, #2
 8004864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004868:	e0a9      	b.n	80049be <UART_SetConfig+0x2fe>
 800486a:	2304      	movs	r3, #4
 800486c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004870:	e0a5      	b.n	80049be <UART_SetConfig+0x2fe>
 8004872:	2308      	movs	r3, #8
 8004874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004878:	e0a1      	b.n	80049be <UART_SetConfig+0x2fe>
 800487a:	2310      	movs	r3, #16
 800487c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004880:	e09d      	b.n	80049be <UART_SetConfig+0x2fe>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <UART_SetConfig+0x2f0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d125      	bne.n	80048d8 <UART_SetConfig+0x218>
 800488c:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <UART_SetConfig+0x2e4>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004896:	2bc0      	cmp	r3, #192	; 0xc0
 8004898:	d016      	beq.n	80048c8 <UART_SetConfig+0x208>
 800489a:	2bc0      	cmp	r3, #192	; 0xc0
 800489c:	d818      	bhi.n	80048d0 <UART_SetConfig+0x210>
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d00a      	beq.n	80048b8 <UART_SetConfig+0x1f8>
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d814      	bhi.n	80048d0 <UART_SetConfig+0x210>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <UART_SetConfig+0x1f0>
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d008      	beq.n	80048c0 <UART_SetConfig+0x200>
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x210>
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e082      	b.n	80049be <UART_SetConfig+0x2fe>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e07e      	b.n	80049be <UART_SetConfig+0x2fe>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e07a      	b.n	80049be <UART_SetConfig+0x2fe>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ce:	e076      	b.n	80049be <UART_SetConfig+0x2fe>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e072      	b.n	80049be <UART_SetConfig+0x2fe>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a35      	ldr	r2, [pc, #212]	; (80049b4 <UART_SetConfig+0x2f4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12a      	bne.n	8004938 <UART_SetConfig+0x278>
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <UART_SetConfig+0x2e4>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f0:	d01a      	beq.n	8004928 <UART_SetConfig+0x268>
 80048f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0x270>
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d00c      	beq.n	8004918 <UART_SetConfig+0x258>
 80048fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004902:	d815      	bhi.n	8004930 <UART_SetConfig+0x270>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x250>
 8004908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490c:	d008      	beq.n	8004920 <UART_SetConfig+0x260>
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x270>
 8004910:	2300      	movs	r3, #0
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e052      	b.n	80049be <UART_SetConfig+0x2fe>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e04e      	b.n	80049be <UART_SetConfig+0x2fe>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e04a      	b.n	80049be <UART_SetConfig+0x2fe>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e046      	b.n	80049be <UART_SetConfig+0x2fe>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e042      	b.n	80049be <UART_SetConfig+0x2fe>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <UART_SetConfig+0x2dc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d13a      	bne.n	80049b8 <UART_SetConfig+0x2f8>
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <UART_SetConfig+0x2e4>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800494c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004950:	d01a      	beq.n	8004988 <UART_SetConfig+0x2c8>
 8004952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004956:	d81b      	bhi.n	8004990 <UART_SetConfig+0x2d0>
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495c:	d00c      	beq.n	8004978 <UART_SetConfig+0x2b8>
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004962:	d815      	bhi.n	8004990 <UART_SetConfig+0x2d0>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <UART_SetConfig+0x2b0>
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d008      	beq.n	8004980 <UART_SetConfig+0x2c0>
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x2d0>
 8004970:	2300      	movs	r3, #0
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e022      	b.n	80049be <UART_SetConfig+0x2fe>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e01e      	b.n	80049be <UART_SetConfig+0x2fe>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e01a      	b.n	80049be <UART_SetConfig+0x2fe>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e016      	b.n	80049be <UART_SetConfig+0x2fe>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e012      	b.n	80049be <UART_SetConfig+0x2fe>
 8004998:	cfff69f3 	.word	0xcfff69f3
 800499c:	40008000 	.word	0x40008000
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40004400 	.word	0x40004400
 80049ac:	40004800 	.word	0x40004800
 80049b0:	40004c00 	.word	0x40004c00
 80049b4:	40005000 	.word	0x40005000
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4aae      	ldr	r2, [pc, #696]	; (8004c7c <UART_SetConfig+0x5bc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	f040 8097 	bne.w	8004af8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d823      	bhi.n	8004a1a <UART_SetConfig+0x35a>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x318>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a0b 	.word	0x08004a0b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a1b 	.word	0x08004a1b
 80049f4:	08004a1b 	.word	0x08004a1b
 80049f8:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fd fcea 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004a00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a02:	e010      	b.n	8004a26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b9e      	ldr	r3, [pc, #632]	; (8004c80 <UART_SetConfig+0x5c0>)
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a08:	e00d      	b.n	8004a26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fd fc75 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8004a0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a10:	e009      	b.n	8004a26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a18:	e005      	b.n	8004a26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8130 	beq.w	8004c8e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	4a94      	ldr	r2, [pc, #592]	; (8004c84 <UART_SetConfig+0x5c4>)
 8004a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d305      	bcc.n	8004a5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d903      	bls.n	8004a66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a64:	e113      	b.n	8004c8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	60fa      	str	r2, [r7, #12]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <UART_SetConfig+0x5c4>)
 8004a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a88:	f7fb fc2a 	bl	80002e0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	020b      	lsls	r3, r1, #8
 8004a9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004aa2:	0202      	lsls	r2, r0, #8
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	6849      	ldr	r1, [r1, #4]
 8004aa8:	0849      	lsrs	r1, r1, #1
 8004aaa:	2000      	movs	r0, #0
 8004aac:	460c      	mov	r4, r1
 8004aae:	4605      	mov	r5, r0
 8004ab0:	eb12 0804 	adds.w	r8, r2, r4
 8004ab4:	eb43 0905 	adc.w	r9, r3, r5
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	469a      	mov	sl, r3
 8004ac0:	4693      	mov	fp, r2
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	f7fb fc09 	bl	80002e0 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004adc:	d308      	bcc.n	8004af0 <UART_SetConfig+0x430>
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae4:	d204      	bcs.n	8004af0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e0ce      	b.n	8004c8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004af6:	e0ca      	b.n	8004c8e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d166      	bne.n	8004bd0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d827      	bhi.n	8004b5a <UART_SetConfig+0x49a>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x450>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fd fc4e 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b3a:	e014      	b.n	8004b66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fd fc60 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b42:	e010      	b.n	8004b66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b4e      	ldr	r3, [pc, #312]	; (8004c80 <UART_SetConfig+0x5c0>)
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b48:	e00d      	b.n	8004b66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fd fbd5 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8004b4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b50:	e009      	b.n	8004b66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b58:	e005      	b.n	8004b66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8090 	beq.w	8004c8e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	4a44      	ldr	r2, [pc, #272]	; (8004c84 <UART_SetConfig+0x5c4>)
 8004b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b80:	005a      	lsls	r2, r3, #1
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	441a      	add	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d916      	bls.n	8004bc8 <UART_SetConfig+0x508>
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d212      	bcs.n	8004bc8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f023 030f 	bic.w	r3, r3, #15
 8004baa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	8bfb      	ldrh	r3, [r7, #30]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	8bfa      	ldrh	r2, [r7, #30]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e062      	b.n	8004c8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bce:	e05e      	b.n	8004c8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d828      	bhi.n	8004c2a <UART_SetConfig+0x56a>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x520>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fd fbe6 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0a:	e014      	b.n	8004c36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fd fbf8 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8004c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c12:	e010      	b.n	8004c36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <UART_SetConfig+0x5c0>)
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fd fb6d 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c20:	e009      	b.n	8004c36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c28:	e005      	b.n	8004c36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c34:	bf00      	nop
    }

    if (pclk != 0U)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d028      	beq.n	8004c8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <UART_SetConfig+0x5c4>)
 8004c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	441a      	add	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d910      	bls.n	8004c88 <UART_SetConfig+0x5c8>
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d20c      	bcs.n	8004c88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e009      	b.n	8004c8e <UART_SetConfig+0x5ce>
 8004c7a:	bf00      	nop
 8004c7c:	40008000 	.word	0x40008000
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	08007510 	.word	0x08007510
      }
      else
      {
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004caa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3730      	adds	r7, #48	; 0x30
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01a      	beq.n	8004dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db6:	d10a      	bne.n	8004dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e0c:	f7fc f9b0 	bl	8001170 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d10e      	bne.n	8004e3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f82f 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e025      	b.n	8004e8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d10e      	bne.n	8004e6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f819 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e00f      	b.n	8004e8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b09c      	sub	sp, #112	; 0x70
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	e0a9      	b.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	f000 80a5 	beq.w	8004ff8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eae:	f7fc f95f 	bl	8001170 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d302      	bcc.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d140      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e069      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d051      	beq.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f62:	d149      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e6      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fc0:	623a      	str	r2, [r7, #32]
 8004fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e010      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	429a      	cmp	r2, r3
 8005014:	f43f af46 	beq.w	8004ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3770      	adds	r7, #112	; 0x70
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005024:	b480      	push	{r7}
 8005026:	b0a3      	sub	sp, #140	; 0x8c
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d10e      	bne.n	8005076 <UART_Start_Receive_IT+0x52>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <UART_Start_Receive_IT+0x48>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800506a:	e02d      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	22ff      	movs	r2, #255	; 0xff
 8005070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005074:	e028      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <UART_Start_Receive_IT+0x76>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <UART_Start_Receive_IT+0x6c>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800508e:	e01b      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	227f      	movs	r2, #127	; 0x7f
 8005094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005098:	e016      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a2:	d10d      	bne.n	80050c0 <UART_Start_Receive_IT+0x9c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <UART_Start_Receive_IT+0x92>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	227f      	movs	r2, #127	; 0x7f
 80050b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050b4:	e008      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	223f      	movs	r2, #63	; 0x3f
 80050ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050be:	e003      	b.n	80050c8 <UART_Start_Receive_IT+0xa4>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2222      	movs	r2, #34	; 0x22
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80050e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80050fc:	673a      	str	r2, [r7, #112]	; 0x70
 80050fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005102:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800510a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e3      	bne.n	80050d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005118:	d153      	bne.n	80051c2 <UART_Start_Receive_IT+0x19e>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	429a      	cmp	r2, r3
 8005124:	d34d      	bcc.n	80051c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d107      	bne.n	8005140 <UART_Start_Receive_IT+0x11c>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a4b      	ldr	r2, [pc, #300]	; (8005268 <UART_Start_Receive_IT+0x244>)
 800513c:	671a      	str	r2, [r3, #112]	; 0x70
 800513e:	e002      	b.n	8005146 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a4a      	ldr	r2, [pc, #296]	; (800526c <UART_Start_Receive_IT+0x248>)
 8005144:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01a      	beq.n	800518c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800517a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800517e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e4      	bne.n	8005156 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_Start_Receive_IT+0x168>
 80051c0:	e04a      	b.n	8005258 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d107      	bne.n	80051dc <UART_Start_Receive_IT+0x1b8>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a26      	ldr	r2, [pc, #152]	; (8005270 <UART_Start_Receive_IT+0x24c>)
 80051d8:	671a      	str	r2, [r3, #112]	; 0x70
 80051da:	e002      	b.n	80051e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a25      	ldr	r2, [pc, #148]	; (8005274 <UART_Start_Receive_IT+0x250>)
 80051e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d019      	beq.n	8005226 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005206:	677b      	str	r3, [r7, #116]	; 0x74
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_Start_Receive_IT+0x1ce>
 8005224:	e018      	b.n	8005258 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	613b      	str	r3, [r7, #16]
   return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f043 0320 	orr.w	r3, r3, #32
 800523a:	67bb      	str	r3, [r7, #120]	; 0x78
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	69f9      	ldr	r1, [r7, #28]
 800524a:	6a3a      	ldr	r2, [r7, #32]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	61bb      	str	r3, [r7, #24]
   return(result);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	378c      	adds	r7, #140	; 0x8c
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	08005981 	.word	0x08005981
 800526c:	08005689 	.word	0x08005689
 8005270:	08005527 	.word	0x08005527
 8005274:	080053c7 	.word	0x080053c7

08005278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b095      	sub	sp, #84	; 0x54
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	643b      	str	r3, [r7, #64]	; 0x40
 80052a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e3      	bne.n	80052b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d118      	bne.n	8005324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6979      	ldr	r1, [r7, #20]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005338:	bf00      	nop
 800533a:	3754      	adds	r7, #84	; 0x54
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff f996 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	60bb      	str	r3, [r7, #8]
   return(result);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6979      	ldr	r1, [r7, #20]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e6      	bne.n	8005378 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff f961 	bl	8004680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053be:	bf00      	nop
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b096      	sub	sp, #88	; 0x58
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80053d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	2b22      	cmp	r3, #34	; 0x22
 80053e0:	f040 8095 	bne.w	800550e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80053f2:	b2d9      	uxtb	r1, r3
 80053f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	400a      	ands	r2, r1
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d178      	bne.n	800551e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
 800544c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e6      	bne.n	800542c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	623b      	str	r3, [r7, #32]
   return(result);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800547e:	633a      	str	r2, [r7, #48]	; 0x30
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d12e      	bne.n	8005506 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	617b      	str	r3, [r7, #20]
   return(result);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d103      	bne.n	80054f6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2210      	movs	r2, #16
 80054f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f8d2 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005504:	e00b      	b.n	800551e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fb fa84 	bl	8000a14 <HAL_UART_RxCpltCallback>
}
 800550c:	e007      	b.n	800551e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	619a      	str	r2, [r3, #24]
}
 800551e:	bf00      	nop
 8005520:	3758      	adds	r7, #88	; 0x58
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b096      	sub	sp, #88	; 0x58
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	2b22      	cmp	r3, #34	; 0x22
 8005540:	f040 8095 	bne.w	800566e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005552:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005554:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005558:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800555c:	4013      	ands	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005562:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	1c9a      	adds	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d178      	bne.n	800567e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40
 80055ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e5      	bne.n	80055be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d12e      	bne.n	8005666 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	60bb      	str	r3, [r7, #8]
   return(result);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0310 	bic.w	r3, r3, #16
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d103      	bne.n	8005656 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2210      	movs	r2, #16
 8005654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff f822 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005664:	e00b      	b.n	800567e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb f9d4 	bl	8000a14 <HAL_UART_RxCpltCallback>
}
 800566c:	e007      	b.n	800567e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0208 	orr.w	r2, r2, #8
 800567c:	619a      	str	r2, [r3, #24]
}
 800567e:	bf00      	nop
 8005680:	3758      	adds	r7, #88	; 0x58
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b0a6      	sub	sp, #152	; 0x98
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005696:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	2b22      	cmp	r3, #34	; 0x22
 80056c0:	f040 814f 	bne.w	8005962 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ce:	e0f6      	b.n	80058be <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80056de:	b2d9      	uxtb	r1, r3
 80056e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	400a      	ands	r2, r1
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	2b00      	cmp	r3, #0
 8005720:	d053      	beq.n	80057ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xca>
 800572e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005748:	f043 0201 	orr.w	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d011      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800575e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2202      	movs	r2, #2
 8005770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005778:	f043 0204 	orr.w	r2, r3, #4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800578e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2204      	movs	r2, #4
 80057a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fe ff69 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d173      	bne.n	80058be <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80057e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80057fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e4      	bne.n	80057d6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3308      	adds	r3, #8
 8005812:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800581c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005830:	657a      	str	r2, [r7, #84]	; 0x54
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800583e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e3      	bne.n	800580c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d12e      	bne.n	80058b8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	f023 0310 	bic.w	r3, r3, #16
 8005874:	67bb      	str	r3, [r7, #120]	; 0x78
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	643b      	str	r3, [r7, #64]	; 0x40
 8005880:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e6      	bne.n	8005860 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d103      	bne.n	80058a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2210      	movs	r2, #16
 80058a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe fef9 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
 80058b6:	e002      	b.n	80058be <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fb f8ab 	bl	8000a14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80058c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f47f aefe 	bne.w	80056d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d045      	beq.n	8005972 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80058ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d23e      	bcs.n	8005972 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	61fb      	str	r3, [r7, #28]
   return(result);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590a:	673b      	str	r3, [r7, #112]	; 0x70
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3308      	adds	r3, #8
 8005912:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a14      	ldr	r2, [pc, #80]	; (800597c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800592c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60bb      	str	r3, [r7, #8]
   return(result);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f043 0320 	orr.w	r3, r3, #32
 8005942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005960:	e007      	b.n	8005972 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	3798      	adds	r7, #152	; 0x98
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	080053c7 	.word	0x080053c7

08005980 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b0a8      	sub	sp, #160	; 0xa0
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800598e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	2b22      	cmp	r3, #34	; 0x22
 80059b8:	f040 8153 	bne.w	8005c62 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059c6:	e0fa      	b.n	8005bbe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80059da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80059de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059e2:	4013      	ands	r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d053      	beq.n	8005ac6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8005a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d011      	beq.n	8005a7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f043 0204 	orr.w	r2, r3, #4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa4:	f043 0202 	orr.w	r2, r3, #2
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fe fdeb 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d175      	bne.n	8005bbe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e4      	bne.n	8005ad2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e1      	bne.n	8005b08 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d12e      	bne.n	8005bb8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	f023 0310 	bic.w	r3, r3, #16
 8005b74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d103      	bne.n	8005ba8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fe fd79 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
 8005bb6:	e002      	b.n	8005bbe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fa ff2b 	bl	8000a14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f47f aefa 	bne.w	80059c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bda:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d045      	beq.n	8005c72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d23e      	bcs.n	8005c72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	623b      	str	r3, [r7, #32]
   return(result);
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	677b      	str	r3, [r7, #116]	; 0x74
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005c14:	633a      	str	r2, [r7, #48]	; 0x30
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005c2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f043 0320 	orr.w	r3, r3, #32
 8005c42:	673b      	str	r3, [r7, #112]	; 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e6      	bne.n	8005c2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c60:	e007      	b.n	8005c72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0208 	orr.w	r2, r2, #8
 8005c70:	619a      	str	r2, [r3, #24]
}
 8005c72:	bf00      	nop
 8005c74:	37a0      	adds	r7, #160	; 0xa0
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08005527 	.word	0x08005527

08005c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e027      	b.n	8005d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2224      	movs	r2, #36	; 0x24
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e02d      	b.n	8005da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2224      	movs	r2, #36	; 0x24
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f850 	bl	8005e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e02d      	b.n	8005e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2224      	movs	r2, #36	; 0x24
 8005dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f812 	bl	8005e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e48:	e031      	b.n	8005eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e4e:	2308      	movs	r3, #8
 8005e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	0e5b      	lsrs	r3, r3, #25
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	0f5b      	lsrs	r3, r3, #29
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	7b3a      	ldrb	r2, [r7, #12]
 8005e76:	4911      	ldr	r1, [pc, #68]	; (8005ebc <UARTEx_SetNbDataToProcess+0x94>)
 8005e78:	5c8a      	ldrb	r2, [r1, r2]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e7e:	7b3a      	ldrb	r2, [r7, #12]
 8005e80:	490f      	ldr	r1, [pc, #60]	; (8005ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8005e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	7b7a      	ldrb	r2, [r7, #13]
 8005e94:	4909      	ldr	r1, [pc, #36]	; (8005ebc <UARTEx_SetNbDataToProcess+0x94>)
 8005e96:	5c8a      	ldrb	r2, [r1, r2]
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e9c:	7b7a      	ldrb	r2, [r7, #13]
 8005e9e:	4908      	ldr	r1, [pc, #32]	; (8005ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	08007528 	.word	0x08007528
 8005ec0:	08007530 	.word	0x08007530

08005ec4 <atoi>:
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f000 b930 	b.w	800612c <strtol>

08005ecc <__errno>:
 8005ecc:	4b01      	ldr	r3, [pc, #4]	; (8005ed4 <__errno+0x8>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	200000a4 	.word	0x200000a4

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4d0d      	ldr	r5, [pc, #52]	; (8005f10 <__libc_init_array+0x38>)
 8005edc:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ede:	1b64      	subs	r4, r4, r5
 8005ee0:	10a4      	asrs	r4, r4, #2
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	4d0b      	ldr	r5, [pc, #44]	; (8005f18 <__libc_init_array+0x40>)
 8005eea:	4c0c      	ldr	r4, [pc, #48]	; (8005f1c <__libc_init_array+0x44>)
 8005eec:	f001 fade 	bl	80074ac <_init>
 8005ef0:	1b64      	subs	r4, r4, r5
 8005ef2:	10a4      	asrs	r4, r4, #2
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	08007788 	.word	0x08007788
 8005f14:	08007788 	.word	0x08007788
 8005f18:	08007788 	.word	0x08007788
 8005f1c:	0800778c 	.word	0x0800778c

08005f20 <memset>:
 8005f20:	4402      	add	r2, r0
 8005f22:	4603      	mov	r3, r0
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d100      	bne.n	8005f2a <memset+0xa>
 8005f28:	4770      	bx	lr
 8005f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2e:	e7f9      	b.n	8005f24 <memset+0x4>

08005f30 <siprintf>:
 8005f30:	b40e      	push	{r1, r2, r3}
 8005f32:	b500      	push	{lr}
 8005f34:	b09c      	sub	sp, #112	; 0x70
 8005f36:	ab1d      	add	r3, sp, #116	; 0x74
 8005f38:	9002      	str	r0, [sp, #8]
 8005f3a:	9006      	str	r0, [sp, #24]
 8005f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f40:	4809      	ldr	r0, [pc, #36]	; (8005f68 <siprintf+0x38>)
 8005f42:	9107      	str	r1, [sp, #28]
 8005f44:	9104      	str	r1, [sp, #16]
 8005f46:	4909      	ldr	r1, [pc, #36]	; (8005f6c <siprintf+0x3c>)
 8005f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4c:	9105      	str	r1, [sp, #20]
 8005f4e:	6800      	ldr	r0, [r0, #0]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	a902      	add	r1, sp, #8
 8005f54:	f000 fa68 	bl	8006428 <_svfiprintf_r>
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	b01c      	add	sp, #112	; 0x70
 8005f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f64:	b003      	add	sp, #12
 8005f66:	4770      	bx	lr
 8005f68:	200000a4 	.word	0x200000a4
 8005f6c:	ffff0208 	.word	0xffff0208

08005f70 <strtok>:
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <strtok+0x5c>)
 8005f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f74:	681e      	ldr	r6, [r3, #0]
 8005f76:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005f78:	4605      	mov	r5, r0
 8005f7a:	b9fc      	cbnz	r4, 8005fbc <strtok+0x4c>
 8005f7c:	2050      	movs	r0, #80	; 0x50
 8005f7e:	9101      	str	r1, [sp, #4]
 8005f80:	f000 f90e 	bl	80061a0 <malloc>
 8005f84:	9901      	ldr	r1, [sp, #4]
 8005f86:	65b0      	str	r0, [r6, #88]	; 0x58
 8005f88:	4602      	mov	r2, r0
 8005f8a:	b920      	cbnz	r0, 8005f96 <strtok+0x26>
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <strtok+0x60>)
 8005f8e:	4811      	ldr	r0, [pc, #68]	; (8005fd4 <strtok+0x64>)
 8005f90:	2157      	movs	r1, #87	; 0x57
 8005f92:	f000 f8d5 	bl	8006140 <__assert_func>
 8005f96:	e9c0 4400 	strd	r4, r4, [r0]
 8005f9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005f9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005fa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005fa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005faa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005fae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005fb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005fb6:	6184      	str	r4, [r0, #24]
 8005fb8:	7704      	strb	r4, [r0, #28]
 8005fba:	6244      	str	r4, [r0, #36]	; 0x24
 8005fbc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	b002      	add	sp, #8
 8005fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fc8:	f000 b806 	b.w	8005fd8 <__strtok_r>
 8005fcc:	200000a4 	.word	0x200000a4
 8005fd0:	0800753c 	.word	0x0800753c
 8005fd4:	08007553 	.word	0x08007553

08005fd8 <__strtok_r>:
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b908      	cbnz	r0, 8005fe0 <__strtok_r+0x8>
 8005fdc:	6810      	ldr	r0, [r2, #0]
 8005fde:	b188      	cbz	r0, 8006004 <__strtok_r+0x2c>
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005fee:	b91e      	cbnz	r6, 8005ff8 <__strtok_r+0x20>
 8005ff0:	b965      	cbnz	r5, 800600c <__strtok_r+0x34>
 8005ff2:	6015      	str	r5, [r2, #0]
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e005      	b.n	8006004 <__strtok_r+0x2c>
 8005ff8:	42b5      	cmp	r5, r6
 8005ffa:	d1f6      	bne.n	8005fea <__strtok_r+0x12>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <__strtok_r+0xa>
 8006000:	6014      	str	r4, [r2, #0]
 8006002:	7003      	strb	r3, [r0, #0]
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	461c      	mov	r4, r3
 8006008:	e00c      	b.n	8006024 <__strtok_r+0x4c>
 800600a:	b915      	cbnz	r5, 8006012 <__strtok_r+0x3a>
 800600c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006010:	460e      	mov	r6, r1
 8006012:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006016:	42ab      	cmp	r3, r5
 8006018:	d1f7      	bne.n	800600a <__strtok_r+0x32>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f3      	beq.n	8006006 <__strtok_r+0x2e>
 800601e:	2300      	movs	r3, #0
 8006020:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006024:	6014      	str	r4, [r2, #0]
 8006026:	e7ed      	b.n	8006004 <__strtok_r+0x2c>

08006028 <_strtol_l.constprop.0>:
 8006028:	2b01      	cmp	r3, #1
 800602a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602e:	d001      	beq.n	8006034 <_strtol_l.constprop.0+0xc>
 8006030:	2b24      	cmp	r3, #36	; 0x24
 8006032:	d906      	bls.n	8006042 <_strtol_l.constprop.0+0x1a>
 8006034:	f7ff ff4a 	bl	8005ecc <__errno>
 8006038:	2316      	movs	r3, #22
 800603a:	6003      	str	r3, [r0, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006128 <_strtol_l.constprop.0+0x100>
 8006046:	460d      	mov	r5, r1
 8006048:	462e      	mov	r6, r5
 800604a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800604e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006052:	f017 0708 	ands.w	r7, r7, #8
 8006056:	d1f7      	bne.n	8006048 <_strtol_l.constprop.0+0x20>
 8006058:	2c2d      	cmp	r4, #45	; 0x2d
 800605a:	d132      	bne.n	80060c2 <_strtol_l.constprop.0+0x9a>
 800605c:	782c      	ldrb	r4, [r5, #0]
 800605e:	2701      	movs	r7, #1
 8006060:	1cb5      	adds	r5, r6, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05b      	beq.n	800611e <_strtol_l.constprop.0+0xf6>
 8006066:	2b10      	cmp	r3, #16
 8006068:	d109      	bne.n	800607e <_strtol_l.constprop.0+0x56>
 800606a:	2c30      	cmp	r4, #48	; 0x30
 800606c:	d107      	bne.n	800607e <_strtol_l.constprop.0+0x56>
 800606e:	782c      	ldrb	r4, [r5, #0]
 8006070:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006074:	2c58      	cmp	r4, #88	; 0x58
 8006076:	d14d      	bne.n	8006114 <_strtol_l.constprop.0+0xec>
 8006078:	786c      	ldrb	r4, [r5, #1]
 800607a:	2310      	movs	r3, #16
 800607c:	3502      	adds	r5, #2
 800607e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006082:	f108 38ff 	add.w	r8, r8, #4294967295
 8006086:	f04f 0c00 	mov.w	ip, #0
 800608a:	fbb8 f9f3 	udiv	r9, r8, r3
 800608e:	4666      	mov	r6, ip
 8006090:	fb03 8a19 	mls	sl, r3, r9, r8
 8006094:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006098:	f1be 0f09 	cmp.w	lr, #9
 800609c:	d816      	bhi.n	80060cc <_strtol_l.constprop.0+0xa4>
 800609e:	4674      	mov	r4, lr
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	dd24      	ble.n	80060ee <_strtol_l.constprop.0+0xc6>
 80060a4:	f1bc 0f00 	cmp.w	ip, #0
 80060a8:	db1e      	blt.n	80060e8 <_strtol_l.constprop.0+0xc0>
 80060aa:	45b1      	cmp	r9, r6
 80060ac:	d31c      	bcc.n	80060e8 <_strtol_l.constprop.0+0xc0>
 80060ae:	d101      	bne.n	80060b4 <_strtol_l.constprop.0+0x8c>
 80060b0:	45a2      	cmp	sl, r4
 80060b2:	db19      	blt.n	80060e8 <_strtol_l.constprop.0+0xc0>
 80060b4:	fb06 4603 	mla	r6, r6, r3, r4
 80060b8:	f04f 0c01 	mov.w	ip, #1
 80060bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060c0:	e7e8      	b.n	8006094 <_strtol_l.constprop.0+0x6c>
 80060c2:	2c2b      	cmp	r4, #43	; 0x2b
 80060c4:	bf04      	itt	eq
 80060c6:	782c      	ldrbeq	r4, [r5, #0]
 80060c8:	1cb5      	addeq	r5, r6, #2
 80060ca:	e7ca      	b.n	8006062 <_strtol_l.constprop.0+0x3a>
 80060cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80060d0:	f1be 0f19 	cmp.w	lr, #25
 80060d4:	d801      	bhi.n	80060da <_strtol_l.constprop.0+0xb2>
 80060d6:	3c37      	subs	r4, #55	; 0x37
 80060d8:	e7e2      	b.n	80060a0 <_strtol_l.constprop.0+0x78>
 80060da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80060de:	f1be 0f19 	cmp.w	lr, #25
 80060e2:	d804      	bhi.n	80060ee <_strtol_l.constprop.0+0xc6>
 80060e4:	3c57      	subs	r4, #87	; 0x57
 80060e6:	e7db      	b.n	80060a0 <_strtol_l.constprop.0+0x78>
 80060e8:	f04f 3cff 	mov.w	ip, #4294967295
 80060ec:	e7e6      	b.n	80060bc <_strtol_l.constprop.0+0x94>
 80060ee:	f1bc 0f00 	cmp.w	ip, #0
 80060f2:	da05      	bge.n	8006100 <_strtol_l.constprop.0+0xd8>
 80060f4:	2322      	movs	r3, #34	; 0x22
 80060f6:	6003      	str	r3, [r0, #0]
 80060f8:	4646      	mov	r6, r8
 80060fa:	b942      	cbnz	r2, 800610e <_strtol_l.constprop.0+0xe6>
 80060fc:	4630      	mov	r0, r6
 80060fe:	e79e      	b.n	800603e <_strtol_l.constprop.0+0x16>
 8006100:	b107      	cbz	r7, 8006104 <_strtol_l.constprop.0+0xdc>
 8006102:	4276      	negs	r6, r6
 8006104:	2a00      	cmp	r2, #0
 8006106:	d0f9      	beq.n	80060fc <_strtol_l.constprop.0+0xd4>
 8006108:	f1bc 0f00 	cmp.w	ip, #0
 800610c:	d000      	beq.n	8006110 <_strtol_l.constprop.0+0xe8>
 800610e:	1e69      	subs	r1, r5, #1
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	e7f3      	b.n	80060fc <_strtol_l.constprop.0+0xd4>
 8006114:	2430      	movs	r4, #48	; 0x30
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1b1      	bne.n	800607e <_strtol_l.constprop.0+0x56>
 800611a:	2308      	movs	r3, #8
 800611c:	e7af      	b.n	800607e <_strtol_l.constprop.0+0x56>
 800611e:	2c30      	cmp	r4, #48	; 0x30
 8006120:	d0a5      	beq.n	800606e <_strtol_l.constprop.0+0x46>
 8006122:	230a      	movs	r3, #10
 8006124:	e7ab      	b.n	800607e <_strtol_l.constprop.0+0x56>
 8006126:	bf00      	nop
 8006128:	080075ed 	.word	0x080075ed

0800612c <strtol>:
 800612c:	4613      	mov	r3, r2
 800612e:	460a      	mov	r2, r1
 8006130:	4601      	mov	r1, r0
 8006132:	4802      	ldr	r0, [pc, #8]	; (800613c <strtol+0x10>)
 8006134:	6800      	ldr	r0, [r0, #0]
 8006136:	f7ff bf77 	b.w	8006028 <_strtol_l.constprop.0>
 800613a:	bf00      	nop
 800613c:	200000a4 	.word	0x200000a4

08006140 <__assert_func>:
 8006140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006142:	4614      	mov	r4, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <__assert_func+0x2c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4605      	mov	r5, r0
 800614c:	68d8      	ldr	r0, [r3, #12]
 800614e:	b14c      	cbz	r4, 8006164 <__assert_func+0x24>
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <__assert_func+0x30>)
 8006152:	9100      	str	r1, [sp, #0]
 8006154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006158:	4906      	ldr	r1, [pc, #24]	; (8006174 <__assert_func+0x34>)
 800615a:	462b      	mov	r3, r5
 800615c:	f000 f80e 	bl	800617c <fiprintf>
 8006160:	f000 fe20 	bl	8006da4 <abort>
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <__assert_func+0x38>)
 8006166:	461c      	mov	r4, r3
 8006168:	e7f3      	b.n	8006152 <__assert_func+0x12>
 800616a:	bf00      	nop
 800616c:	200000a4 	.word	0x200000a4
 8006170:	080075b0 	.word	0x080075b0
 8006174:	080075bd 	.word	0x080075bd
 8006178:	080075eb 	.word	0x080075eb

0800617c <fiprintf>:
 800617c:	b40e      	push	{r1, r2, r3}
 800617e:	b503      	push	{r0, r1, lr}
 8006180:	4601      	mov	r1, r0
 8006182:	ab03      	add	r3, sp, #12
 8006184:	4805      	ldr	r0, [pc, #20]	; (800619c <fiprintf+0x20>)
 8006186:	f853 2b04 	ldr.w	r2, [r3], #4
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	f000 fa75 	bl	800667c <_vfiprintf_r>
 8006192:	b002      	add	sp, #8
 8006194:	f85d eb04 	ldr.w	lr, [sp], #4
 8006198:	b003      	add	sp, #12
 800619a:	4770      	bx	lr
 800619c:	200000a4 	.word	0x200000a4

080061a0 <malloc>:
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <malloc+0xc>)
 80061a2:	4601      	mov	r1, r0
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f000 b86f 	b.w	8006288 <_malloc_r>
 80061aa:	bf00      	nop
 80061ac:	200000a4 	.word	0x200000a4

080061b0 <_free_r>:
 80061b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061b2:	2900      	cmp	r1, #0
 80061b4:	d044      	beq.n	8006240 <_free_r+0x90>
 80061b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ba:	9001      	str	r0, [sp, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f1a1 0404 	sub.w	r4, r1, #4
 80061c2:	bfb8      	it	lt
 80061c4:	18e4      	addlt	r4, r4, r3
 80061c6:	f001 f83d 	bl	8007244 <__malloc_lock>
 80061ca:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <_free_r+0x94>)
 80061cc:	9801      	ldr	r0, [sp, #4]
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	b933      	cbnz	r3, 80061e0 <_free_r+0x30>
 80061d2:	6063      	str	r3, [r4, #4]
 80061d4:	6014      	str	r4, [r2, #0]
 80061d6:	b003      	add	sp, #12
 80061d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061dc:	f001 b838 	b.w	8007250 <__malloc_unlock>
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d908      	bls.n	80061f6 <_free_r+0x46>
 80061e4:	6825      	ldr	r5, [r4, #0]
 80061e6:	1961      	adds	r1, r4, r5
 80061e8:	428b      	cmp	r3, r1
 80061ea:	bf01      	itttt	eq
 80061ec:	6819      	ldreq	r1, [r3, #0]
 80061ee:	685b      	ldreq	r3, [r3, #4]
 80061f0:	1949      	addeq	r1, r1, r5
 80061f2:	6021      	streq	r1, [r4, #0]
 80061f4:	e7ed      	b.n	80061d2 <_free_r+0x22>
 80061f6:	461a      	mov	r2, r3
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	b10b      	cbz	r3, 8006200 <_free_r+0x50>
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d9fa      	bls.n	80061f6 <_free_r+0x46>
 8006200:	6811      	ldr	r1, [r2, #0]
 8006202:	1855      	adds	r5, r2, r1
 8006204:	42a5      	cmp	r5, r4
 8006206:	d10b      	bne.n	8006220 <_free_r+0x70>
 8006208:	6824      	ldr	r4, [r4, #0]
 800620a:	4421      	add	r1, r4
 800620c:	1854      	adds	r4, r2, r1
 800620e:	42a3      	cmp	r3, r4
 8006210:	6011      	str	r1, [r2, #0]
 8006212:	d1e0      	bne.n	80061d6 <_free_r+0x26>
 8006214:	681c      	ldr	r4, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	6053      	str	r3, [r2, #4]
 800621a:	4421      	add	r1, r4
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	e7da      	b.n	80061d6 <_free_r+0x26>
 8006220:	d902      	bls.n	8006228 <_free_r+0x78>
 8006222:	230c      	movs	r3, #12
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	e7d6      	b.n	80061d6 <_free_r+0x26>
 8006228:	6825      	ldr	r5, [r4, #0]
 800622a:	1961      	adds	r1, r4, r5
 800622c:	428b      	cmp	r3, r1
 800622e:	bf04      	itt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	bf04      	itt	eq
 8006238:	1949      	addeq	r1, r1, r5
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	6054      	str	r4, [r2, #4]
 800623e:	e7ca      	b.n	80061d6 <_free_r+0x26>
 8006240:	b003      	add	sp, #12
 8006242:	bd30      	pop	{r4, r5, pc}
 8006244:	20000250 	.word	0x20000250

08006248 <sbrk_aligned>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4e0e      	ldr	r6, [pc, #56]	; (8006284 <sbrk_aligned+0x3c>)
 800624c:	460c      	mov	r4, r1
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	4605      	mov	r5, r0
 8006252:	b911      	cbnz	r1, 800625a <sbrk_aligned+0x12>
 8006254:	f000 fcd6 	bl	8006c04 <_sbrk_r>
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fcd1 	bl	8006c04 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d00a      	beq.n	800627c <sbrk_aligned+0x34>
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d007      	beq.n	8006280 <sbrk_aligned+0x38>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fcc6 	bl	8006c04 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d101      	bne.n	8006280 <sbrk_aligned+0x38>
 800627c:	f04f 34ff 	mov.w	r4, #4294967295
 8006280:	4620      	mov	r0, r4
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	20000254 	.word	0x20000254

08006288 <_malloc_r>:
 8006288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	1ccd      	adds	r5, r1, #3
 800628e:	f025 0503 	bic.w	r5, r5, #3
 8006292:	3508      	adds	r5, #8
 8006294:	2d0c      	cmp	r5, #12
 8006296:	bf38      	it	cc
 8006298:	250c      	movcc	r5, #12
 800629a:	2d00      	cmp	r5, #0
 800629c:	4607      	mov	r7, r0
 800629e:	db01      	blt.n	80062a4 <_malloc_r+0x1c>
 80062a0:	42a9      	cmp	r1, r5
 80062a2:	d905      	bls.n	80062b0 <_malloc_r+0x28>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	2600      	movs	r6, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	4e2e      	ldr	r6, [pc, #184]	; (800636c <_malloc_r+0xe4>)
 80062b2:	f000 ffc7 	bl	8007244 <__malloc_lock>
 80062b6:	6833      	ldr	r3, [r6, #0]
 80062b8:	461c      	mov	r4, r3
 80062ba:	bb34      	cbnz	r4, 800630a <_malloc_r+0x82>
 80062bc:	4629      	mov	r1, r5
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff ffc2 	bl	8006248 <sbrk_aligned>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	4604      	mov	r4, r0
 80062c8:	d14d      	bne.n	8006366 <_malloc_r+0xde>
 80062ca:	6834      	ldr	r4, [r6, #0]
 80062cc:	4626      	mov	r6, r4
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d140      	bne.n	8006354 <_malloc_r+0xcc>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	4631      	mov	r1, r6
 80062d6:	4638      	mov	r0, r7
 80062d8:	eb04 0803 	add.w	r8, r4, r3
 80062dc:	f000 fc92 	bl	8006c04 <_sbrk_r>
 80062e0:	4580      	cmp	r8, r0
 80062e2:	d13a      	bne.n	800635a <_malloc_r+0xd2>
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	3503      	adds	r5, #3
 80062e8:	1a6d      	subs	r5, r5, r1
 80062ea:	f025 0503 	bic.w	r5, r5, #3
 80062ee:	3508      	adds	r5, #8
 80062f0:	2d0c      	cmp	r5, #12
 80062f2:	bf38      	it	cc
 80062f4:	250c      	movcc	r5, #12
 80062f6:	4629      	mov	r1, r5
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7ff ffa5 	bl	8006248 <sbrk_aligned>
 80062fe:	3001      	adds	r0, #1
 8006300:	d02b      	beq.n	800635a <_malloc_r+0xd2>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	442b      	add	r3, r5
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	e00e      	b.n	8006328 <_malloc_r+0xa0>
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	1b52      	subs	r2, r2, r5
 800630e:	d41e      	bmi.n	800634e <_malloc_r+0xc6>
 8006310:	2a0b      	cmp	r2, #11
 8006312:	d916      	bls.n	8006342 <_malloc_r+0xba>
 8006314:	1961      	adds	r1, r4, r5
 8006316:	42a3      	cmp	r3, r4
 8006318:	6025      	str	r5, [r4, #0]
 800631a:	bf18      	it	ne
 800631c:	6059      	strne	r1, [r3, #4]
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	bf08      	it	eq
 8006322:	6031      	streq	r1, [r6, #0]
 8006324:	5162      	str	r2, [r4, r5]
 8006326:	604b      	str	r3, [r1, #4]
 8006328:	4638      	mov	r0, r7
 800632a:	f104 060b 	add.w	r6, r4, #11
 800632e:	f000 ff8f 	bl	8007250 <__malloc_unlock>
 8006332:	f026 0607 	bic.w	r6, r6, #7
 8006336:	1d23      	adds	r3, r4, #4
 8006338:	1af2      	subs	r2, r6, r3
 800633a:	d0b6      	beq.n	80062aa <_malloc_r+0x22>
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	50a3      	str	r3, [r4, r2]
 8006340:	e7b3      	b.n	80062aa <_malloc_r+0x22>
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	42a3      	cmp	r3, r4
 8006346:	bf0c      	ite	eq
 8006348:	6032      	streq	r2, [r6, #0]
 800634a:	605a      	strne	r2, [r3, #4]
 800634c:	e7ec      	b.n	8006328 <_malloc_r+0xa0>
 800634e:	4623      	mov	r3, r4
 8006350:	6864      	ldr	r4, [r4, #4]
 8006352:	e7b2      	b.n	80062ba <_malloc_r+0x32>
 8006354:	4634      	mov	r4, r6
 8006356:	6876      	ldr	r6, [r6, #4]
 8006358:	e7b9      	b.n	80062ce <_malloc_r+0x46>
 800635a:	230c      	movs	r3, #12
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	4638      	mov	r0, r7
 8006360:	f000 ff76 	bl	8007250 <__malloc_unlock>
 8006364:	e7a1      	b.n	80062aa <_malloc_r+0x22>
 8006366:	6025      	str	r5, [r4, #0]
 8006368:	e7de      	b.n	8006328 <_malloc_r+0xa0>
 800636a:	bf00      	nop
 800636c:	20000250 	.word	0x20000250

08006370 <__ssputs_r>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	688e      	ldr	r6, [r1, #8]
 8006376:	429e      	cmp	r6, r3
 8006378:	4682      	mov	sl, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4690      	mov	r8, r2
 800637e:	461f      	mov	r7, r3
 8006380:	d838      	bhi.n	80063f4 <__ssputs_r+0x84>
 8006382:	898a      	ldrh	r2, [r1, #12]
 8006384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006388:	d032      	beq.n	80063f0 <__ssputs_r+0x80>
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	6909      	ldr	r1, [r1, #16]
 800638e:	eba5 0901 	sub.w	r9, r5, r1
 8006392:	6965      	ldr	r5, [r4, #20]
 8006394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800639c:	3301      	adds	r3, #1
 800639e:	444b      	add	r3, r9
 80063a0:	106d      	asrs	r5, r5, #1
 80063a2:	429d      	cmp	r5, r3
 80063a4:	bf38      	it	cc
 80063a6:	461d      	movcc	r5, r3
 80063a8:	0553      	lsls	r3, r2, #21
 80063aa:	d531      	bpl.n	8006410 <__ssputs_r+0xa0>
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7ff ff6b 	bl	8006288 <_malloc_r>
 80063b2:	4606      	mov	r6, r0
 80063b4:	b950      	cbnz	r0, 80063cc <__ssputs_r+0x5c>
 80063b6:	230c      	movs	r3, #12
 80063b8:	f8ca 3000 	str.w	r3, [sl]
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	464a      	mov	r2, r9
 80063d0:	f000 ff10 	bl	80071f4 <memcpy>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	6126      	str	r6, [r4, #16]
 80063e2:	6165      	str	r5, [r4, #20]
 80063e4:	444e      	add	r6, r9
 80063e6:	eba5 0509 	sub.w	r5, r5, r9
 80063ea:	6026      	str	r6, [r4, #0]
 80063ec:	60a5      	str	r5, [r4, #8]
 80063ee:	463e      	mov	r6, r7
 80063f0:	42be      	cmp	r6, r7
 80063f2:	d900      	bls.n	80063f6 <__ssputs_r+0x86>
 80063f4:	463e      	mov	r6, r7
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	4632      	mov	r2, r6
 80063fa:	4641      	mov	r1, r8
 80063fc:	f000 ff08 	bl	8007210 <memmove>
 8006400:	68a3      	ldr	r3, [r4, #8]
 8006402:	1b9b      	subs	r3, r3, r6
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	4433      	add	r3, r6
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e7db      	b.n	80063c8 <__ssputs_r+0x58>
 8006410:	462a      	mov	r2, r5
 8006412:	f000 ff23 	bl	800725c <_realloc_r>
 8006416:	4606      	mov	r6, r0
 8006418:	2800      	cmp	r0, #0
 800641a:	d1e1      	bne.n	80063e0 <__ssputs_r+0x70>
 800641c:	6921      	ldr	r1, [r4, #16]
 800641e:	4650      	mov	r0, sl
 8006420:	f7ff fec6 	bl	80061b0 <_free_r>
 8006424:	e7c7      	b.n	80063b6 <__ssputs_r+0x46>
	...

08006428 <_svfiprintf_r>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4698      	mov	r8, r3
 800642e:	898b      	ldrh	r3, [r1, #12]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	b09d      	sub	sp, #116	; 0x74
 8006434:	4607      	mov	r7, r0
 8006436:	460d      	mov	r5, r1
 8006438:	4614      	mov	r4, r2
 800643a:	d50e      	bpl.n	800645a <_svfiprintf_r+0x32>
 800643c:	690b      	ldr	r3, [r1, #16]
 800643e:	b963      	cbnz	r3, 800645a <_svfiprintf_r+0x32>
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	f7ff ff21 	bl	8006288 <_malloc_r>
 8006446:	6028      	str	r0, [r5, #0]
 8006448:	6128      	str	r0, [r5, #16]
 800644a:	b920      	cbnz	r0, 8006456 <_svfiprintf_r+0x2e>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e0d1      	b.n	80065fa <_svfiprintf_r+0x1d2>
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	616b      	str	r3, [r5, #20]
 800645a:	2300      	movs	r3, #0
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	2320      	movs	r3, #32
 8006460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006464:	f8cd 800c 	str.w	r8, [sp, #12]
 8006468:	2330      	movs	r3, #48	; 0x30
 800646a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006614 <_svfiprintf_r+0x1ec>
 800646e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006472:	f04f 0901 	mov.w	r9, #1
 8006476:	4623      	mov	r3, r4
 8006478:	469a      	mov	sl, r3
 800647a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647e:	b10a      	cbz	r2, 8006484 <_svfiprintf_r+0x5c>
 8006480:	2a25      	cmp	r2, #37	; 0x25
 8006482:	d1f9      	bne.n	8006478 <_svfiprintf_r+0x50>
 8006484:	ebba 0b04 	subs.w	fp, sl, r4
 8006488:	d00b      	beq.n	80064a2 <_svfiprintf_r+0x7a>
 800648a:	465b      	mov	r3, fp
 800648c:	4622      	mov	r2, r4
 800648e:	4629      	mov	r1, r5
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ff6d 	bl	8006370 <__ssputs_r>
 8006496:	3001      	adds	r0, #1
 8006498:	f000 80aa 	beq.w	80065f0 <_svfiprintf_r+0x1c8>
 800649c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649e:	445a      	add	r2, fp
 80064a0:	9209      	str	r2, [sp, #36]	; 0x24
 80064a2:	f89a 3000 	ldrb.w	r3, [sl]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80a2 	beq.w	80065f0 <_svfiprintf_r+0x1c8>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b6:	f10a 0a01 	add.w	sl, sl, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	9307      	str	r3, [sp, #28]
 80064be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c2:	931a      	str	r3, [sp, #104]	; 0x68
 80064c4:	4654      	mov	r4, sl
 80064c6:	2205      	movs	r2, #5
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	4851      	ldr	r0, [pc, #324]	; (8006614 <_svfiprintf_r+0x1ec>)
 80064ce:	f7f9 feb7 	bl	8000240 <memchr>
 80064d2:	9a04      	ldr	r2, [sp, #16]
 80064d4:	b9d8      	cbnz	r0, 800650e <_svfiprintf_r+0xe6>
 80064d6:	06d0      	lsls	r0, r2, #27
 80064d8:	bf44      	itt	mi
 80064da:	2320      	movmi	r3, #32
 80064dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e0:	0711      	lsls	r1, r2, #28
 80064e2:	bf44      	itt	mi
 80064e4:	232b      	movmi	r3, #43	; 0x2b
 80064e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ea:	f89a 3000 	ldrb.w	r3, [sl]
 80064ee:	2b2a      	cmp	r3, #42	; 0x2a
 80064f0:	d015      	beq.n	800651e <_svfiprintf_r+0xf6>
 80064f2:	9a07      	ldr	r2, [sp, #28]
 80064f4:	4654      	mov	r4, sl
 80064f6:	2000      	movs	r0, #0
 80064f8:	f04f 0c0a 	mov.w	ip, #10
 80064fc:	4621      	mov	r1, r4
 80064fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006502:	3b30      	subs	r3, #48	; 0x30
 8006504:	2b09      	cmp	r3, #9
 8006506:	d94e      	bls.n	80065a6 <_svfiprintf_r+0x17e>
 8006508:	b1b0      	cbz	r0, 8006538 <_svfiprintf_r+0x110>
 800650a:	9207      	str	r2, [sp, #28]
 800650c:	e014      	b.n	8006538 <_svfiprintf_r+0x110>
 800650e:	eba0 0308 	sub.w	r3, r0, r8
 8006512:	fa09 f303 	lsl.w	r3, r9, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	46a2      	mov	sl, r4
 800651c:	e7d2      	b.n	80064c4 <_svfiprintf_r+0x9c>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	9103      	str	r1, [sp, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfbb      	ittet	lt
 800652a:	425b      	neglt	r3, r3
 800652c:	f042 0202 	orrlt.w	r2, r2, #2
 8006530:	9307      	strge	r3, [sp, #28]
 8006532:	9307      	strlt	r3, [sp, #28]
 8006534:	bfb8      	it	lt
 8006536:	9204      	strlt	r2, [sp, #16]
 8006538:	7823      	ldrb	r3, [r4, #0]
 800653a:	2b2e      	cmp	r3, #46	; 0x2e
 800653c:	d10c      	bne.n	8006558 <_svfiprintf_r+0x130>
 800653e:	7863      	ldrb	r3, [r4, #1]
 8006540:	2b2a      	cmp	r3, #42	; 0x2a
 8006542:	d135      	bne.n	80065b0 <_svfiprintf_r+0x188>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb8      	it	lt
 8006550:	f04f 33ff 	movlt.w	r3, #4294967295
 8006554:	3402      	adds	r4, #2
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006624 <_svfiprintf_r+0x1fc>
 800655c:	7821      	ldrb	r1, [r4, #0]
 800655e:	2203      	movs	r2, #3
 8006560:	4650      	mov	r0, sl
 8006562:	f7f9 fe6d 	bl	8000240 <memchr>
 8006566:	b140      	cbz	r0, 800657a <_svfiprintf_r+0x152>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	eba0 000a 	sub.w	r0, r0, sl
 800656e:	fa03 f000 	lsl.w	r0, r3, r0
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	4303      	orrs	r3, r0
 8006576:	3401      	adds	r4, #1
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4826      	ldr	r0, [pc, #152]	; (8006618 <_svfiprintf_r+0x1f0>)
 8006580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006584:	2206      	movs	r2, #6
 8006586:	f7f9 fe5b 	bl	8000240 <memchr>
 800658a:	2800      	cmp	r0, #0
 800658c:	d038      	beq.n	8006600 <_svfiprintf_r+0x1d8>
 800658e:	4b23      	ldr	r3, [pc, #140]	; (800661c <_svfiprintf_r+0x1f4>)
 8006590:	bb1b      	cbnz	r3, 80065da <_svfiprintf_r+0x1b2>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	3307      	adds	r3, #7
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	3308      	adds	r3, #8
 800659c:	9303      	str	r3, [sp, #12]
 800659e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a0:	4433      	add	r3, r6
 80065a2:	9309      	str	r3, [sp, #36]	; 0x24
 80065a4:	e767      	b.n	8006476 <_svfiprintf_r+0x4e>
 80065a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065aa:	460c      	mov	r4, r1
 80065ac:	2001      	movs	r0, #1
 80065ae:	e7a5      	b.n	80064fc <_svfiprintf_r+0xd4>
 80065b0:	2300      	movs	r3, #0
 80065b2:	3401      	adds	r4, #1
 80065b4:	9305      	str	r3, [sp, #20]
 80065b6:	4619      	mov	r1, r3
 80065b8:	f04f 0c0a 	mov.w	ip, #10
 80065bc:	4620      	mov	r0, r4
 80065be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c2:	3a30      	subs	r2, #48	; 0x30
 80065c4:	2a09      	cmp	r2, #9
 80065c6:	d903      	bls.n	80065d0 <_svfiprintf_r+0x1a8>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0c5      	beq.n	8006558 <_svfiprintf_r+0x130>
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	e7c3      	b.n	8006558 <_svfiprintf_r+0x130>
 80065d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d4:	4604      	mov	r4, r0
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7f0      	b.n	80065bc <_svfiprintf_r+0x194>
 80065da:	ab03      	add	r3, sp, #12
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	462a      	mov	r2, r5
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <_svfiprintf_r+0x1f8>)
 80065e2:	a904      	add	r1, sp, #16
 80065e4:	4638      	mov	r0, r7
 80065e6:	f3af 8000 	nop.w
 80065ea:	1c42      	adds	r2, r0, #1
 80065ec:	4606      	mov	r6, r0
 80065ee:	d1d6      	bne.n	800659e <_svfiprintf_r+0x176>
 80065f0:	89ab      	ldrh	r3, [r5, #12]
 80065f2:	065b      	lsls	r3, r3, #25
 80065f4:	f53f af2c 	bmi.w	8006450 <_svfiprintf_r+0x28>
 80065f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065fa:	b01d      	add	sp, #116	; 0x74
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	ab03      	add	r3, sp, #12
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	462a      	mov	r2, r5
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <_svfiprintf_r+0x1f8>)
 8006608:	a904      	add	r1, sp, #16
 800660a:	4638      	mov	r0, r7
 800660c:	f000 f9d4 	bl	80069b8 <_printf_i>
 8006610:	e7eb      	b.n	80065ea <_svfiprintf_r+0x1c2>
 8006612:	bf00      	nop
 8006614:	080076ed 	.word	0x080076ed
 8006618:	080076f7 	.word	0x080076f7
 800661c:	00000000 	.word	0x00000000
 8006620:	08006371 	.word	0x08006371
 8006624:	080076f3 	.word	0x080076f3

08006628 <__sfputc_r>:
 8006628:	6893      	ldr	r3, [r2, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	b410      	push	{r4}
 8006630:	6093      	str	r3, [r2, #8]
 8006632:	da08      	bge.n	8006646 <__sfputc_r+0x1e>
 8006634:	6994      	ldr	r4, [r2, #24]
 8006636:	42a3      	cmp	r3, r4
 8006638:	db01      	blt.n	800663e <__sfputc_r+0x16>
 800663a:	290a      	cmp	r1, #10
 800663c:	d103      	bne.n	8006646 <__sfputc_r+0x1e>
 800663e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006642:	f000 baef 	b.w	8006c24 <__swbuf_r>
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	1c58      	adds	r0, r3, #1
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	7019      	strb	r1, [r3, #0]
 800664e:	4608      	mov	r0, r1
 8006650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006654:	4770      	bx	lr

08006656 <__sfputs_r>:
 8006656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	4614      	mov	r4, r2
 800665e:	18d5      	adds	r5, r2, r3
 8006660:	42ac      	cmp	r4, r5
 8006662:	d101      	bne.n	8006668 <__sfputs_r+0x12>
 8006664:	2000      	movs	r0, #0
 8006666:	e007      	b.n	8006678 <__sfputs_r+0x22>
 8006668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666c:	463a      	mov	r2, r7
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ffda 	bl	8006628 <__sfputc_r>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d1f3      	bne.n	8006660 <__sfputs_r+0xa>
 8006678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800667c <_vfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	460d      	mov	r5, r1
 8006682:	b09d      	sub	sp, #116	; 0x74
 8006684:	4614      	mov	r4, r2
 8006686:	4698      	mov	r8, r3
 8006688:	4606      	mov	r6, r0
 800668a:	b118      	cbz	r0, 8006694 <_vfiprintf_r+0x18>
 800668c:	6983      	ldr	r3, [r0, #24]
 800668e:	b90b      	cbnz	r3, 8006694 <_vfiprintf_r+0x18>
 8006690:	f000 fcaa 	bl	8006fe8 <__sinit>
 8006694:	4b89      	ldr	r3, [pc, #548]	; (80068bc <_vfiprintf_r+0x240>)
 8006696:	429d      	cmp	r5, r3
 8006698:	d11b      	bne.n	80066d2 <_vfiprintf_r+0x56>
 800669a:	6875      	ldr	r5, [r6, #4]
 800669c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	059a      	lsls	r2, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066aa:	f000 fd3b 	bl	8007124 <__retarget_lock_acquire_recursive>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	071b      	lsls	r3, r3, #28
 80066b2:	d501      	bpl.n	80066b8 <_vfiprintf_r+0x3c>
 80066b4:	692b      	ldr	r3, [r5, #16]
 80066b6:	b9eb      	cbnz	r3, 80066f4 <_vfiprintf_r+0x78>
 80066b8:	4629      	mov	r1, r5
 80066ba:	4630      	mov	r0, r6
 80066bc:	f000 fb04 	bl	8006cc8 <__swsetup_r>
 80066c0:	b1c0      	cbz	r0, 80066f4 <_vfiprintf_r+0x78>
 80066c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c4:	07dc      	lsls	r4, r3, #31
 80066c6:	d50e      	bpl.n	80066e6 <_vfiprintf_r+0x6a>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	b01d      	add	sp, #116	; 0x74
 80066ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d2:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <_vfiprintf_r+0x244>)
 80066d4:	429d      	cmp	r5, r3
 80066d6:	d101      	bne.n	80066dc <_vfiprintf_r+0x60>
 80066d8:	68b5      	ldr	r5, [r6, #8]
 80066da:	e7df      	b.n	800669c <_vfiprintf_r+0x20>
 80066dc:	4b79      	ldr	r3, [pc, #484]	; (80068c4 <_vfiprintf_r+0x248>)
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf08      	it	eq
 80066e2:	68f5      	ldreq	r5, [r6, #12]
 80066e4:	e7da      	b.n	800669c <_vfiprintf_r+0x20>
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	0598      	lsls	r0, r3, #22
 80066ea:	d4ed      	bmi.n	80066c8 <_vfiprintf_r+0x4c>
 80066ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ee:	f000 fd1a 	bl	8007126 <__retarget_lock_release_recursive>
 80066f2:	e7e9      	b.n	80066c8 <_vfiprintf_r+0x4c>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	; 0x24
 80066f8:	2320      	movs	r3, #32
 80066fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006702:	2330      	movs	r3, #48	; 0x30
 8006704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80068c8 <_vfiprintf_r+0x24c>
 8006708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800670c:	f04f 0901 	mov.w	r9, #1
 8006710:	4623      	mov	r3, r4
 8006712:	469a      	mov	sl, r3
 8006714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006718:	b10a      	cbz	r2, 800671e <_vfiprintf_r+0xa2>
 800671a:	2a25      	cmp	r2, #37	; 0x25
 800671c:	d1f9      	bne.n	8006712 <_vfiprintf_r+0x96>
 800671e:	ebba 0b04 	subs.w	fp, sl, r4
 8006722:	d00b      	beq.n	800673c <_vfiprintf_r+0xc0>
 8006724:	465b      	mov	r3, fp
 8006726:	4622      	mov	r2, r4
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ff93 	bl	8006656 <__sfputs_r>
 8006730:	3001      	adds	r0, #1
 8006732:	f000 80aa 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006738:	445a      	add	r2, fp
 800673a:	9209      	str	r2, [sp, #36]	; 0x24
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80a2 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006746:	2300      	movs	r3, #0
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006750:	f10a 0a01 	add.w	sl, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675c:	931a      	str	r3, [sp, #104]	; 0x68
 800675e:	4654      	mov	r4, sl
 8006760:	2205      	movs	r2, #5
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	4858      	ldr	r0, [pc, #352]	; (80068c8 <_vfiprintf_r+0x24c>)
 8006768:	f7f9 fd6a 	bl	8000240 <memchr>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	b9d8      	cbnz	r0, 80067a8 <_vfiprintf_r+0x12c>
 8006770:	06d1      	lsls	r1, r2, #27
 8006772:	bf44      	itt	mi
 8006774:	2320      	movmi	r3, #32
 8006776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677a:	0713      	lsls	r3, r2, #28
 800677c:	bf44      	itt	mi
 800677e:	232b      	movmi	r3, #43	; 0x2b
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b2a      	cmp	r3, #42	; 0x2a
 800678a:	d015      	beq.n	80067b8 <_vfiprintf_r+0x13c>
 800678c:	9a07      	ldr	r2, [sp, #28]
 800678e:	4654      	mov	r4, sl
 8006790:	2000      	movs	r0, #0
 8006792:	f04f 0c0a 	mov.w	ip, #10
 8006796:	4621      	mov	r1, r4
 8006798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679c:	3b30      	subs	r3, #48	; 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d94e      	bls.n	8006840 <_vfiprintf_r+0x1c4>
 80067a2:	b1b0      	cbz	r0, 80067d2 <_vfiprintf_r+0x156>
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	e014      	b.n	80067d2 <_vfiprintf_r+0x156>
 80067a8:	eba0 0308 	sub.w	r3, r0, r8
 80067ac:	fa09 f303 	lsl.w	r3, r9, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	46a2      	mov	sl, r4
 80067b6:	e7d2      	b.n	800675e <_vfiprintf_r+0xe2>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	1d19      	adds	r1, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	9103      	str	r1, [sp, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbb      	ittet	lt
 80067c4:	425b      	neglt	r3, r3
 80067c6:	f042 0202 	orrlt.w	r2, r2, #2
 80067ca:	9307      	strge	r3, [sp, #28]
 80067cc:	9307      	strlt	r3, [sp, #28]
 80067ce:	bfb8      	it	lt
 80067d0:	9204      	strlt	r2, [sp, #16]
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b2e      	cmp	r3, #46	; 0x2e
 80067d6:	d10c      	bne.n	80067f2 <_vfiprintf_r+0x176>
 80067d8:	7863      	ldrb	r3, [r4, #1]
 80067da:	2b2a      	cmp	r3, #42	; 0x2a
 80067dc:	d135      	bne.n	800684a <_vfiprintf_r+0x1ce>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9203      	str	r2, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ee:	3402      	adds	r4, #2
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068d8 <_vfiprintf_r+0x25c>
 80067f6:	7821      	ldrb	r1, [r4, #0]
 80067f8:	2203      	movs	r2, #3
 80067fa:	4650      	mov	r0, sl
 80067fc:	f7f9 fd20 	bl	8000240 <memchr>
 8006800:	b140      	cbz	r0, 8006814 <_vfiprintf_r+0x198>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	eba0 000a 	sub.w	r0, r0, sl
 8006808:	fa03 f000 	lsl.w	r0, r3, r0
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	4303      	orrs	r3, r0
 8006810:	3401      	adds	r4, #1
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006818:	482c      	ldr	r0, [pc, #176]	; (80068cc <_vfiprintf_r+0x250>)
 800681a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800681e:	2206      	movs	r2, #6
 8006820:	f7f9 fd0e 	bl	8000240 <memchr>
 8006824:	2800      	cmp	r0, #0
 8006826:	d03f      	beq.n	80068a8 <_vfiprintf_r+0x22c>
 8006828:	4b29      	ldr	r3, [pc, #164]	; (80068d0 <_vfiprintf_r+0x254>)
 800682a:	bb1b      	cbnz	r3, 8006874 <_vfiprintf_r+0x1f8>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	3307      	adds	r3, #7
 8006830:	f023 0307 	bic.w	r3, r3, #7
 8006834:	3308      	adds	r3, #8
 8006836:	9303      	str	r3, [sp, #12]
 8006838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683a:	443b      	add	r3, r7
 800683c:	9309      	str	r3, [sp, #36]	; 0x24
 800683e:	e767      	b.n	8006710 <_vfiprintf_r+0x94>
 8006840:	fb0c 3202 	mla	r2, ip, r2, r3
 8006844:	460c      	mov	r4, r1
 8006846:	2001      	movs	r0, #1
 8006848:	e7a5      	b.n	8006796 <_vfiprintf_r+0x11a>
 800684a:	2300      	movs	r3, #0
 800684c:	3401      	adds	r4, #1
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	4619      	mov	r1, r3
 8006852:	f04f 0c0a 	mov.w	ip, #10
 8006856:	4620      	mov	r0, r4
 8006858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685c:	3a30      	subs	r2, #48	; 0x30
 800685e:	2a09      	cmp	r2, #9
 8006860:	d903      	bls.n	800686a <_vfiprintf_r+0x1ee>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0c5      	beq.n	80067f2 <_vfiprintf_r+0x176>
 8006866:	9105      	str	r1, [sp, #20]
 8006868:	e7c3      	b.n	80067f2 <_vfiprintf_r+0x176>
 800686a:	fb0c 2101 	mla	r1, ip, r1, r2
 800686e:	4604      	mov	r4, r0
 8006870:	2301      	movs	r3, #1
 8006872:	e7f0      	b.n	8006856 <_vfiprintf_r+0x1da>
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	462a      	mov	r2, r5
 800687a:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <_vfiprintf_r+0x258>)
 800687c:	a904      	add	r1, sp, #16
 800687e:	4630      	mov	r0, r6
 8006880:	f3af 8000 	nop.w
 8006884:	4607      	mov	r7, r0
 8006886:	1c78      	adds	r0, r7, #1
 8006888:	d1d6      	bne.n	8006838 <_vfiprintf_r+0x1bc>
 800688a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800688c:	07d9      	lsls	r1, r3, #31
 800688e:	d405      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006890:	89ab      	ldrh	r3, [r5, #12]
 8006892:	059a      	lsls	r2, r3, #22
 8006894:	d402      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006898:	f000 fc45 	bl	8007126 <__retarget_lock_release_recursive>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af12 	bmi.w	80066c8 <_vfiprintf_r+0x4c>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	e711      	b.n	80066cc <_vfiprintf_r+0x50>
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <_vfiprintf_r+0x258>)
 80068b0:	a904      	add	r1, sp, #16
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 f880 	bl	80069b8 <_printf_i>
 80068b8:	e7e4      	b.n	8006884 <_vfiprintf_r+0x208>
 80068ba:	bf00      	nop
 80068bc:	08007740 	.word	0x08007740
 80068c0:	08007760 	.word	0x08007760
 80068c4:	08007720 	.word	0x08007720
 80068c8:	080076ed 	.word	0x080076ed
 80068cc:	080076f7 	.word	0x080076f7
 80068d0:	00000000 	.word	0x00000000
 80068d4:	08006657 	.word	0x08006657
 80068d8:	080076f3 	.word	0x080076f3

080068dc <_printf_common>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	4616      	mov	r6, r2
 80068e2:	4699      	mov	r9, r3
 80068e4:	688a      	ldr	r2, [r1, #8]
 80068e6:	690b      	ldr	r3, [r1, #16]
 80068e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	bfb8      	it	lt
 80068f0:	4613      	movlt	r3, r2
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068f8:	4607      	mov	r7, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b10a      	cbz	r2, 8006902 <_printf_common+0x26>
 80068fe:	3301      	adds	r3, #1
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	0699      	lsls	r1, r3, #26
 8006906:	bf42      	ittt	mi
 8006908:	6833      	ldrmi	r3, [r6, #0]
 800690a:	3302      	addmi	r3, #2
 800690c:	6033      	strmi	r3, [r6, #0]
 800690e:	6825      	ldr	r5, [r4, #0]
 8006910:	f015 0506 	ands.w	r5, r5, #6
 8006914:	d106      	bne.n	8006924 <_printf_common+0x48>
 8006916:	f104 0a19 	add.w	sl, r4, #25
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	6832      	ldr	r2, [r6, #0]
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	42ab      	cmp	r3, r5
 8006922:	dc26      	bgt.n	8006972 <_printf_common+0x96>
 8006924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006928:	1e13      	subs	r3, r2, #0
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	bf18      	it	ne
 800692e:	2301      	movne	r3, #1
 8006930:	0692      	lsls	r2, r2, #26
 8006932:	d42b      	bmi.n	800698c <_printf_common+0xb0>
 8006934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006938:	4649      	mov	r1, r9
 800693a:	4638      	mov	r0, r7
 800693c:	47c0      	blx	r8
 800693e:	3001      	adds	r0, #1
 8006940:	d01e      	beq.n	8006980 <_printf_common+0xa4>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	68e5      	ldr	r5, [r4, #12]
 8006946:	6832      	ldr	r2, [r6, #0]
 8006948:	f003 0306 	and.w	r3, r3, #6
 800694c:	2b04      	cmp	r3, #4
 800694e:	bf08      	it	eq
 8006950:	1aad      	subeq	r5, r5, r2
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	bf0c      	ite	eq
 8006958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800695c:	2500      	movne	r5, #0
 800695e:	4293      	cmp	r3, r2
 8006960:	bfc4      	itt	gt
 8006962:	1a9b      	subgt	r3, r3, r2
 8006964:	18ed      	addgt	r5, r5, r3
 8006966:	2600      	movs	r6, #0
 8006968:	341a      	adds	r4, #26
 800696a:	42b5      	cmp	r5, r6
 800696c:	d11a      	bne.n	80069a4 <_printf_common+0xc8>
 800696e:	2000      	movs	r0, #0
 8006970:	e008      	b.n	8006984 <_printf_common+0xa8>
 8006972:	2301      	movs	r3, #1
 8006974:	4652      	mov	r2, sl
 8006976:	4649      	mov	r1, r9
 8006978:	4638      	mov	r0, r7
 800697a:	47c0      	blx	r8
 800697c:	3001      	adds	r0, #1
 800697e:	d103      	bne.n	8006988 <_printf_common+0xac>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006988:	3501      	adds	r5, #1
 800698a:	e7c6      	b.n	800691a <_printf_common+0x3e>
 800698c:	18e1      	adds	r1, r4, r3
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	2030      	movs	r0, #48	; 0x30
 8006992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006996:	4422      	add	r2, r4
 8006998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800699c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069a0:	3302      	adds	r3, #2
 80069a2:	e7c7      	b.n	8006934 <_printf_common+0x58>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4622      	mov	r2, r4
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d0e6      	beq.n	8006980 <_printf_common+0xa4>
 80069b2:	3601      	adds	r6, #1
 80069b4:	e7d9      	b.n	800696a <_printf_common+0x8e>
	...

080069b8 <_printf_i>:
 80069b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	7e0f      	ldrb	r7, [r1, #24]
 80069be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069c0:	2f78      	cmp	r7, #120	; 0x78
 80069c2:	4691      	mov	r9, r2
 80069c4:	4680      	mov	r8, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	469a      	mov	sl, r3
 80069ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ce:	d807      	bhi.n	80069e0 <_printf_i+0x28>
 80069d0:	2f62      	cmp	r7, #98	; 0x62
 80069d2:	d80a      	bhi.n	80069ea <_printf_i+0x32>
 80069d4:	2f00      	cmp	r7, #0
 80069d6:	f000 80d8 	beq.w	8006b8a <_printf_i+0x1d2>
 80069da:	2f58      	cmp	r7, #88	; 0x58
 80069dc:	f000 80a3 	beq.w	8006b26 <_printf_i+0x16e>
 80069e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e8:	e03a      	b.n	8006a60 <_printf_i+0xa8>
 80069ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ee:	2b15      	cmp	r3, #21
 80069f0:	d8f6      	bhi.n	80069e0 <_printf_i+0x28>
 80069f2:	a101      	add	r1, pc, #4	; (adr r1, 80069f8 <_printf_i+0x40>)
 80069f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069f8:	08006a51 	.word	0x08006a51
 80069fc:	08006a65 	.word	0x08006a65
 8006a00:	080069e1 	.word	0x080069e1
 8006a04:	080069e1 	.word	0x080069e1
 8006a08:	080069e1 	.word	0x080069e1
 8006a0c:	080069e1 	.word	0x080069e1
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	080069e1 	.word	0x080069e1
 8006a18:	080069e1 	.word	0x080069e1
 8006a1c:	080069e1 	.word	0x080069e1
 8006a20:	080069e1 	.word	0x080069e1
 8006a24:	08006b71 	.word	0x08006b71
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006b53 	.word	0x08006b53
 8006a30:	080069e1 	.word	0x080069e1
 8006a34:	080069e1 	.word	0x080069e1
 8006a38:	08006b93 	.word	0x08006b93
 8006a3c:	080069e1 	.word	0x080069e1
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	080069e1 	.word	0x080069e1
 8006a48:	080069e1 	.word	0x080069e1
 8006a4c:	08006b5b 	.word	0x08006b5b
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	602a      	str	r2, [r5, #0]
 8006a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0a3      	b.n	8006bac <_printf_i+0x1f4>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	6829      	ldr	r1, [r5, #0]
 8006a68:	0606      	lsls	r6, r0, #24
 8006a6a:	f101 0304 	add.w	r3, r1, #4
 8006a6e:	d50a      	bpl.n	8006a86 <_printf_i+0xce>
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	2e00      	cmp	r6, #0
 8006a76:	da03      	bge.n	8006a80 <_printf_i+0xc8>
 8006a78:	232d      	movs	r3, #45	; 0x2d
 8006a7a:	4276      	negs	r6, r6
 8006a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a80:	485e      	ldr	r0, [pc, #376]	; (8006bfc <_printf_i+0x244>)
 8006a82:	230a      	movs	r3, #10
 8006a84:	e019      	b.n	8006aba <_printf_i+0x102>
 8006a86:	680e      	ldr	r6, [r1, #0]
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a8e:	bf18      	it	ne
 8006a90:	b236      	sxthne	r6, r6
 8006a92:	e7ef      	b.n	8006a74 <_printf_i+0xbc>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	6820      	ldr	r0, [r4, #0]
 8006a98:	1d19      	adds	r1, r3, #4
 8006a9a:	6029      	str	r1, [r5, #0]
 8006a9c:	0601      	lsls	r1, r0, #24
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_i+0xec>
 8006aa0:	681e      	ldr	r6, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <_printf_i+0xf2>
 8006aa4:	0646      	lsls	r6, r0, #25
 8006aa6:	d5fb      	bpl.n	8006aa0 <_printf_i+0xe8>
 8006aa8:	881e      	ldrh	r6, [r3, #0]
 8006aaa:	4854      	ldr	r0, [pc, #336]	; (8006bfc <_printf_i+0x244>)
 8006aac:	2f6f      	cmp	r7, #111	; 0x6f
 8006aae:	bf0c      	ite	eq
 8006ab0:	2308      	moveq	r3, #8
 8006ab2:	230a      	movne	r3, #10
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aba:	6865      	ldr	r5, [r4, #4]
 8006abc:	60a5      	str	r5, [r4, #8]
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	bfa2      	ittt	ge
 8006ac2:	6821      	ldrge	r1, [r4, #0]
 8006ac4:	f021 0104 	bicge.w	r1, r1, #4
 8006ac8:	6021      	strge	r1, [r4, #0]
 8006aca:	b90e      	cbnz	r6, 8006ad0 <_printf_i+0x118>
 8006acc:	2d00      	cmp	r5, #0
 8006ace:	d04d      	beq.n	8006b6c <_printf_i+0x1b4>
 8006ad0:	4615      	mov	r5, r2
 8006ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8006ada:	5dc7      	ldrb	r7, [r0, r7]
 8006adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ae0:	4637      	mov	r7, r6
 8006ae2:	42bb      	cmp	r3, r7
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	d9f4      	bls.n	8006ad2 <_printf_i+0x11a>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d10b      	bne.n	8006b04 <_printf_i+0x14c>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07de      	lsls	r6, r3, #31
 8006af0:	d508      	bpl.n	8006b04 <_printf_i+0x14c>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6861      	ldr	r1, [r4, #4]
 8006af6:	4299      	cmp	r1, r3
 8006af8:	bfde      	ittt	le
 8006afa:	2330      	movle	r3, #48	; 0x30
 8006afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b04:	1b52      	subs	r2, r2, r5
 8006b06:	6122      	str	r2, [r4, #16]
 8006b08:	f8cd a000 	str.w	sl, [sp]
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	aa03      	add	r2, sp, #12
 8006b10:	4621      	mov	r1, r4
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7ff fee2 	bl	80068dc <_printf_common>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d14c      	bne.n	8006bb6 <_printf_i+0x1fe>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	b004      	add	sp, #16
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	4835      	ldr	r0, [pc, #212]	; (8006bfc <_printf_i+0x244>)
 8006b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b2c:	6829      	ldr	r1, [r5, #0]
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b34:	6029      	str	r1, [r5, #0]
 8006b36:	061d      	lsls	r5, r3, #24
 8006b38:	d514      	bpl.n	8006b64 <_printf_i+0x1ac>
 8006b3a:	07df      	lsls	r7, r3, #31
 8006b3c:	bf44      	itt	mi
 8006b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b42:	6023      	strmi	r3, [r4, #0]
 8006b44:	b91e      	cbnz	r6, 8006b4e <_printf_i+0x196>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	f023 0320 	bic.w	r3, r3, #32
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	2310      	movs	r3, #16
 8006b50:	e7b0      	b.n	8006ab4 <_printf_i+0xfc>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	f043 0320 	orr.w	r3, r3, #32
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	2378      	movs	r3, #120	; 0x78
 8006b5c:	4828      	ldr	r0, [pc, #160]	; (8006c00 <_printf_i+0x248>)
 8006b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b62:	e7e3      	b.n	8006b2c <_printf_i+0x174>
 8006b64:	0659      	lsls	r1, r3, #25
 8006b66:	bf48      	it	mi
 8006b68:	b2b6      	uxthmi	r6, r6
 8006b6a:	e7e6      	b.n	8006b3a <_printf_i+0x182>
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	e7bb      	b.n	8006ae8 <_printf_i+0x130>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	6826      	ldr	r6, [r4, #0]
 8006b74:	6961      	ldr	r1, [r4, #20]
 8006b76:	1d18      	adds	r0, r3, #4
 8006b78:	6028      	str	r0, [r5, #0]
 8006b7a:	0635      	lsls	r5, r6, #24
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	d501      	bpl.n	8006b84 <_printf_i+0x1cc>
 8006b80:	6019      	str	r1, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <_printf_i+0x1d2>
 8006b84:	0670      	lsls	r0, r6, #25
 8006b86:	d5fb      	bpl.n	8006b80 <_printf_i+0x1c8>
 8006b88:	8019      	strh	r1, [r3, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	4615      	mov	r5, r2
 8006b90:	e7ba      	b.n	8006b08 <_printf_i+0x150>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	1d1a      	adds	r2, r3, #4
 8006b96:	602a      	str	r2, [r5, #0]
 8006b98:	681d      	ldr	r5, [r3, #0]
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f7f9 fb4e 	bl	8000240 <memchr>
 8006ba4:	b108      	cbz	r0, 8006baa <_printf_i+0x1f2>
 8006ba6:	1b40      	subs	r0, r0, r5
 8006ba8:	6060      	str	r0, [r4, #4]
 8006baa:	6863      	ldr	r3, [r4, #4]
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb4:	e7a8      	b.n	8006b08 <_printf_i+0x150>
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	47d0      	blx	sl
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d0ab      	beq.n	8006b1c <_printf_i+0x164>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	079b      	lsls	r3, r3, #30
 8006bc8:	d413      	bmi.n	8006bf2 <_printf_i+0x23a>
 8006bca:	68e0      	ldr	r0, [r4, #12]
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	4298      	cmp	r0, r3
 8006bd0:	bfb8      	it	lt
 8006bd2:	4618      	movlt	r0, r3
 8006bd4:	e7a4      	b.n	8006b20 <_printf_i+0x168>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4632      	mov	r2, r6
 8006bda:	4649      	mov	r1, r9
 8006bdc:	4640      	mov	r0, r8
 8006bde:	47d0      	blx	sl
 8006be0:	3001      	adds	r0, #1
 8006be2:	d09b      	beq.n	8006b1c <_printf_i+0x164>
 8006be4:	3501      	adds	r5, #1
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	9903      	ldr	r1, [sp, #12]
 8006bea:	1a5b      	subs	r3, r3, r1
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	dcf2      	bgt.n	8006bd6 <_printf_i+0x21e>
 8006bf0:	e7eb      	b.n	8006bca <_printf_i+0x212>
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	f104 0619 	add.w	r6, r4, #25
 8006bf8:	e7f5      	b.n	8006be6 <_printf_i+0x22e>
 8006bfa:	bf00      	nop
 8006bfc:	080076fe 	.word	0x080076fe
 8006c00:	0800770f 	.word	0x0800770f

08006c04 <_sbrk_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d06      	ldr	r5, [pc, #24]	; (8006c20 <_sbrk_r+0x1c>)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	f7fa f814 	bl	8000c3c <_sbrk>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_sbrk_r+0x1a>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_sbrk_r+0x1a>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	2000025c 	.word	0x2000025c

08006c24 <__swbuf_r>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	460e      	mov	r6, r1
 8006c28:	4614      	mov	r4, r2
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	b118      	cbz	r0, 8006c36 <__swbuf_r+0x12>
 8006c2e:	6983      	ldr	r3, [r0, #24]
 8006c30:	b90b      	cbnz	r3, 8006c36 <__swbuf_r+0x12>
 8006c32:	f000 f9d9 	bl	8006fe8 <__sinit>
 8006c36:	4b21      	ldr	r3, [pc, #132]	; (8006cbc <__swbuf_r+0x98>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d12b      	bne.n	8006c94 <__swbuf_r+0x70>
 8006c3c:	686c      	ldr	r4, [r5, #4]
 8006c3e:	69a3      	ldr	r3, [r4, #24]
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	071a      	lsls	r2, r3, #28
 8006c46:	d52f      	bpl.n	8006ca8 <__swbuf_r+0x84>
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	b36b      	cbz	r3, 8006ca8 <__swbuf_r+0x84>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1ac0      	subs	r0, r0, r3
 8006c52:	6963      	ldr	r3, [r4, #20]
 8006c54:	b2f6      	uxtb	r6, r6
 8006c56:	4283      	cmp	r3, r0
 8006c58:	4637      	mov	r7, r6
 8006c5a:	dc04      	bgt.n	8006c66 <__swbuf_r+0x42>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f92e 	bl	8006ec0 <_fflush_r>
 8006c64:	bb30      	cbnz	r0, 8006cb4 <__swbuf_r+0x90>
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	60a3      	str	r3, [r4, #8]
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	701e      	strb	r6, [r3, #0]
 8006c74:	6963      	ldr	r3, [r4, #20]
 8006c76:	3001      	adds	r0, #1
 8006c78:	4283      	cmp	r3, r0
 8006c7a:	d004      	beq.n	8006c86 <__swbuf_r+0x62>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	07db      	lsls	r3, r3, #31
 8006c80:	d506      	bpl.n	8006c90 <__swbuf_r+0x6c>
 8006c82:	2e0a      	cmp	r6, #10
 8006c84:	d104      	bne.n	8006c90 <__swbuf_r+0x6c>
 8006c86:	4621      	mov	r1, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 f919 	bl	8006ec0 <_fflush_r>
 8006c8e:	b988      	cbnz	r0, 8006cb4 <__swbuf_r+0x90>
 8006c90:	4638      	mov	r0, r7
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <__swbuf_r+0x9c>)
 8006c96:	429c      	cmp	r4, r3
 8006c98:	d101      	bne.n	8006c9e <__swbuf_r+0x7a>
 8006c9a:	68ac      	ldr	r4, [r5, #8]
 8006c9c:	e7cf      	b.n	8006c3e <__swbuf_r+0x1a>
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <__swbuf_r+0xa0>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	bf08      	it	eq
 8006ca4:	68ec      	ldreq	r4, [r5, #12]
 8006ca6:	e7ca      	b.n	8006c3e <__swbuf_r+0x1a>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f80c 	bl	8006cc8 <__swsetup_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0cb      	beq.n	8006c4c <__swbuf_r+0x28>
 8006cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006cb8:	e7ea      	b.n	8006c90 <__swbuf_r+0x6c>
 8006cba:	bf00      	nop
 8006cbc:	08007740 	.word	0x08007740
 8006cc0:	08007760 	.word	0x08007760
 8006cc4:	08007720 	.word	0x08007720

08006cc8 <__swsetup_r>:
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <__swsetup_r+0xcc>)
 8006cca:	b570      	push	{r4, r5, r6, lr}
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	b125      	cbz	r5, 8006cde <__swsetup_r+0x16>
 8006cd4:	69ab      	ldr	r3, [r5, #24]
 8006cd6:	b913      	cbnz	r3, 8006cde <__swsetup_r+0x16>
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 f985 	bl	8006fe8 <__sinit>
 8006cde:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <__swsetup_r+0xd0>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	d10f      	bne.n	8006d04 <__swsetup_r+0x3c>
 8006ce4:	686c      	ldr	r4, [r5, #4]
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cec:	0719      	lsls	r1, r3, #28
 8006cee:	d42c      	bmi.n	8006d4a <__swsetup_r+0x82>
 8006cf0:	06dd      	lsls	r5, r3, #27
 8006cf2:	d411      	bmi.n	8006d18 <__swsetup_r+0x50>
 8006cf4:	2309      	movs	r3, #9
 8006cf6:	6033      	str	r3, [r6, #0]
 8006cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	e03e      	b.n	8006d82 <__swsetup_r+0xba>
 8006d04:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <__swsetup_r+0xd4>)
 8006d06:	429c      	cmp	r4, r3
 8006d08:	d101      	bne.n	8006d0e <__swsetup_r+0x46>
 8006d0a:	68ac      	ldr	r4, [r5, #8]
 8006d0c:	e7eb      	b.n	8006ce6 <__swsetup_r+0x1e>
 8006d0e:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <__swsetup_r+0xd8>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	bf08      	it	eq
 8006d14:	68ec      	ldreq	r4, [r5, #12]
 8006d16:	e7e6      	b.n	8006ce6 <__swsetup_r+0x1e>
 8006d18:	0758      	lsls	r0, r3, #29
 8006d1a:	d512      	bpl.n	8006d42 <__swsetup_r+0x7a>
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	b141      	cbz	r1, 8006d32 <__swsetup_r+0x6a>
 8006d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d24:	4299      	cmp	r1, r3
 8006d26:	d002      	beq.n	8006d2e <__swsetup_r+0x66>
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff fa41 	bl	80061b0 <_free_r>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6363      	str	r3, [r4, #52]	; 0x34
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f043 0308 	orr.w	r3, r3, #8
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	b94b      	cbnz	r3, 8006d62 <__swsetup_r+0x9a>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d58:	d003      	beq.n	8006d62 <__swsetup_r+0x9a>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f000 fa09 	bl	8007174 <__smakebuf_r>
 8006d62:	89a0      	ldrh	r0, [r4, #12]
 8006d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d68:	f010 0301 	ands.w	r3, r0, #1
 8006d6c:	d00a      	beq.n	8006d84 <__swsetup_r+0xbc>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60a3      	str	r3, [r4, #8]
 8006d72:	6963      	ldr	r3, [r4, #20]
 8006d74:	425b      	negs	r3, r3
 8006d76:	61a3      	str	r3, [r4, #24]
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	b943      	cbnz	r3, 8006d8e <__swsetup_r+0xc6>
 8006d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d80:	d1ba      	bne.n	8006cf8 <__swsetup_r+0x30>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	0781      	lsls	r1, r0, #30
 8006d86:	bf58      	it	pl
 8006d88:	6963      	ldrpl	r3, [r4, #20]
 8006d8a:	60a3      	str	r3, [r4, #8]
 8006d8c:	e7f4      	b.n	8006d78 <__swsetup_r+0xb0>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e7f7      	b.n	8006d82 <__swsetup_r+0xba>
 8006d92:	bf00      	nop
 8006d94:	200000a4 	.word	0x200000a4
 8006d98:	08007740 	.word	0x08007740
 8006d9c:	08007760 	.word	0x08007760
 8006da0:	08007720 	.word	0x08007720

08006da4 <abort>:
 8006da4:	b508      	push	{r3, lr}
 8006da6:	2006      	movs	r0, #6
 8006da8:	f000 fab0 	bl	800730c <raise>
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7f9 fecd 	bl	8000b4c <_exit>
	...

08006db4 <__sflush_r>:
 8006db4:	898a      	ldrh	r2, [r1, #12]
 8006db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dba:	4605      	mov	r5, r0
 8006dbc:	0710      	lsls	r0, r2, #28
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	d458      	bmi.n	8006e74 <__sflush_r+0xc0>
 8006dc2:	684b      	ldr	r3, [r1, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc05      	bgt.n	8006dd4 <__sflush_r+0x20>
 8006dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc02      	bgt.n	8006dd4 <__sflush_r+0x20>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d0f9      	beq.n	8006dce <__sflush_r+0x1a>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de0:	682f      	ldr	r7, [r5, #0]
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	d032      	beq.n	8006e4c <__sflush_r+0x98>
 8006de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	075a      	lsls	r2, r3, #29
 8006dec:	d505      	bpl.n	8006dfa <__sflush_r+0x46>
 8006dee:	6863      	ldr	r3, [r4, #4]
 8006df0:	1ac0      	subs	r0, r0, r3
 8006df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006df4:	b10b      	cbz	r3, 8006dfa <__sflush_r+0x46>
 8006df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006df8:	1ac0      	subs	r0, r0, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e00:	6a21      	ldr	r1, [r4, #32]
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b0      	blx	r6
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	d106      	bne.n	8006e1a <__sflush_r+0x66>
 8006e0c:	6829      	ldr	r1, [r5, #0]
 8006e0e:	291d      	cmp	r1, #29
 8006e10:	d82c      	bhi.n	8006e6c <__sflush_r+0xb8>
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <__sflush_r+0x108>)
 8006e14:	40ca      	lsrs	r2, r1
 8006e16:	07d6      	lsls	r6, r2, #31
 8006e18:	d528      	bpl.n	8006e6c <__sflush_r+0xb8>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	6062      	str	r2, [r4, #4]
 8006e1e:	04d9      	lsls	r1, r3, #19
 8006e20:	6922      	ldr	r2, [r4, #16]
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	d504      	bpl.n	8006e30 <__sflush_r+0x7c>
 8006e26:	1c42      	adds	r2, r0, #1
 8006e28:	d101      	bne.n	8006e2e <__sflush_r+0x7a>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	b903      	cbnz	r3, 8006e30 <__sflush_r+0x7c>
 8006e2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e32:	602f      	str	r7, [r5, #0]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d0ca      	beq.n	8006dce <__sflush_r+0x1a>
 8006e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	d002      	beq.n	8006e46 <__sflush_r+0x92>
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff f9b5 	bl	80061b0 <_free_r>
 8006e46:	2000      	movs	r0, #0
 8006e48:	6360      	str	r0, [r4, #52]	; 0x34
 8006e4a:	e7c1      	b.n	8006dd0 <__sflush_r+0x1c>
 8006e4c:	6a21      	ldr	r1, [r4, #32]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	1c41      	adds	r1, r0, #1
 8006e56:	d1c7      	bne.n	8006de8 <__sflush_r+0x34>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0c4      	beq.n	8006de8 <__sflush_r+0x34>
 8006e5e:	2b1d      	cmp	r3, #29
 8006e60:	d001      	beq.n	8006e66 <__sflush_r+0xb2>
 8006e62:	2b16      	cmp	r3, #22
 8006e64:	d101      	bne.n	8006e6a <__sflush_r+0xb6>
 8006e66:	602f      	str	r7, [r5, #0]
 8006e68:	e7b1      	b.n	8006dce <__sflush_r+0x1a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e7ad      	b.n	8006dd0 <__sflush_r+0x1c>
 8006e74:	690f      	ldr	r7, [r1, #16]
 8006e76:	2f00      	cmp	r7, #0
 8006e78:	d0a9      	beq.n	8006dce <__sflush_r+0x1a>
 8006e7a:	0793      	lsls	r3, r2, #30
 8006e7c:	680e      	ldr	r6, [r1, #0]
 8006e7e:	bf08      	it	eq
 8006e80:	694b      	ldreq	r3, [r1, #20]
 8006e82:	600f      	str	r7, [r1, #0]
 8006e84:	bf18      	it	ne
 8006e86:	2300      	movne	r3, #0
 8006e88:	eba6 0807 	sub.w	r8, r6, r7
 8006e8c:	608b      	str	r3, [r1, #8]
 8006e8e:	f1b8 0f00 	cmp.w	r8, #0
 8006e92:	dd9c      	ble.n	8006dce <__sflush_r+0x1a>
 8006e94:	6a21      	ldr	r1, [r4, #32]
 8006e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e98:	4643      	mov	r3, r8
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b0      	blx	r6
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	dc06      	bgt.n	8006eb2 <__sflush_r+0xfe>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb0:	e78e      	b.n	8006dd0 <__sflush_r+0x1c>
 8006eb2:	4407      	add	r7, r0
 8006eb4:	eba8 0800 	sub.w	r8, r8, r0
 8006eb8:	e7e9      	b.n	8006e8e <__sflush_r+0xda>
 8006eba:	bf00      	nop
 8006ebc:	20400001 	.word	0x20400001

08006ec0 <_fflush_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	b913      	cbnz	r3, 8006ed0 <_fflush_r+0x10>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	4628      	mov	r0, r5
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	b118      	cbz	r0, 8006eda <_fflush_r+0x1a>
 8006ed2:	6983      	ldr	r3, [r0, #24]
 8006ed4:	b90b      	cbnz	r3, 8006eda <_fflush_r+0x1a>
 8006ed6:	f000 f887 	bl	8006fe8 <__sinit>
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <_fflush_r+0x6c>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d11b      	bne.n	8006f18 <_fflush_r+0x58>
 8006ee0:	686c      	ldr	r4, [r5, #4]
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ef      	beq.n	8006eca <_fflush_r+0xa>
 8006eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eec:	07d0      	lsls	r0, r2, #31
 8006eee:	d404      	bmi.n	8006efa <_fflush_r+0x3a>
 8006ef0:	0599      	lsls	r1, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_fflush_r+0x3a>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef6:	f000 f915 	bl	8007124 <__retarget_lock_acquire_recursive>
 8006efa:	4628      	mov	r0, r5
 8006efc:	4621      	mov	r1, r4
 8006efe:	f7ff ff59 	bl	8006db4 <__sflush_r>
 8006f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f04:	07da      	lsls	r2, r3, #31
 8006f06:	4605      	mov	r5, r0
 8006f08:	d4e0      	bmi.n	8006ecc <_fflush_r+0xc>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	059b      	lsls	r3, r3, #22
 8006f0e:	d4dd      	bmi.n	8006ecc <_fflush_r+0xc>
 8006f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f12:	f000 f908 	bl	8007126 <__retarget_lock_release_recursive>
 8006f16:	e7d9      	b.n	8006ecc <_fflush_r+0xc>
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <_fflush_r+0x70>)
 8006f1a:	429c      	cmp	r4, r3
 8006f1c:	d101      	bne.n	8006f22 <_fflush_r+0x62>
 8006f1e:	68ac      	ldr	r4, [r5, #8]
 8006f20:	e7df      	b.n	8006ee2 <_fflush_r+0x22>
 8006f22:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <_fflush_r+0x74>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	bf08      	it	eq
 8006f28:	68ec      	ldreq	r4, [r5, #12]
 8006f2a:	e7da      	b.n	8006ee2 <_fflush_r+0x22>
 8006f2c:	08007740 	.word	0x08007740
 8006f30:	08007760 	.word	0x08007760
 8006f34:	08007720 	.word	0x08007720

08006f38 <std>:
 8006f38:	2300      	movs	r3, #0
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f46:	6083      	str	r3, [r0, #8]
 8006f48:	8181      	strh	r1, [r0, #12]
 8006f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f4c:	81c2      	strh	r2, [r0, #14]
 8006f4e:	6183      	str	r3, [r0, #24]
 8006f50:	4619      	mov	r1, r3
 8006f52:	2208      	movs	r2, #8
 8006f54:	305c      	adds	r0, #92	; 0x5c
 8006f56:	f7fe ffe3 	bl	8005f20 <memset>
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <std+0x38>)
 8006f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x3c>)
 8006f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std+0x40>)
 8006f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x44>)
 8006f68:	6224      	str	r4, [r4, #32]
 8006f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	bf00      	nop
 8006f70:	08007345 	.word	0x08007345
 8006f74:	08007367 	.word	0x08007367
 8006f78:	0800739f 	.word	0x0800739f
 8006f7c:	080073c3 	.word	0x080073c3

08006f80 <_cleanup_r>:
 8006f80:	4901      	ldr	r1, [pc, #4]	; (8006f88 <_cleanup_r+0x8>)
 8006f82:	f000 b8af 	b.w	80070e4 <_fwalk_reent>
 8006f86:	bf00      	nop
 8006f88:	08006ec1 	.word	0x08006ec1

08006f8c <__sfmoreglue>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	2268      	movs	r2, #104	; 0x68
 8006f90:	1e4d      	subs	r5, r1, #1
 8006f92:	4355      	muls	r5, r2
 8006f94:	460e      	mov	r6, r1
 8006f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f9a:	f7ff f975 	bl	8006288 <_malloc_r>
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	b140      	cbz	r0, 8006fb4 <__sfmoreglue+0x28>
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8006fa8:	300c      	adds	r0, #12
 8006faa:	60a0      	str	r0, [r4, #8]
 8006fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb0:	f7fe ffb6 	bl	8005f20 <memset>
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}

08006fb8 <__sfp_lock_acquire>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__sfp_lock_acquire+0x8>)
 8006fba:	f000 b8b3 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20000259 	.word	0x20000259

08006fc4 <__sfp_lock_release>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__sfp_lock_release+0x8>)
 8006fc6:	f000 b8ae 	b.w	8007126 <__retarget_lock_release_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20000259 	.word	0x20000259

08006fd0 <__sinit_lock_acquire>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sinit_lock_acquire+0x8>)
 8006fd2:	f000 b8a7 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	2000025a 	.word	0x2000025a

08006fdc <__sinit_lock_release>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sinit_lock_release+0x8>)
 8006fde:	f000 b8a2 	b.w	8007126 <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	2000025a 	.word	0x2000025a

08006fe8 <__sinit>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	f7ff fff0 	bl	8006fd0 <__sinit_lock_acquire>
 8006ff0:	69a3      	ldr	r3, [r4, #24]
 8006ff2:	b11b      	cbz	r3, 8006ffc <__sinit+0x14>
 8006ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff8:	f7ff bff0 	b.w	8006fdc <__sinit_lock_release>
 8006ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007000:	6523      	str	r3, [r4, #80]	; 0x50
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <__sinit+0x68>)
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <__sinit+0x6c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	62a2      	str	r2, [r4, #40]	; 0x28
 800700a:	42a3      	cmp	r3, r4
 800700c:	bf04      	itt	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	61a3      	streq	r3, [r4, #24]
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f820 	bl	8007058 <__sfp>
 8007018:	6060      	str	r0, [r4, #4]
 800701a:	4620      	mov	r0, r4
 800701c:	f000 f81c 	bl	8007058 <__sfp>
 8007020:	60a0      	str	r0, [r4, #8]
 8007022:	4620      	mov	r0, r4
 8007024:	f000 f818 	bl	8007058 <__sfp>
 8007028:	2200      	movs	r2, #0
 800702a:	60e0      	str	r0, [r4, #12]
 800702c:	2104      	movs	r1, #4
 800702e:	6860      	ldr	r0, [r4, #4]
 8007030:	f7ff ff82 	bl	8006f38 <std>
 8007034:	68a0      	ldr	r0, [r4, #8]
 8007036:	2201      	movs	r2, #1
 8007038:	2109      	movs	r1, #9
 800703a:	f7ff ff7d 	bl	8006f38 <std>
 800703e:	68e0      	ldr	r0, [r4, #12]
 8007040:	2202      	movs	r2, #2
 8007042:	2112      	movs	r1, #18
 8007044:	f7ff ff78 	bl	8006f38 <std>
 8007048:	2301      	movs	r3, #1
 800704a:	61a3      	str	r3, [r4, #24]
 800704c:	e7d2      	b.n	8006ff4 <__sinit+0xc>
 800704e:	bf00      	nop
 8007050:	08007538 	.word	0x08007538
 8007054:	08006f81 	.word	0x08006f81

08007058 <__sfp>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	4607      	mov	r7, r0
 800705c:	f7ff ffac 	bl	8006fb8 <__sfp_lock_acquire>
 8007060:	4b1e      	ldr	r3, [pc, #120]	; (80070dc <__sfp+0x84>)
 8007062:	681e      	ldr	r6, [r3, #0]
 8007064:	69b3      	ldr	r3, [r6, #24]
 8007066:	b913      	cbnz	r3, 800706e <__sfp+0x16>
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff ffbd 	bl	8006fe8 <__sinit>
 800706e:	3648      	adds	r6, #72	; 0x48
 8007070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007074:	3b01      	subs	r3, #1
 8007076:	d503      	bpl.n	8007080 <__sfp+0x28>
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	b30b      	cbz	r3, 80070c0 <__sfp+0x68>
 800707c:	6836      	ldr	r6, [r6, #0]
 800707e:	e7f7      	b.n	8007070 <__sfp+0x18>
 8007080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007084:	b9d5      	cbnz	r5, 80070bc <__sfp+0x64>
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <__sfp+0x88>)
 8007088:	60e3      	str	r3, [r4, #12]
 800708a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800708e:	6665      	str	r5, [r4, #100]	; 0x64
 8007090:	f000 f847 	bl	8007122 <__retarget_lock_init_recursive>
 8007094:	f7ff ff96 	bl	8006fc4 <__sfp_lock_release>
 8007098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800709c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070a0:	6025      	str	r5, [r4, #0]
 80070a2:	61a5      	str	r5, [r4, #24]
 80070a4:	2208      	movs	r2, #8
 80070a6:	4629      	mov	r1, r5
 80070a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070ac:	f7fe ff38 	bl	8005f20 <memset>
 80070b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070b8:	4620      	mov	r0, r4
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070bc:	3468      	adds	r4, #104	; 0x68
 80070be:	e7d9      	b.n	8007074 <__sfp+0x1c>
 80070c0:	2104      	movs	r1, #4
 80070c2:	4638      	mov	r0, r7
 80070c4:	f7ff ff62 	bl	8006f8c <__sfmoreglue>
 80070c8:	4604      	mov	r4, r0
 80070ca:	6030      	str	r0, [r6, #0]
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d1d5      	bne.n	800707c <__sfp+0x24>
 80070d0:	f7ff ff78 	bl	8006fc4 <__sfp_lock_release>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	e7ee      	b.n	80070b8 <__sfp+0x60>
 80070da:	bf00      	nop
 80070dc:	08007538 	.word	0x08007538
 80070e0:	ffff0001 	.word	0xffff0001

080070e4 <_fwalk_reent>:
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	4606      	mov	r6, r0
 80070ea:	4688      	mov	r8, r1
 80070ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070f0:	2700      	movs	r7, #0
 80070f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f6:	f1b9 0901 	subs.w	r9, r9, #1
 80070fa:	d505      	bpl.n	8007108 <_fwalk_reent+0x24>
 80070fc:	6824      	ldr	r4, [r4, #0]
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d1f7      	bne.n	80070f2 <_fwalk_reent+0xe>
 8007102:	4638      	mov	r0, r7
 8007104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007108:	89ab      	ldrh	r3, [r5, #12]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d907      	bls.n	800711e <_fwalk_reent+0x3a>
 800710e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007112:	3301      	adds	r3, #1
 8007114:	d003      	beq.n	800711e <_fwalk_reent+0x3a>
 8007116:	4629      	mov	r1, r5
 8007118:	4630      	mov	r0, r6
 800711a:	47c0      	blx	r8
 800711c:	4307      	orrs	r7, r0
 800711e:	3568      	adds	r5, #104	; 0x68
 8007120:	e7e9      	b.n	80070f6 <_fwalk_reent+0x12>

08007122 <__retarget_lock_init_recursive>:
 8007122:	4770      	bx	lr

08007124 <__retarget_lock_acquire_recursive>:
 8007124:	4770      	bx	lr

08007126 <__retarget_lock_release_recursive>:
 8007126:	4770      	bx	lr

08007128 <__swhatbuf_r>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	460e      	mov	r6, r1
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	2900      	cmp	r1, #0
 8007132:	b096      	sub	sp, #88	; 0x58
 8007134:	4614      	mov	r4, r2
 8007136:	461d      	mov	r5, r3
 8007138:	da08      	bge.n	800714c <__swhatbuf_r+0x24>
 800713a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	061a      	lsls	r2, r3, #24
 8007144:	d410      	bmi.n	8007168 <__swhatbuf_r+0x40>
 8007146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800714a:	e00e      	b.n	800716a <__swhatbuf_r+0x42>
 800714c:	466a      	mov	r2, sp
 800714e:	f000 f95f 	bl	8007410 <_fstat_r>
 8007152:	2800      	cmp	r0, #0
 8007154:	dbf1      	blt.n	800713a <__swhatbuf_r+0x12>
 8007156:	9a01      	ldr	r2, [sp, #4]
 8007158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800715c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007160:	425a      	negs	r2, r3
 8007162:	415a      	adcs	r2, r3
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	e7ee      	b.n	8007146 <__swhatbuf_r+0x1e>
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	2000      	movs	r0, #0
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	b016      	add	sp, #88	; 0x58
 8007170:	bd70      	pop	{r4, r5, r6, pc}
	...

08007174 <__smakebuf_r>:
 8007174:	898b      	ldrh	r3, [r1, #12]
 8007176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007178:	079d      	lsls	r5, r3, #30
 800717a:	4606      	mov	r6, r0
 800717c:	460c      	mov	r4, r1
 800717e:	d507      	bpl.n	8007190 <__smakebuf_r+0x1c>
 8007180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	2301      	movs	r3, #1
 800718a:	6163      	str	r3, [r4, #20]
 800718c:	b002      	add	sp, #8
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	ab01      	add	r3, sp, #4
 8007192:	466a      	mov	r2, sp
 8007194:	f7ff ffc8 	bl	8007128 <__swhatbuf_r>
 8007198:	9900      	ldr	r1, [sp, #0]
 800719a:	4605      	mov	r5, r0
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff f873 	bl	8006288 <_malloc_r>
 80071a2:	b948      	cbnz	r0, 80071b8 <__smakebuf_r+0x44>
 80071a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d4ef      	bmi.n	800718c <__smakebuf_r+0x18>
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	e7e3      	b.n	8007180 <__smakebuf_r+0xc>
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <__smakebuf_r+0x7c>)
 80071ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	6163      	str	r3, [r4, #20]
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	6120      	str	r0, [r4, #16]
 80071ce:	b15b      	cbz	r3, 80071e8 <__smakebuf_r+0x74>
 80071d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f92d 	bl	8007434 <_isatty_r>
 80071da:	b128      	cbz	r0, 80071e8 <__smakebuf_r+0x74>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	89a0      	ldrh	r0, [r4, #12]
 80071ea:	4305      	orrs	r5, r0
 80071ec:	81a5      	strh	r5, [r4, #12]
 80071ee:	e7cd      	b.n	800718c <__smakebuf_r+0x18>
 80071f0:	08006f81 	.word	0x08006f81

080071f4 <memcpy>:
 80071f4:	440a      	add	r2, r1
 80071f6:	4291      	cmp	r1, r2
 80071f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071fc:	d100      	bne.n	8007200 <memcpy+0xc>
 80071fe:	4770      	bx	lr
 8007200:	b510      	push	{r4, lr}
 8007202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800720a:	4291      	cmp	r1, r2
 800720c:	d1f9      	bne.n	8007202 <memcpy+0xe>
 800720e:	bd10      	pop	{r4, pc}

08007210 <memmove>:
 8007210:	4288      	cmp	r0, r1
 8007212:	b510      	push	{r4, lr}
 8007214:	eb01 0402 	add.w	r4, r1, r2
 8007218:	d902      	bls.n	8007220 <memmove+0x10>
 800721a:	4284      	cmp	r4, r0
 800721c:	4623      	mov	r3, r4
 800721e:	d807      	bhi.n	8007230 <memmove+0x20>
 8007220:	1e43      	subs	r3, r0, #1
 8007222:	42a1      	cmp	r1, r4
 8007224:	d008      	beq.n	8007238 <memmove+0x28>
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800722e:	e7f8      	b.n	8007222 <memmove+0x12>
 8007230:	4402      	add	r2, r0
 8007232:	4601      	mov	r1, r0
 8007234:	428a      	cmp	r2, r1
 8007236:	d100      	bne.n	800723a <memmove+0x2a>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800723e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007242:	e7f7      	b.n	8007234 <memmove+0x24>

08007244 <__malloc_lock>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__malloc_lock+0x8>)
 8007246:	f7ff bf6d 	b.w	8007124 <__retarget_lock_acquire_recursive>
 800724a:	bf00      	nop
 800724c:	20000258 	.word	0x20000258

08007250 <__malloc_unlock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_unlock+0x8>)
 8007252:	f7ff bf68 	b.w	8007126 <__retarget_lock_release_recursive>
 8007256:	bf00      	nop
 8007258:	20000258 	.word	0x20000258

0800725c <_realloc_r>:
 800725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007260:	4680      	mov	r8, r0
 8007262:	4614      	mov	r4, r2
 8007264:	460e      	mov	r6, r1
 8007266:	b921      	cbnz	r1, 8007272 <_realloc_r+0x16>
 8007268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	4611      	mov	r1, r2
 800726e:	f7ff b80b 	b.w	8006288 <_malloc_r>
 8007272:	b92a      	cbnz	r2, 8007280 <_realloc_r+0x24>
 8007274:	f7fe ff9c 	bl	80061b0 <_free_r>
 8007278:	4625      	mov	r5, r4
 800727a:	4628      	mov	r0, r5
 800727c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007280:	f000 f8fa 	bl	8007478 <_malloc_usable_size_r>
 8007284:	4284      	cmp	r4, r0
 8007286:	4607      	mov	r7, r0
 8007288:	d802      	bhi.n	8007290 <_realloc_r+0x34>
 800728a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800728e:	d812      	bhi.n	80072b6 <_realloc_r+0x5a>
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f7fe fff8 	bl	8006288 <_malloc_r>
 8007298:	4605      	mov	r5, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	d0ed      	beq.n	800727a <_realloc_r+0x1e>
 800729e:	42bc      	cmp	r4, r7
 80072a0:	4622      	mov	r2, r4
 80072a2:	4631      	mov	r1, r6
 80072a4:	bf28      	it	cs
 80072a6:	463a      	movcs	r2, r7
 80072a8:	f7ff ffa4 	bl	80071f4 <memcpy>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4640      	mov	r0, r8
 80072b0:	f7fe ff7e 	bl	80061b0 <_free_r>
 80072b4:	e7e1      	b.n	800727a <_realloc_r+0x1e>
 80072b6:	4635      	mov	r5, r6
 80072b8:	e7df      	b.n	800727a <_realloc_r+0x1e>

080072ba <_raise_r>:
 80072ba:	291f      	cmp	r1, #31
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	460d      	mov	r5, r1
 80072c2:	d904      	bls.n	80072ce <_raise_r+0x14>
 80072c4:	2316      	movs	r3, #22
 80072c6:	6003      	str	r3, [r0, #0]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
 80072ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072d0:	b112      	cbz	r2, 80072d8 <_raise_r+0x1e>
 80072d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072d6:	b94b      	cbnz	r3, 80072ec <_raise_r+0x32>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 f831 	bl	8007340 <_getpid_r>
 80072de:	462a      	mov	r2, r5
 80072e0:	4601      	mov	r1, r0
 80072e2:	4620      	mov	r0, r4
 80072e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e8:	f000 b818 	b.w	800731c <_kill_r>
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d00a      	beq.n	8007306 <_raise_r+0x4c>
 80072f0:	1c59      	adds	r1, r3, #1
 80072f2:	d103      	bne.n	80072fc <_raise_r+0x42>
 80072f4:	2316      	movs	r3, #22
 80072f6:	6003      	str	r3, [r0, #0]
 80072f8:	2001      	movs	r0, #1
 80072fa:	e7e7      	b.n	80072cc <_raise_r+0x12>
 80072fc:	2400      	movs	r4, #0
 80072fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007302:	4628      	mov	r0, r5
 8007304:	4798      	blx	r3
 8007306:	2000      	movs	r0, #0
 8007308:	e7e0      	b.n	80072cc <_raise_r+0x12>
	...

0800730c <raise>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <raise+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f7ff bfd2 	b.w	80072ba <_raise_r>
 8007316:	bf00      	nop
 8007318:	200000a4 	.word	0x200000a4

0800731c <_kill_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_kill_r+0x20>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f7f9 fbff 	bl	8000b2c <_kill>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d102      	bne.n	8007338 <_kill_r+0x1c>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b103      	cbz	r3, 8007338 <_kill_r+0x1c>
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	2000025c 	.word	0x2000025c

08007340 <_getpid_r>:
 8007340:	f7f9 bbec 	b.w	8000b1c <_getpid>

08007344 <__sread>:
 8007344:	b510      	push	{r4, lr}
 8007346:	460c      	mov	r4, r1
 8007348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734c:	f000 f89c 	bl	8007488 <_read_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	bfab      	itete	ge
 8007354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007356:	89a3      	ldrhlt	r3, [r4, #12]
 8007358:	181b      	addge	r3, r3, r0
 800735a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735e:	bfac      	ite	ge
 8007360:	6563      	strge	r3, [r4, #84]	; 0x54
 8007362:	81a3      	strhlt	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__swrite>:
 8007366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	461f      	mov	r7, r3
 800736c:	898b      	ldrh	r3, [r1, #12]
 800736e:	05db      	lsls	r3, r3, #23
 8007370:	4605      	mov	r5, r0
 8007372:	460c      	mov	r4, r1
 8007374:	4616      	mov	r6, r2
 8007376:	d505      	bpl.n	8007384 <__swrite+0x1e>
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	2302      	movs	r3, #2
 800737e:	2200      	movs	r2, #0
 8007380:	f000 f868 	bl	8007454 <_lseek_r>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	4632      	mov	r2, r6
 8007392:	463b      	mov	r3, r7
 8007394:	4628      	mov	r0, r5
 8007396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	f000 b817 	b.w	80073cc <_write_r>

0800739e <__sseek>:
 800739e:	b510      	push	{r4, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a6:	f000 f855 	bl	8007454 <_lseek_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	bf15      	itete	ne
 80073b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80073b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ba:	81a3      	strheq	r3, [r4, #12]
 80073bc:	bf18      	it	ne
 80073be:	81a3      	strhne	r3, [r4, #12]
 80073c0:	bd10      	pop	{r4, pc}

080073c2 <__sclose>:
 80073c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c6:	f000 b813 	b.w	80073f0 <_close_r>
	...

080073cc <_write_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	; (80073ec <_write_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 fbdd 	bl	8000b9a <_write>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_write_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_write_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	2000025c 	.word	0x2000025c

080073f0 <_close_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d06      	ldr	r5, [pc, #24]	; (800740c <_close_r+0x1c>)
 80073f4:	2300      	movs	r3, #0
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	f7f9 fbe9 	bl	8000bd2 <_close>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_close_r+0x1a>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b103      	cbz	r3, 800740a <_close_r+0x1a>
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	2000025c 	.word	0x2000025c

08007410 <_fstat_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	; (8007430 <_fstat_r+0x20>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	f7f9 fbe4 	bl	8000bea <_fstat>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d102      	bne.n	800742c <_fstat_r+0x1c>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b103      	cbz	r3, 800742c <_fstat_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	2000025c 	.word	0x2000025c

08007434 <_isatty_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d06      	ldr	r5, [pc, #24]	; (8007450 <_isatty_r+0x1c>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7f9 fbe3 	bl	8000c0a <_isatty>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_isatty_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_isatty_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	2000025c 	.word	0x2000025c

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d07      	ldr	r5, [pc, #28]	; (8007474 <_lseek_r+0x20>)
 8007458:	4604      	mov	r4, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	2200      	movs	r2, #0
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7f9 fbdc 	bl	8000c20 <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	2000025c 	.word	0x2000025c

08007478 <_malloc_usable_size_r>:
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f18      	subs	r0, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfbc      	itt	lt
 8007482:	580b      	ldrlt	r3, [r1, r0]
 8007484:	18c0      	addlt	r0, r0, r3
 8007486:	4770      	bx	lr

08007488 <_read_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d07      	ldr	r5, [pc, #28]	; (80074a8 <_read_r+0x20>)
 800748c:	4604      	mov	r4, r0
 800748e:	4608      	mov	r0, r1
 8007490:	4611      	mov	r1, r2
 8007492:	2200      	movs	r2, #0
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f7f9 fb62 	bl	8000b60 <_read>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_read_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_read_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	2000025c 	.word	0x2000025c

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
